Apuntes Logica y Algortimos 
Dato: Cualquier representacion simbolica ( , grafico, letra, etc)
Un solo dato no representa informacion

Informacion: Es el conjunto de datos que al ser procesados, constituyen un mensaje 
para incrementar el conocimiento de quien lo recibe 

Tipo de dato: Corresponde a la clasifiacion para tratar los datos, de fine el espacio de 
memoria que se debe de reservar para cada tipo de dato 

Datos Alfanumericos: Combinacion de caracteres conocidos: Letras,  s, caracteres especiales 

Caracter: Datos que solo tienen un caracter y se ponene con comillas simples 
Los digitos que son tratados como caracteres son diferentes a los
valores numericos, por lo tanto, no se deben realizar operaciones
aritmeticas con ellos

Cadena: Datos copuestos por un conjunto de letras, digitos y caracteres especiales, van en comillas dobles 

Datos Numericos: Estan compuestos por solo   y signos (positivo y negativo)
se pueden realizar operaciones aritmeticas con ellos 

Enteros: Son los que no tienen punto decimal, incluyen  s positivos, negativos y cero 
Reales: Son datos con componente decimal, incluyen positivos, negativos y cero

Datos Logicos o Booleanos: Son lo que toman solo uno de los dos posibles valores (verdadero, falso)
En binario 1 = VERDADERO, 0 = FALSO

Identificador: es el nombre que se le asigna a las variables, constantes,
funciones, procedimientos y al algoritmo
	Reglas:
	Nemotecnicos: Deben ser alusivos o relacionados con la funcion del elemento
	Primer Caracter: Debera ser una letra
	No llevan caracteres especiales
	Sin espacios en blanco 
	No utiliza palabras reservadas 
	Se escriben en minusculas  ejemplo: camelCase 
	Si se identifca un algotimo se usa Mayuscula AlgoritmoFibonacci 
	Constante tambien en mayuscula Pi=3.1416
	
	
Variables: Una variable es una posicion o espacio de memoria en
el cual se almacena un dato. Su valor puede cambiar
en cualquier momento de la ejecucion del algoritmo,

	Incluyen: 
	Tipo: se refiere al tipo de dato que va a almacenar
	Nombre o identificador: mecanismo con el que se referencia el espacio o posicion de memoria en el cual se almacenara el dato.
	Contenido: hace referencia al valor que almacena, el cual depende del tipo de dato que se haya definido.
	
Declaracion de variables: Declarar una variable quiere decir que se va a reservar un espacio de memoria, el cual tendra un nombre y un tipo de dato

Ejemplos:
Cadena cedula
Cadena telefono
Real salario
Entero edad
Caracter estratoSocioeconomico
Logico esFumador


Con estas declaraciones se le indica al equipo que debe reservar 6 espacios en su memoria y a cada uno asignarle el respectivo nombre que se definio.


-Cuando en una declaracion de variables se tengan varias del mismo tipo,
estas pueden ser agrupadas en una sola declaracion, separandolas mediante
comas. Ejemplo:
Cadena cedula, telefono

Almacenamiento de un dato en una variable: 2 FORMAS
	Lectura de dato: Proviene desde el exterior del algoritmo, lo proporciona el usuario
	Expresion de asignacion: Mecanismo para que una variable o constante tome valor 
	

una variable puede cambiar su valor en
cualquier momento. Ejemplo:
1 a = 5
2 b = a
3 c = 3 * b
4 a = c - b

la asignacion almacena en la variable a el valor de 10, puesto que c tiene almacenado el valor de 15 y le es restado el valor de b, que en este caso es 5.

-Cada que una variable cambia su valor, el dato anterior se pierde	


CONSTANTE: Espacio en memoria donde se almacena un dato que permanece constante durante toda la ejecucion de un algoritmo 
Se declara: 
	Constante Tipo IDENTIFICADOR = valor

	Ejmplos:
		Constante Real VALOR_PI = 3.1415926
		Constante Real DESCUENTO = 0.10
		Constante Entero MAXIMO = 10
		Constante Real SALARIOMINIMO = 781000.0
		Constante Caracter CATEGORIAPORDEFECTO = ’B’


Operador: Simbolo que permite realizar operaciones con  s o datos que se encuentran almacenados en las variables o constantes 
Existen 3 tipos de operadores: ARITMETICOS, RELACIONALES Y LOGICOS 

Expresion: Es una instruccion que puede estar compuesta por operadores, variables, constantes y  s que produce un resultado numerico o logico (Las expresiones se escriben sobre una solo linea)
		Ej: Operando1 Operador Operando2


Tipos de Operadores:
ARITMETICOS: Todos aquellos que usados para realizar operaciones aritmeticas siendo entero o reales su tipo de dato y da como resultado un dato numerico 
	+ Suma
	- Resta
	* Multiplicacion o producto
	/ Division real o entera
	% Modulo o Resto de la division entera
	ˆ Potenciacion, este sımbolo tiene el nombre de circunflejo.

El operador % (Modulo o Resto de la division) solo se puede emplear
con datos de tipo Entero.
El operador / puede usarse con datos enteros o reales. Si los datos
son enteros, el resultado es entero, si alguno de los datos es real, el
resultado sera del mismo tipo (real)

RACIONALES:
Estos operadores se utilizan para escribir expresiones relacionales o de comparacion, las cuales producen un resultado logico o booleano: Verdadero o Falso.

	Los operadores relacionales son los siguientes:
	< Menor que.
	> Mayor que.
	<= Menor o igual a.
	>= Mayor o igual a.
	!= Diferente de.
	== Igual a
Se usa un solo igual (=) para realizar asignacion de valores en variables o constantes. Se utiliza doble igual (==) para realizar comparaciones entre dos operandos.

BOOLEANOS:
Estos operadores se utilizan para crear expresiones logicas o booleanas cuyo resultado es de tipo logico: Verdadero o Falso.

	Los operadores logicos son los siguientes:
	Y Conjuncion.   . El resultado  es verdadero solo cuando ambos operandos son verdaderos
	O Disyuncion. . Su resultado sera verdadero cuando al menos uno de los dos operandos tenga ese valor
	NO Negacion. Si el operando es Verdadero, cambia su estado a Falso, y viceversa.

REPASO OPERADORES BOOLEANOS

Cundo se tiene Y (Conjuncion) El resultado sera verdadero si y solo si ambos son verdaderos, si se tiene el operador O (Disyuncion) el 
resultado sera verdadero cuando uno de los operadores sea verdader y el operador NO cambia el valor del operador es decir si se tiene como VERDADERO 
cambiara ese operador a FALSO y viceversa 


Expresiones aritmeticas:
En estas expresiones intervienen variables, constantes,  s y operadores aritmeticos, asi como los parentesis. La expresion entrega un
resultado de tipo numerico luego de ser calculada.

	Ejemplos:
	   Ejemplo	Explicacion 		Resultado
		3 + 5 	Suma 3 con 5		  8
		2 - 8 	Resta 8 de 2 		 -6
		7 * 6	Multiplica 7 por 6	 42

Las expresiones aritmeticas tambien pueden ser construidas con variables o en combinacion con constantes

		Expresion 					Explicacion

		lado1 + lado2 				Se suman los valores almacenados en las variables lado1 y lado2.
		a - b 						Al valor de la variable a se le resta el valor de la variable b.
		base ∗ altura 				Los valores almacenados en las variables base y altura son multiplicados entre si

EXPRESION CON VARIOS OPERADORES: Para este escenario es necesario tener en cuenta la prioridad en las operaciones.

	Prioridad:
	Orden    Operador
		1     ( )
		2      ˆ
		3     *, /, %
		4     +, -

Si en una expresion se encuentran 2 o mas operadores consecutivos de igual jerarquıa o precedencia, las operaciones se van realizando de izquierda a derecha.
EJ: 10 - 6 + 2 = 6

Cuando se requiera cambiar el orden de ejecucion de algun operador, se deben usar los parentesis.
EJ: 10 - (6 + 2) = 2

Cuando se tengan varias agrupaciones de parentesis, se deben solucionar de izquierda a derecha, teniendo en cuenta que, si hay parentesis internos, estos son de mayor prioridad
Ejercicio:
			((4 + 8) * 3) / (7ˆ2 % (2 + 1))

		Dentro del primer parentesis hay una suma y un producto; la prioridad la tendrıa el producto, pero los parentesis que encierran la suma deben resolverse primer
			(12 * 3) / (7ˆ2 % (2 + 1))
		
		Ahora si es posible llevar a cabo el producto dentro del parentesis del lado izquierdo de la division
			36 / (7 ˆ 2 % (2 + 1))

		primero debe resolverse la potencia, luego la division y por ultimo la suma
		-pero los parentesis internos cambian el orden de ejecucion, por lo tanto, lo primero que se va a ejecutar es la suma:
			36 / (7 ˆ 2 % (2 + 1))
			36 / (7 ˆ 2 % 3)

		La expresion se reduce de la siguiente manera, donde la prioridad la tiene la potencia:
		36 / (49 % 3)

		Hace falta resolver la division modular
		36 / 1

		Por ultimo la division, lo que da como resultado 36


NOTACION ALGORITMICA:
Cuando se va a trabajar con una formula en un algortimo por lo regular esta como expresion aritmetica pero se tiene que hacer la conversion a NOTACION ALGORITMICA, esto es para que 
se pueda interpretar por el dispositivo que procesara los datos 
	
	Estructura:  En una sola linea a = (2 * x + y) / (x - y)
	*REGLAS PARA NOTACION ALGORITMICA
		1.-Cuando la formula exprese una division y en alguno de sus terminos (dividendo o divisor) se tenga una operacion, esta debe encerrarse entre parentesis x = (a + 1)/b
		2.-Cuando se tenga una potencia y su exponente involucre una operacion, debe encerrarse entre parentesis  xˆ(3 ∗ b)
		3.-Cuando la formula incluya raıces, estas deben expresarse en forma de potencias  3√5√x,debe expresarse ası: xˆ(1/5)ˆ(1/3)
	
EXPRESIONES RELACIONALES
En este tipo de expresiones intervienen los operadores relacionales, ademas de variables,  s y constantes.
Estas expresiones comparan el valor de sus operandos y arrojan un resultado de tipo Logico: 

		Ejemplos
		Expresion                Resultado            Explicacion
		4 < 8                   Verdadero             Compara si 4 es menor que 8.
		3 > 7                     Falso               Compara si 3 es mayor que 7.
		6 <= 6                  Verdadero             Compara si 6 es menor o igual a 6.           
		2 >= 9                   Falso                Compara si 2 es mayor o igual a 9.
		5 ! = 1                 Verdadero             Compara si 5 es diferente de 1.
		10 == 10               Verdadero              Compara si 10 es igual a 10.

Los operandos que hacen parte de una expresion relacional, pueden estar compuestos por constantes, variables o la combinacion de ambos.
	definitiva >= 3.0

Se tiene la expresion relacional que indica si el valor de la variabe con nombre (definitiva) es mayor igual a 3.0, esto retornara si es verdadero o falso segun el valor que se almace en la variable 


EXPRESIONES LOGICAS 
Son aquellas que se utilizan para crear condiciones a partir de datos logicos. Se componen de expresiones relacionales o logicas, conectadas a traves de operadores logicos y solo daran resultados VERDADEROS O FALSOS 

	EJEMPLO OPERADOR Y

		EJ: para poder hacer cualquier transaccion en un cajero automatico se requiere poseer una tarjeta (debito o credito) y adicionalmente la clave de dicha tarjeta
		
		Escenarios: 

			1.-Se tiene la tarjeta y la clave se puede efectuar la transaccion
			2.-Se tiene la tarjeta pero no la clave, no se puede realizar la transaccion
			3.-No tiene la tarjeta  pero si la clave, no se puede realizar la transaccion
			4.-No se tiene tarjeta ni la clave, no se puede realizadar la transaccion

			Ahora en expresion   Operando1 Operador Operando2 


			el operando1 estara representado por la tarjeta de credito y el operando2 sera la clave de dicha tarjeta, el operador sera la conjuncion (Y)

			tarjeta          clave             tarjeta Y clave        Explicacion

			Verdadero        Verdadero         Verdadero              Hay transaccion
			Verdadero        Falso             Falso                  No hay transaccion
			Falso 			 Verdadero	 	   Falso 				  No hay transaccion
			Falso 			 Falso 			   Falso   				  No hay transaccion	


	Conclusion: solo puede hacer la transaccion cuando se cumplan las dos condiciones, tener la tarjeta y la clave, lo cual dara un resultado Verdadero

	EJEMPLO OPERADOR O  

		EJ: para el proximo cumpleaños de una sobrinita, ella quiere que le regale una mascota, dice que estarıa feliz si le regalo un gato o un perro, o ambos; pero que si no le doy la mascota estara enojada 
		en su dıa.
		Escenarios: 
			1.-Se le regala perro y gato, estara feliz 
			2.-Se le regala perro pero no gato, estara feliz 
			3.-No se le regala perro pero si gato, estara feliz 
			4.-No se le regala perro ni el gato, estara enojada 

		Ahora en expresion   Operando1 Operador Operando2 
		 el operando1 estara representado por el perro y el operando2 sera el gato, el operador sera la disyuncion (O).

		 perro 		       gato 			perro O gato 			Explicacion
		 
		 Verdadero	  	   verdadero		Verdadero 				Feliz
		 Verdadero		   Falso			Verdadero    			Feliz
		 Falso			   Verdadero		Verdadero				Feliz
		 Falso			   Falso			Falso 					Infeliz 
	
	Conclusion: El operador O, el resultado sera verdadero con solo cumplir una de las condiciones


	EJEMPLO OPERADOR NO 
	
	EJ:  Su funcion es cambiar el estado logico de su unico operando
		NO (5 < 10) ----- se debe leer: es falso que 5 sea menor que 10
		El resultado que arroja esta expresion es Falso. La expresion relacional (5 <10) es verdadera, al ser negada con el operador NO, cambia su estado de Verdadero a Falso


PRIORIDAD COMPLETA RESPECTO A LOS OPERADORES 

Orden 	Operador
1 		( )
2 		- (signo)
3		 ˆ
4		 *, /, %
5 		+, -
6 		<, <=, >, >=
7		 ==, ! =
8 		NO (Negacion)
9 		Y (Conjuncion)
10 		O (Disyuncion)
11 		= (asignacion)


Ejemplo:


Primero se evaluan las expresiones relacionales y luego el operador logico (Y). Ambas expresiones relacionales son verdaderas, por lo tanto la expresion logica es verdadera.

	EJEMPLO DE EXPRESION COMPLEJA 

		(20 > 40 Y 2 <= 10) O (32 < 50 Y 20 <= 20)
	
	En esta expresion se tiene dos  operadores Y que se tiene que cumplir la condicion dentro de cada parentesis para que la expresion sea verdadera. Solo una vez que se cumpla lo que indica el operador Y 
	Se podra continuar con el operador O, al cual le basta solo con que una expresion sea verdadera pero no lo seran si no se cumple Y 

		La evaluacion, de acuerdo a la prioridad

		(20 > 40 Y 2 <= 10) O (32 < 50 Y 20 <= 20)
		(Falso Y 2 <= 10) O (32 < 50 Y 20 <= 20)
		
		(Falso Y Verdadero) O (32 < 50 Y 20 <= 20) La primera expresion logica arroja un resultado falso:

		Falso O (32 < 50 Y 20 <= 20)
		Falso O (Verdadero Y 20 <= 20)
		Falso O (Verdadero Y Verdadero)
		Falso O Verdadero

		El resultado Fin al de esta expresion es verdadero.

	Las expresiones logicas son utlies para definir edad
	(edad >= 18) Y (edad <= 24)  ---- , el dato almacenado en la variable edad debera ser mayor o igual a 18 y menor o igual a 24.

ALG
Conjunto de acciones o pasos Finitos, ordenados de forma logica y que se utilizan para resolver un problema o para obtener un resultado

Este tipo de soluciones requieren de un analisis detallado de la informacion que se posee y del objetivo o resultados que se pretenden alcanzar. Deben de ser ORDENADOS, definidos Y Finitos

	ORDENADO:el orden de ejecucion de sus pasos o instrucciones debe ser riguroso, algunos tendran que ser ejecutados antes de otros, de manera logica

	DEFINIDO: el algortimo debe de producir siempre los mismos resultados, sin importar las veces que sea ejecutado 

	FINITO:  todo algoritmo posee un inicio, de igual forma debe tener un Fin al; la ejecucion de sus instrucciones debe terminar una vez procese los datos y entregue resultados

--clasifiacion de los Alg
		Matematicos: Describen como realziar una operacion matematica 
		Informal: Son ejecutados por el ser humano en su dia a dia 
		Computacionales: Son creados con el Fin de que una computadora los pueda ejecutar 

--Representacion: debe usarse una notacion simple y lo suficientemente clara para que no se de lugar a ambiguedades
1. Descripcion narrada. Los pasos o instrucciones se describen mediante un lenguaje natural, usando palabras o frases normales y corrientes. Usados comunmente en algoritmo  Informal
2. Diagramas de flujo. 
3. Pseudocodigo. 
			
		Patron de ejecucion:

			ENTRADA ---- PROCESO ---- SALIDA

Entrada: en esta etapa se le proporciona al algoritmo los datos que se poseen del problema y que son necesarios para su solucion.
Proceso: hace referencia a los pasos, actividades, instrucciones o calculos que realiza el algoritmo para solucionar el problema o encontrar un resultado. Generalmente, en esta etapa se transforman 
		 los datos de entrada en resultados de salida.
Salida: es la entrega de resultados o la respuesta dada por el algoritmo.

D.F: o. Lo conforma un conjunto de componentes que permiten representar acciones, decisiones o calculos con los cuales se soluciona un problema determinado
**Cuando el D.F. esta realizado de manera correcta, implementarlo a un lenguaje es sencillo para Fin es ilustrativos verificar a traves de la tabla 1.11 y 1.12 de la pag 50 y 51 del PDF **


	Buenas Practicas para la construccion de un D.F
	-El diagrama de flujo debe tener un nombre que identifique su funcion
	-Los diagramas de flujo no tienen declaracion de variables, ellas simplemente se usan
	- Se recomienda que los conectores a la misma pagina se identifiquen con  s y los conectores a pagina diferente usen letras, o viceversa
	-A los simbolos de decision se le deben dibujar las dos lineas de salida, especificando cual es la verdadera y cual es la falsa

	
Pseudo: otra de las formas de expresar un algoritmo, usando palabras similares a las propias de los lenguajes de programacion

	Plabras reservadas:
	Algoritmo – Fin Algoritmo. Indica el comienzo y Fin al del algoritmo, respectivamente. Cada algoritmo tendra solo un inicio y un solo Fin al.
	Entero, Real, Cadena, Caracter, Logico. ...Se usan para declarar el tipo de dato de las variables que se requieren en la solucion del problema.
	Constante. Este codigo se emplea en el momento de declarar constantes.
	Si, Entonces, SiNo, Fin Si. ...Se usan para la toma de decisiones simples y compuestas.
	Segun, Caso, Fin Caso, En OtroCaso, Fin Segun. ....Utilizadas para la toma de decisiones multiples.

***Forma general  en pseudo

			Algo <Nombre > //  Comienzo del algo   ---- debe dar un contexto de lo que soluciona.
			// Comentarios ---- Sirven para documentar 

			// Declaracion de variables -----Es la declaracion de las variables que se van a utilizar. Todas las del mismo tipo se pueden agrupar, en uno o varios renglones, separandose mediante comas (,)
			TipoDato variable1, variable2, ..., variableN

			// DeFin icion de constantes ---- Se usa para deFin ir las constantes que se requieran dentro del algoritmo.
			Constante tipoDato CONSTANTE1 = valor

			// Instrucciones a ejecutar ---- Se escriben en orden logico las instrucciones que van a ser ejecutadas, mediante palabras reservadas 
			<Instruccion 1>
			<Instruccion 2>
			< ... >
			< ... >
			<Instruccion n>

			Fin Algoritmo // Fin del algo



	***Como hacer el analisis de esos problemas y como implementar***

		Pasos para la construccion:
			1. DeFinicion del problema.
			2. Analisis del problema.
			3. Diseño del algoritmo.
			4. Codificacion (implementacion).
			5. Compilacion y ejecucion.
			6. Verificacion y depuracion.
			7. Mantenimiento.
			8. Documentacion.

	1.-DeFin icion: Se debe establecer claramente cual es el problema a solucionar.  en la practica profesional, estara cubierta por las necesidades que expresen los clientes
	2.-Analisis: Analizar es comprender.
			¿Cuales resultados se esperan? ---constituyen las salidas del algoritmo y son el producto del proceso que realice
			¿Cuales son los datos disponibles? --se refiere al conjunto de datos que se tiene y que se va a procesar para servir de insumo a la solucion del problema.
			¿Que procesos hay que realizar? ---son todas las acciones a los que se someten los datos disponibles para encontrar la solucion del problema. 
			¿Que variables se deben utilizar? ---Con base a los puntos anteriores se establecen las variables, en este punto, se hace necesario establecer el tipo de dato

	3.-Diseño: Consiste en la creacion del algoritmo que soluciona el problema   3 formas EJ: Medicion de la Velocidad 

			-*Descripcion Narrada:   no es facil de traducir a un lenguaje de programacion
				1 Algo
				2 Leer la distancia recorrida.
				3 Leer el tiempo empleado en recorrer esa distancia.
				4 Calcular la velocidad, empleando la formula.
				5 Informar el resultado del calculo (la velocidad).
				6 Fin Algo


			-*Diagrama de Flujo: en la pag73 En las Tablas 1.13, 1.14 y 1.15 ----se mostraran los símbolos correspondientes a los diagramas de flujo y sus equivalencias en Pseudocodigo
			-*Pseudocodigo:  en pseudocodigo se hizo la declaracion de variables
				1 Algoritmo Velocidad
				2 Real v, x, t
				3 leer( x )
				4 leer( t )
				5
				6 v = x / t
				7
				8 imprimir( v )
				9 Fin Algoritmo

									Version Mejorada de Algo
										1 Algoritmo Velocidad
										2 Real v, x, t
										3
										4 imprimir( "Ingrese la distancia: " )
										5 leer( x )
										6 imprimir( "Ingrese el tiempo: " )
										7 leer( t )
										8
										9 v = x / t
										10
										11 imprimir( "La velocidad es: ", v )
										12 Fin Algoritmo

***Aclaracion: En la version en pseudocodigo se hace la declaracion de variables, en los diagramas de flujo no se requiere. La impresion de mensajes tambien se puede hacer dentro de los diagramas de flujo.

|||		Ejercicios		|||  PAG 75

******CAP 2 ******    Estructura secuencial
un algoritmo secuencial es aquel en el que una accion sigue a otra accion en la secuencia de instrucciones ejecuta la primera accion, luego la que sigue y ası sucesivamente hasta la ultima
		
		Conatan de 3 etapas:

			Entradas: se identifican e ingresan al algoritmo los datos que se conocen y son necesarios
			Procesos: se implementan las operaciones que encontraran los resultados que se espera obtendra el algoritmo
			Salidaas: se mostraran los resultados que se encontraron en la seccion anterior y sera lo que debe entregar como respuesta el algoritmo a quien lo utilice

EJERCICIO 2.1:

	Suponga que la oficina de tesorerıa de una empresa requiere de un algoritmo que le permita calcular el salario a pagar a un empleado. Imagine que a este empleado le pagan de acuerdo con el   de horas
	que haya laborado durante el periodo a razon de un valor especıfico cada hora.

		ANALISIS:

			Resultados esperados: Algoritmo que permita a un usuario calcular el salario a pagar a los empleados mediante el   de horas que tendran un valor monetario, por un lapso de tiempo determinado 

			Datos disponibles: Administrador del programa, trabajador, valor de las horas, lapso de tiempo 

			Proceso: Contar con el valor de cada hora y mediante una expresion algebraica multiplicar el valor de la hora por el   de horas laboradas. Este resultado debera asignarse a una variable

		VARIABLES REQUERIDAS:

			valorHora: 				valor a pagar por cada hora de trabajo.
			numHora: 				almacena la cantidad de horas que laboro el empleado
			valorHoranumHora:	    valor a pagar al empleado.

		Propuesta 1:
		
			PAGOEMPLEADO
			//Este algoritmo permite calcular el salario de un
			// empleado con base en las horas laboradas y el valor
			// de la hora.

			entero numHora
			real valorHora, valorHoranumHora

			imprimir ("Ingrese el valor de la hora: ")
			leer (valorHora) 

			imprimir ("Ingrese el   de horas laboradas: ")
			leer (numHora)

			valorHoranumHora = valorHora * numHora


			imprimir ("el salario a pagar es: ", valorHoranumHora )



EJERCICIO 2.1: Elabore un algoritmo que, a partir del valor del radio de un cırculo, permita calcular tanto su area como su perımetro

		ANALISIS:

			Resultados esperados: Algortimo que va a calcular el radio de un circulo y con el valor del radio se podra calcular su area y parimetro 

			Datos disponibles: Valor del radio, constante PI, formula de area y perimetro del ciculo 

			Proceso: Se va a solicitar el radio al usuario y mediante la expresion PI * RADO ^ 2 se calulara el area posterior a ello se calculara el perimetro mediante la expresion 2 * PI * radio

		VARIABLES REQUERIDAS:

			Var 
			real radio, area, perimetro

			Constante
			real PI 3.1416


		Propuesta 1:
		AREAPERIMETROCIRCULO
		// Mediante este algoritmo se puede calcular el area y 
		// el perımetro de un c  ırculo cualquiera conociendo su 
		// radio

		var
		real radio, area, perimetro
		
		cons
		real PI = 3.1416 

		imprimir ("Ingrese el valor del radio: ")
		leer (radio)

		area = PI * radio ^ 2 
		perimetro = 2 * PI * radio

		imprimir ("El valor del area es de: ", area)
		imprimir ("El valor del perimetro es de: ", perimetro)


EJERCICIO 2.3:  A partir de un   ingresado, se calculen y muestren los resultados que arroajn las principales funciones del lenguaje algorıtmico para ese  
				(se espera que se muestren el seno, el coseno, la tangente, la raız cuadrada, el logaritmo natural y el logaritmo en base 10 del   ingresado por el usuario.)

			ANALISIS:

				Resultados esperados: se espera que se muestren el seno, el coseno, la tangente, la raız cuadrada, el logaritmo natural y el logaritmo en base 10 del   ingresado por el usuario

				Datos disponibles: Un   real ingresado por el usurario 

				Proceso: Mediante el   real ingresado por el usuario hacer los calculos para cada una de las funciones del lenguaje algortimico
							
			VARIABLES REQUERIDAS:
			
			real  , seno, coseno, tangente
			real raiz, logaritmoNatural, logaritmo10



			Propuesta 1:
			FuncionesAlgoritmicas
			/*Algoritmo que ilustra
			el uso de varias funciones matematicas 
			disponibles en el lenguaje algorıtmico 
			y en los difentes lenguajes de programacion
			*/

			imprimir ("Ingrese un   para realizar los calculos: ")
			leer ( )
			
			seno = sen ( )
			coseno = cos ( )
			tangente = tan ( )
			raiz = raizCuadrada ( )
			logaritmoNatural = ln ( ) 
			logaritmo10 = log ( )

			imprimir ("Del  ",   "sus funciones algoritmicas son: ")
			imprimir ("El seno es: ", seno)
			imprimir ("El coseno es: " coseno)
			imprimir ("La tangente es: ", tangente)
			imprimir ("La raiz es: ", raiz)
			imprimir ("El logaritmo natural es: ", logaritmoNatural)
			imprimir ("El logaritmo base 10 es: ", logaritmo10)

			Fin FuncionesAlgoritmicas


EJERCICIO 2.4:  se obtendrıan 4 notas parciales durante el semestre y que, la nota deFin itiva para la asignatura serıa la media aritmetica de esas 4 notas. ¿Cual es la nota deFin itva?

		 ANALISIS:

			Resultados esperados: Se desea obtenr la calificacion Fin al de un alumno (promedio)

			Datos disponibles: 4 resultados de  s reales y un solo resultado Fin al 

			Proceso: Se solicitaran las calificaciones y se sumaran, despues se dividiran entre el   de calificaciones y se guardaran en una variable 

			Variables requeridas:

			real cal1, cal2, cal3, cal4, calFin al

		Propuesta 1:

		 CalificacionEstudiante
		/* Este algoritmo calcula la nota deFin itiva de un
		estudiante a partir de 4 notas parciales a traves
		de la media aritmetica.  */

		Var
		Real cal1, cal2, cal3, cal4, calFin al

		imprimir ("Ingrese la primera calificacion 1: ")
		leer (cal1)

		imprimir ("Ingrese la segunda calificacion 2; ")
		leer (cal2)

		imprimir ("Ingrese la segunda calificacion 2; ")
		leer (cal2)

		imprimir ("Ingrese la segunda calificacion 2; ")
		leer (cal2)

		calFin al = (cal1 + cal2 + cal3 + cal4) / 4
		imprimir ("La calificacion Fin al es: " calFin al)

		Fin CalificacionEstudiante

EJERCICIO 2.5:   Algo que permita calcular el valor de los intereses ganados por una cantidad de dinero invertida en un Certificado de Deposito a Termino (CDT) en un banco o entidad Fin anciera durante
				 un periodo de tiempo (en dıas), de acuerdo con la siguiente formula:

										valorIntereses = (cantidad ∗ porcentajeInteres ∗ periodo)/360

				 El algoritmo debe determinar tambien el valor total a retirar por el cliente que invirtio en el CDT al Fin al del periodo, suponiendo que sobre los intereses ganados hay un descuento del 7 % 
				 por concepto del impuesto de retencion en la fuente

		 ANALISIS:

			Resultados esperados: Calcular los interese gandos por ingresar una cantidad de dinero a un CDT durante un periodo de tiempo en dias y se debe determinar el valor total que se obtendra al Fin al del periodo 
								  descontando el 7 % de las ganancias por concepto de impuesto de rentencion en la fuente
			

			Datos disponibles: Se requiere la cantidad de dinero a ingresar (real) y el perido de tiempo (entero), como la formula para calcular el interes ganado(real), y la retencion (real)

			Proceso: Se solicitara cantidad a ingresar, perido de tiempo a invertir, el algoritmo dara el valor de los interes obtenidos, valor total a retirar y descuento por retencion en la fuente 


			Variables requeridas:

			real cantidad, valorIntereses, porcentajeInteres, valorTotal, retencionInteres
			entero periodo

		Propuesta 1:

			INTERESCDT

			imprimir ("Ingrese la cantidad a invertir en el CDT: ")
			leer (cantidad)

			imprimir ("Ingrese en dias el periodo a inveritir")
			leer (periodo)

			imprimir ("Ingrese el porcentaje: ")
			leer (porcentajeInteres)

			valorIntereses = (cantidad ∗ porcentajeInteres/100 ∗ periodo)/360

			retencionInteres = valorIntereses * 0.07 

			valorTotal =  valorIntereses - retencionInteres

			imprimir ("El CDT genero la cantidad de: " valorIntereses)
			imprimir ("La retencion por concepto de fuente es de: " retencionInteres)
			imprimir ("El total a pagar es por: " valorTotal)

			Fin INTERESCDT


EJERCICIO 2.6: Se requiere construir un algoritmo al que se le ingrese un   entero de 3 cifras (Por ejemplo, 927 o 483). El algoritmo debera
			   determinar el valor de la suma de las 3 cifras, 18 para el primer ejemplo y 15 para el segundo ejemplo

		 ANALISIS:
			
			Resultados esperados: Se desea que tras ingresar un   de 3 cifras, se sumen cada una de ellas y se obtenga 
			
			Datos disponibles:   de 3 cifras entero 
			
			Proceso: Se solicitara al usuario el   de 3 cifras y una vez ingresado el algoritmo debe descomponerlos ya que 
			 se va a asignar cada valor a una variable y se sumaran para entregar el resultado de la suma de el   de 3 cifras 

			Variables requeridas:
			entero  Tres, num1, num2, num3, resultado

		Propuesta 1:
		SUMA3DIGITOS
		// Solicita un   de 3 digitos y suma cada uno de ellos 
		
		var
		entero  Tres, num1, num2, num3, resultado
		imprimir ("Ingresa un   entero de 3 cifras: ")
		leer ( Tres)

		num1 =  Tres / 100
		num2 = ( Tres / 10) % 10 
		num3 = num3 % 10 

		resultado = num1 + num2 + num3

		imprimir ("La suma de los 3 digitos ingresados es de: " resultado)

		Fin SUMADIGITOS 


EJERCICIO 2.7. Los empleados asalariados en Colombia deben realizar un aporte a seguridad social que consiste en un 4 % para la salud y un 4 % para la pension. Diseñe un algoritmo que permita 
				calcular el valor del aporte que debe realizar un empleado a salud y a pension sobre el salario base, que determine el total del descuento por estos conceptos y cual serıa el 
				valor del salario neto que recibirıa el empleado luego de que le realicen los descuentos.
		
		ANALISIS:

			Resultados esperados: El algortimo entregara  como resultados el valor a aportar por salud, por pension, la suma de estos y el salario neto que recibira el empleado

			Datos disponibles: Se solicitara al usuario el salario base, del cual se decontara el aporte de seguridad social para la salud del 4%, y tambien se descontara un porcentaje por concepto de pension 4%

			Proceso: Del salio base se descontara 4% de salud y 4 % de pension, el algortimo determinara el total de descuento por estos conceptos  y dara el valor del salario neto luego de descontar estos concpetos

			Variables requeridas:
			real salarioBase, desSalud, desPension, desTotal, salarioNeto

			Propuesta 1:
			1 Algoritmo SeguridadSocial
				// Este algoritmo calcula el valor del aporte por salud y
				// pension que se hacen sobre el salario base de un 
				// empleado y determina el valor total de estos descuentos
				// y el salario neto a pagar al empleado

			imprimir ("Ingrese su salario base: ")
			leer (salarioBase)

			desSalud = salarioBase * 0.04
			desPension = salarioBase * 0.04

			desTotal = desSalud + desPension

			salarioNeto = salarioBase - desTotal

			imprimir ("El aporte de salud es por: " desSalud)
			imprimir ("El aporte de pension es por: " desPension)
			imprimir ("Los aportes de salud y pension son por la cantidad de: " desTotal)
			imprimir ("El salio tras aportes es por la cantidad de: " salarioNeto)

			Fin SeguridadSocial



EJERCICIO 2.8.  Se requiere construir un algoritmo que, al ingresarle un   de dıas cualquiera, este permita saber cuantos minutos y cuantos segundos tiene la cantidad de dıas ingresados. 
				Para ello, es imprescindible saber cuantos minutos tiene un dıa, ası como tambien el   de segundos contenidos en cada dıa, esto se puede obtener al multiplicar el
				  de dıas que se ingresaron por la cantidad de horas que tiene cada dıa (24) y a su vez, por la cantidad de minutos que tiene cada hora (60) y por la cantidad de segundos que tiene un minuto (60).

		ANALISIS:

			Resultados esperados: Se desea saber la cantidad de minutos y segundos que tiene cierta cantidad de dias 

			Datos disponibles: Se requiere solicitar la cantidad de dias para calcular los minutos y segundos que contiene 

			Proceso: El usuario proporciona en   de dias (entero) para determinar la cantidad de minutos y segundos que contienen los dias ingresados. Se requiere saber cuantos minutos tiene el dia, 
			asi como el   de segundos contenidos en cada dia
			-Se multiplica la cantidad de dias ingresados por las horas que tiene cada dia (24) y a su vez la cantidad de minutos que tiene cada hora (60) por la cantidad de segundos que tiene un minuto (60)

			Variables requeridas: 
			entero dias
			real: minuto, segundos, cantidadMinSeg

			Propuesta 1: 
			ConversionMinSeg

			 // Este algoritmo encuentra la cantidad de minutos
			 // contenidos en un determinado   de dıas
			 // ası como la cantidad de segundos.

			imprimir ("Ingrese la cantidad de dias a calcular (enteros): ")
			leer (dias)

			minutos = dias * 24 * 60
			segundos = minutos * 60 

			imprimir  (dias, "días equivalen a: ")
			imprimir  (minutos, "minutos")
			imprimir (segundos, "segundos")

			Fin ConversionMinSeg




EJERCICIO 2.9. Construya un algoritmo que permita encontrar las dos
				soluciones reales a una ecuacion algebraica de segundo grado a partir de
				la formula general. Suponga por ahora que el ejercicio planteado no tiene
				soluciones imaginarias.  Formula general: 
		

		ANALISIS:

			Resultados esperados:Se espera la respuesta de la ecuacion x1 y x2, suponiendo que son reales

			Datos disponibles: Se deben de conocer los valores de a,b,c 

			Proceso: Se deben de ingresar los valores de a,b,c, se debera aplicar la formula Genera
					escrita en lenguaje algoritmico, una vez para x1 usando + antes del radical y otra para x2 usando - antes de radical
					-Se usaran funciones algoritmicas

			Variables requeridas: 
			
			real a,b,c, x1, x2 

			Propuesta 1: 
			FUNCIONCUADRATICA 
			// Este algoritmo calcula las dos soluciones de una
			// ecuacion cuadratica. Teniendo en cuenta que estas 
			// deben ser reales por ahora

			var 
			real a,b,c, x1, x2 
			imprimir ("Ingrese el valor de a: ")
			leer (a)

			imprimir ("Ingrese el valor de b:")
			leer (b)

			imprimir ("Ingrese el valor de c:" )
			leer (c)

			x1 = (-b + raizCuadrada (b^2 - 4 * a * c)) / (2 * a )
			x2 = (-b - raizCuadrada (b^2 - 4 * a * c)) / (2 * a )

			imprimir ("El valor de x1 es de: " x1)
			imprimir ("El valor de x2 es de: " x2)

			Fin FUNCIONCUADRATICA

EJERCICIO 2.10. 		Construya un algoritmo que al ingresarle la cantidad de metros cuadrados de la casa o apartamento en la que se va a instalar el piso y el
						costo de la caja de ceramica, este permita saber cuantas cajas debe comprar y el costo total de las mismas.

		ANALISIS: 
		
			Resultados esperados: el algoritmo debe determinar el   de cajas de ceramica a comprar y el costo total de las mismas.

			Datos disponibles: se debe conocer la cantidad de metros cuadrados que posee el inmueble (casa o apartamento) donde se va
							   a instalar la ceramica y el costo de la caja de ceramica seleccionada para hacer la instalacion.

			Proceso: con la cantidad de metros cuadrados se debe realizar una division entre 2.26, que corresponde al   de metros cuadrados
					cubiertos por la ceramica que trae cada caja; con esto se obtendra el   de cajas necesarias. Ahora, conociendo el   de cajas,
					se multiplica por el valor de las cajas y se obtendra el costo de este material.

			Variables requeridas: 
			
			real metroCuadrado, numCaja, costoCaja, costoNumCaja

			Propuesta 1: CALCULADORMETROSCUADRADOS
			imprimir ("Ingrese el   de metros cuadrados: ")
			leer (metroCuadrado)

		 	imprimir ("Ingrese el costo por caja: ")
			leer (costo)

			numCaja = metroCuadrado / 2.26 

			costoNumCaja = numCaja * costo


			imprimir ("El   de cajas que se necesita son: " numCaja)
			imprimir ("El costo sera de: " costoNumCaja)

			Fin CALCULADORMETROSCUADRADOS


PRUEBAS DE ESCRITORIO 

 La prueba de escritorio es la prueba reina que permite saber si un algoritmo hace lo que debe hacer y si produce los resultados correctos

 	Se gneeran de la siguiente manera: 
	1.-Se seleccionan datos disponibles que serviran como entrada para el algoritmo
	2.-Se realizan los respectivos calculos y se obtienen resultados esperados
	3.-Se recorre el algoritmo linea por linea y se valida que el algoritmo haga lo que debe de hacer o no
	4.-Se compara resultados que genera el algortimo con los esperados y se determina si funciona el algortimo
	5.-Si no se entregan los resultados esperados, se debe de revisar el codigo escrito para encontrar la instruccion erronea


Primer forma:
**Tabla de verificacion en la que se relacionan las variables, primero las que reciben los datos
  ingresados, luego las que almacenan los calculos y por ultimo, las instrucciones que muestran los resultados esperados.

		ejecucion	numueroHoras	valorHora	salarioApagar		Respuesta
			1			10			   30000		300000		   	300000
			2			40			   25000		1000000		   	1000000
			3			20			   27000		540000		   	540000

			


Modificacion de algoritmo 2.4
EJERCICIO 2.4.1:  se obtendrıan 4 notas parciales durante el semestre y que, la nota deFin itiva para la asignatura serıa la media aritmetica de esas 4 notas. ¿Cual es la nota deFin itva?
					---Suponga que, para el algoritmo del calculo de la nota deFin itiva expuesto en el Ejemplo 2.4, el acuerdo al que llegaron profesor y
					   estudiantes consiste en darle un porcentaje a cada una de las 4 notas, de la siguiente manera:
					   Primera: 15 % 
					   Segunda: 15 %
					   Tercera: 30 %
					   Cuarta: 40 % 


		 ANALISIS:

			Resultados esperados: Se desea obtenr la calificacion Fin al de un alumno en base a los porcentajes 

			Datos disponibles: Se desea optener la calificacion de los alumnos en base a los porcentajes acordados 

			Proceso: Se solicitaran las calificaciones, se sacara su equivalente en porcentaje y se sumaran y se guardaran en una variable 

			Variables requeridas:

			real cal1, cal2, cal3, cal4, calFin al

		Propuesta 1:

		 CalificacionEstudiante
		/* Este algoritmo calcula la nota deFin itiva de un
		estudiante a partir de 4 notas parciales a traves
		de la media aritmetica.  */

		Var
		Real cal1, cal2, cal3, cal4, porCal1, porCal2,porCal3, porCal4, porFin al

		imprimir ("Ingrese la primera calificacion 1: ")
		leer (cal1)

		imprimir ("Ingrese la segunda calificacion 2; ")
		leer (cal2)

		imprimir ("Ingrese la segunda calificacion 2; ")
		leer (cal2)

		imprimir ("Ingrese la segunda calificacion 2; ")
		leer (cal2)
		
		porCal1 = cal1 * 0.15
		porCal2 = cal2 * 0.15
		porCal3 = cal3 * 0.30
		porCal4 = cal4 * 0.40


		porFin al = porCal1 + porCal2 + porCal3 + porCal4
		imprimir ("La calificacion Fin al es: " calFin al)

		Fin CalificacionEstudiante

		*****ALGORITMO DE EDGE *****

		1 Algoritmo DeFin itivaEstudianteConPorcentajes
			2 /* Este algoritmo calcula la nota deFin itiva de un
			3 estudiante a partir de 4 notas parciales y sus porcentajes. */
			4
			5 Real nota1, nota2, nota3, nota4, deFin itiva
			6
			7 imprimir( "Ingrese la nota 1 del estudiante: " )
			8 leer( nota1 )
			9
			10 imprimir( "Ingrese la nota 2 del estudiante: " )
			11 leer( nota2 )
			12
			13 imprimir( "Ingrese la nota 3 del estudiante: " )
			14 leer( nota3 )
			15
			16 imprimir( "Ingrese la nota 4 del estudiante: " )
			17 leer( nota4 )
			18
			19 deFin itiva = (nota1 * 0.15) + (nota2 * 0.15) + (nota3 * 0.30) + (nota4 * 0.40)
			20
			21 imprimir( "La deFin itiva es: ", deFin itiva )
		22 Fin Algoritmo DeFin itivaEstudianteConPorcentajes


La nota deFin itiva calculada con los porcentajes es 3.53, que es diferente a la nota definitiva de 3.8 obtenida con el algoritmo original. 
Esto se debe a que los porcentajes asignados a cada nota parcial afectan el resultado Fin al.

EJERCICIO 2.11

	Imagine que se conoce el valor del lado de un cubo. Elabore un algoritmo que permita calcular el area total de sus seis caras, el perımetro y el volumen del cubo. El area de una cara se obtiene
	por el producto de sus dos lados. El volumen se obtiene elevando al cubo su lado conocido y el perımetro es la suma de todos sus lados.

	EJERCICIO 2.11 		

		ANALISIS: CULCULO CUBO 

			Resultados esperados: Se quiere conocer a partir de las medias de la cara de un cubo al area total de sus seis caras, el perimetro y el volumen del cubo 

			Datos disponibles: Se solicita al usuario  el valor de un lado del cubo,  con el cual se obtiene el area del cubo, el perimetro, y se calculara el volumen

			Proceso: El area de una cara se obtiene por el producto de sus dos lados. El volumen se obtiene elevando al cubo su lado conocido y el perımetro es la suma de todos sus lados.

			Variables requeridas: 
			real lado, arealado, areaCub, perimetroCub, volumenCub

			Propuesta 1: 
			CALCUBO
			
			// Se calculara area de un cubo a partir de conocer uno de sus lado, asi como su perimetro y volumen 

			imprimir ("Ingrese el area de la arista de una de las caras: ")
			leer (lado)

			arealado = lado * lado

			areaCub = arealado * 6 

			perimetroCub = lado * 12 

			volumenCub = arealado * arealado * arealado 

			imprimir ("El area de una cara del cubo es de: " arealado)
			imprimir ("Por lo que el area de sus seis caras es de: " areaCub)
			imprimir ("Con un perimetro de " perimetroCub)
			imprimir ("Y un volumen de: " volumen)

			Fin CALCUBO

	

EJERCICIO 2.12. 		

		ANALISIS: 
					Un empleado fue contratado durante un periodo especıfico en dıas y por un salario, ambos conocidos. Construya un algoritmo que permita calcular el valor de su liquidacion al terminar el contrato. 
					La liquidacion se compone de prima, cesantıas, intereses a las cesantıas y vacaciones. Para calcular estos valores, se usan las siguientes formulas:
					Prima: (salario * diasLaborados) / 360
					Cesantıas: (salario * diasLaborados) / 360
					Intereses cesantıas: cesantıas * (12 % / diasLaborados)
					Vacaciones: (salario * diasLaborados) / 720

			Resultados esperados: Se requiere el algoritmo que dara el valor de la liquidacion de empleado que se compone a traves de prima, cesantias, interes de cesantia, y vacaciones

			Datos disponibles: Se solicita al usurario los dias laborados y el salario, una vez con los datos se optendra lo equivalente de prima, cesantias, interes de cesantias y vacaciones

			Proceso: Con los datos de dias laborados y salio se realizan los calculos para obtener el total de la liquidacion del empleado 

			Variables requeridas: 

			entero: diasLaborados
			real: salario, prima, cesantia, interesCesantia, vacaciones

			Propuesta 1: 
				
				ValorLiquidacion

				var: 
				entero: diasLaborados
				real: salario, prima, cesantia, interesCesantia, vacaciones, liquidacion

				imprimir ("Ingrese los dias laborados: ")
				leer (diasLaborados)

				imprimir ("Ingrese el salario: ")
				leer (salario)

				prima = (salario * diasLaborados) / 360
				cesantia = (salario * diasLaborados) / 360 
				interesCesantia = cesantia * (0.12 / diasLaborados)
				vacaciones = (salario * diasLaborados) / 720 
				liquidacion = prima + cesantia + interesCesantia + vacaciones 

				
				imprimir ("La liquidacion del empleado sera por la cantidad de: " liquidacion)
				imprimir ("La prima es: " prima)
				imprimir ("Las cesantias son: " cesantia)
				imprimir ("Los intereses a las cesantias son: " interesCesantias)
				imprimir ("Las vacaciones son: " vacaciones)
				
				Fin ValorLiquidacion



EJERCICIO 2.13. 		

		ANALISIS: Diseñe un algoritmo que, al ingresarle el costo de un producto y la cantidad de ese producto que compra un cliente, calcule y muestre el valor a pagar por el cliente, 
				  obteniendo igualmente, el valor del impuesto al valor agregado IVA, que corresponde al 16 % del valor de la compra y que tambien el cliente debe pagar.
			
			Resultados esperados: Se obtendra el valor total de un producto contemplando el iva 

			Datos disponibles: Se solictara al cliente el costo del producto y la cantidad 

			Proceso: Una vez con los datos de costo y cantidad se debe de calcular el valor del iva para entregar al cliente el costo total a pagar 

			Variables requeridas:  real costo, cantidadCosto, valorIva, totalPagar
								   entero cantidad
								   const 
								   real iva = 0.16  

			Propuesta 1: 
			PRODUCTOIVA
			imprimir ("Ingrese el costo del producto: ")
			leer (costo)

			imprimir ("Ingres la cantidad de productos: ")
			leer (cantidad)

			cantidadCosto = costo + cantidad

			valorIva = cantidadCosto * iva

			totalPagar = cantidadCosto + valorIva

			imprimir ("El valor de la compra es de: " cantidadCosto)
			imprimir ("El costo total de la compra es: " totalPagar)
			imprimir ("El iva es de: " valorIva)

			Fin PRODUCTOIVA


EJERCICIO 2.14. 		

		ANALISIS: Construya un algoritmo al que se le ingresa el valor de un   determinado y el algoritmo realiza la suma de los  s que le
				  preceden desde 1. Para ello, utilice la siguiente formula: suma = (n * (n + 1)) / 2

			
			Resultados esperados: Se espera que el algoritmo tras ingresar un   realice la suma de los  s que le proceden desde uno 

			Datos disponibles: Se solicitara al usuario que ingrese un   y se devolvera la suma de los   que le proceden desde el 1 

			Proceso: Con el   que proporciona el usuario se aplicara la formula 

			Variables requeridas:
			entero n,  numPrece

			SumaPrimeros s

			entero n, numPrece

			imprimir ("Ingrese el valor de n: ")
			leer (n)

			suma = (n * (n + 1)) / 2

			imprimir ("La suma de los primieros", n, "  naturales es de: " numPrece)

			Fin SumaPrimeros s

EJERCICIO 2.15. 		

		ANALISIS: Un agente inmobiliario necesita un algoritmo con el que pueda saber el precio al cual debe vender una Fin ca o terreno; para ello, el algoritmo debe conocer
				  el   de metros cuadrados que tiene el terreno, el valor del metro cuadrado y el valor de la comision por la venta que equivale al 2 % del valor de los metros cuadrados de
				  los que consta el terreno. Escriba un algoritmo que permita saber el valor en el que se debe vender una Fin ca o terreno.

			Resultados esperados: Se obtendra el precio del terreno, el valor del metro cuadrado y el valor de la comision por la venta 

			Datos disponibles: Se le solicitara al usuario que ingrese las medidas del terreno, el costo del terreno 

			Proceso: Una vez ingresadas las medidas del terreno se obtendra el valor de la camision por la venta y se dara el total a pagar 

			Variables requeridas: 

			var
			real costoTerreno, medidaterreno, comisionVenta, costoTotal, costoMetro

			Propuesta 1: 
				
				ventaTerreno	

				imprimir ("Ingrese los metros cuadrados del terreno: ")
				leer (medidaterreno)

				imprimir = ("Ingrese el precio del metro cuadrado: ")
				leer (costoMetro)


				costoTerreno = medidaterreno * costoMetro 
				comisionVenta = costoMetro * 0.2 
				costoTotal = comisionVenta + costoTerreno

				imprimir ("El terreno tiene un costo total de: " costoTotal) 
				imprimir ("La comision por la venta es de: " comisionVenta)

				Fin ventaTerreno


EJERCICIO 2.16. 		

		ANALISIS:  Construya un algoritmo que reciba como entrada un angulo expresado en grados, minutos y segundos y se entregue como resultado la medida del angulo en radianes

			Resultados esperados:  Conversion entre grados con minutos y segundos

			Datos disponibles:  Se solicita al usuario un angulo expresado en grados, minutos y segundos 

			Proceso: Una vez con los datos ingresados se obtendran las equivalencias para entregar el angulo en radianes 

			Variables requeridas: 
			var
			real grados, minutos, segundos, radianes, anguloGrados, anguloRadianes
			Propuesta 1:

			gradosRadianes
			
			imprimir ("Ingrese el   de de grados: ")
			leer (grados)

			imprimir ("Ingrese los minutos: ")
			leer(minutos)

			imprimir ("Ingrese los segundos: ")
			leer (segundos)

			anguloGrados = grados + (minutos / 60) + (segundos / 3600)
			anguloRadianes = anguloGrados * (PI / 180)

			imprimir("La conversion en radianes es de: " anguloRadianes)

			Fin gradosRadianes


EJERCICIO 2.17. 		

		ANALISIS: Un artesano se enfrenta diariamente al problema de determinar cual sera el precio de venta de un producto fabricado. Para asignar el
				  precio, el artesano identifica el valor de la materia prima utilizada, el valor de la mano de obra y a estos les incrementa la utilidad que
				  desea ganar, que es del 30 %. Diseñe un algoritmo al que se le ingresa el nombre de un producto, el valor de las materias primas usadas en
				  su elaboracion y el valor de la mano de obra con que se construyo y el algoritmo determina el precio de venta del producto.


			Resultados esperados: Se espera del algortimo que se entregue el precio de venta de un producto una vez se le ingresa el nombre de un producto, el valor de las materias primas usadas en
				  su elaboracion y el valor de la mano de obra con que se construyo

			Datos disponibles: Se le solicitara al usuario el nombre del producto el valor de las materias primas usadas en su elaboracion y el valor de la mano de obra con que se construyo

			Proceso: Una vez que se tengan los datos se haran los calculos contemplando que se debe de incremntar el valor de la utilidad que es de 30 % sobre el precio 

			Variables requeridas: 
				cadena nombre
				real precioVenta, valMatPrima, valManoObra

			Propuesta 1:
			PrecioFin al

				imprimir ("Ingrese el nombre del producto: ")
				leer (nombre)

				imprimir ("Ingrese el valor de la materia prima utilizada: ")
				leer (valMatPrima)

				imprimir ("Ingrese el valor de la mano de obra: ")
				leer (valManoObra)


				precioVenta = (valMatPrima + valManoObra) * (1 + 0.30)

				imprimir ("El producto: " producto "tiene un precio de venta de: " precioVenta)

			Fin PrecioFin al
**	Hacer los ejercicios faltantes


CAPITULO 3   ESTRUCTURAS DE DECISION



EJERCICIO 3.2.Diseñe un algoritmo que reciba una nota deFin itiva entre 0.0 y 5.0. El algoritmo debe imprimir el valor ingresado, y un mensaje
			 que indique si el estudiante “Gano el curso  ” o “Perdio el curso  ”. Para el ejemplo, se gana el curso solo si la nota deFin itiva es mayor o igual a 3.0.
 	

		ANALISIS: 

			Resultados esperados: Se obtendra el mensaje indicado una vez indicada la nota deFin itiva 

			Datos disponibles: Se solicita al usuario la nota deFin itiva 

			Proceso: Una vez con la nota se imprimira en sistema, se va a mostrar el mensaje una vez cumpla con la estructura de desicion 

			Variables requeridas: 
			 real notaDeFinitiva 

			Propuesta 1: 
			estructuraNotaDefenitiva

			var
			notaDeFin itiva

			imprimir ("Ingrese la nota del estudiante: ")
			leer (notaDeFinitiva)

			imprimir ("La calificacion es: " notaDeFinitiva)

					SI 	(notaDeFinitiva >= 3.0) Entonces 
							imprimir ( "gano el curso")
						SiNo 
							imprimir ( "perdio el curso.")

					Fin SI
			Fin estructuraNotaDefenitiva



EJERCICIO 3.3. 		

		ANALISIS: Diseñe un algoritmo que permita solicitar tanto el nombre como la edad de una persona y posteriormente indicar si ella es “Mayor de
				edad” o “Menor de edad” segun la informacion ingresada. Para el ejemplo, una persona se considera mayor de edad si tiene 18 años o mas.

			Resultados esperados: Se espera que se identifique si una persona mediante nombre y edad y se determinara si es mayor o menor de edad contemplando que la mayoria de edad es a partir de los 18 años 

				Datos disponibles: Se solicita al usuario nombre y edad

				Proceso: Una vez teniendo la edad se va a determinar si el cliente es => 18 y ya sea que se cumpla o no la condicion se retornara mensjae 

				Variables requeridas: 
				cadena nombre, mensajeEdad
				entero edad 

				Propuesta 1:
				
				mayoriaEdad

				imprimir ("Ingrese su nombre: ")
				leer (nombre)

				imprimir ("Ingrese su edad: ")
				leer (nombre)

					SI (edad >= 18) Entonces 
					mensajeEdad = "Mayor de edad :)"
					SINO
					mensajeEdad = "Menor de edad :("
					Fin Si
				Fin mayoriaEdad
				
				Otra forma de escribirlo: r la primera parte de la impresion antes de la decision

					imprimir ("hola ", nombre, "usted es ")
					Si (edad >= 18 ) Entonces
					imprimir ("mayor de edad")
					SINO 
					imprimir ("menor de edad")
					Fin SI

EJERCICIO 3.4. 		Diseñe un algoritmo que permita determinar el mayor de dos  s enteros

		ANALISIS:

			Resultados esperados: Se espera que tras ngresar dos   enteros se indique cual es el mayor 

			Datos disponibles: Se solicita al usuario dos   y se van a comparar 

			Proceso: Con los datos ingresados se va a generar la estructura oara saber cual es mayor 

			Variables requeridas: 
			
				var 
				entero num1, num2, numMayor

			Propuesta 1: 

			 Mayor
				imprimir ("Ingrese el primier   entero: ")
				leer (num1)

				imprimir ("Ingrese el segundo  : ")
				leer (num2)

					
					SI num1 > num2 Entonces
					numMayor = num1
					SINO
					numMayor = num2
					Fin SI
				
				imprimir ("El   mayor entre ", num1 " y ", num2, )
				imprimir (" es " numMayor)
			
			Fin  Mayor

EJERCICIO 3.5. 		 Diseñe un algoritmo que determina si un   es par o impar. Recuerde que un   es par si el resto de una division entera
					 con el   2 es cero

		ANALISIS:

			Resultados esperados: Se determinara si el   es par o impar mediante mensaje 

			Datos disponibles: Se solicita al usuario que ingrese un   entero 

			Proceso: Se le solicita al usuario el   entero, luego por medio de una decision se determina si es par o no usando el resto de la division entera con el   2.

			Variables requeridas: 

			Propuesta 1: 

			ParImpar 

				var 
				entero num 

 				leer (num)

					Si (num % 2 == 0) Entonces
					imprimir = ("es par")
					SINO 
					imprimir ("es impar")
					Fin SI

			Fin ParImpar


EJERCICIO 3.6. 		  Diseñe un algoritmo que determine si un   real (x) se encuentra dentro del rango abierto-cerrado (3.5, 7.8].
					  Recuerde que se considera abierto o cerrado, si el valor de lımite en cuestion se encuentra o no incluido respectivamente. Para el ejemplo, el
					  lımite 3.5 no hace parte del rango, por ser parte del intervalo abierto, y se reconoce por tener parentesis ’(’; mientras que por el contrario, el valor de
					  7.8 sı hace parte al ser el intervalo cerrado, y se reconoce por el corchete ’]’. Es bueno tener en cuenta que intervalo puede ser abierto o cerrado en
					  cualquiera de sus dos extremos.

		ANALISIS:

			Resultados esperados:  indicar si un   real (x) se encuentra dentro del rango abierto-cerrado (3.5, 7.8].

			Datos disponibles: valor de un   real 

			Proceso: primero se le solicita al usuario el valor de x, luego se determina si el valor se encuentra dentro del rango o
					de forma analoga, se determina si esta por fuera

			Variables requeridas: 
				var
				real num

			Propuesta 1: 

			Rango 

				var 
				real num

				imprimir ("Ingrese el   a determinar: ")
				leer (num)

					SI (num > 3.5 Y num <= 7.8) Entonces 
					imprimir ("esta en el rango")
					SINO 
					imprimir ("no esta en el rango")
					Fin SI

			Fin Rango


EJERCICIO 3.7. 		Diseñe un algoritmo que determine si un   real (x) se encuentra dentro de uno de los siguientes rangos: (3.5, 7.8], [9.3, 4.5)
					y [23.4, 45.3]

		ANALISIS:

			Resultados esperados:  Se va a determianr si un   entra en alguno de los rangos establecedos (3.5, 7.8], [9.3, 4.5) y [23.4, 45.3]

			Datos disponibles:   real 

			Proceso: 

			Variables requeridas: 
			var 
			real num

			Propuesta 1:   

			NumRealOperacion 

			imprimir ("Ingrese el   a determinar: ")
			leer(num)

				SI  (num > 3.5 Y num <= 7.8) O 
					(num >= 9.3 Y num < 4.5) O
					(num >=23.4 Y num <= 45.3) Entonces 
				
					imprimir (num, "esta en el rango")
				SINO 
					imprimir (num, "esta en el rango")
				Fin SI
			
			Fin NumRealOperacion


******DECISIONES ANIDADAS******   Pagina 142

EJERCICIO 3.8. 		Diseñe un algoritmo que permita imprimir un mensaje segun un caracter dado por el usuario, independiente que sea ingresado en mayuscula o minuscula, segun la Tabla 3.1.


		ANALISIS:

			Resultados esperados: Se espere que muestre alguno de los mensajes establecidos al colocar cierto caracter 

			Datos disponibles: Caracter que ingresara el usuario

			Proceso: Se va a solicitar al usuario el caracter y se va a mostrar un mensaje 

			Variables requeridas: 	
			caracter operacion

			Propuesta 1: 

			MensajeCaracter
				var
				caracter opc

				imprimir ("Ingrese un caracter: ")
				leer (opc)

					imprimir ("su opcion es ")
					SI (opc == 'a' O opc =='A') Entonces
						imprimir ( "android" )
					SINO 
						SI (opc == 'i' O opc == 'I') Entonces
							imprimir ( "ios" )
							SINO 
							imprimir ( "opcion invalida" )
						Fin SI 
					Fin SI 

			Fin MensajeCaracter

EJERCICIO 3.9.  Diseñe un algoritmo que permita imprimir un mensaje segun la nota deFin itiva de un estudiante entre 0.0 y 5.0, de acuerdo con
la Tabla 3.2
					nota 		Mensaje a imprimir
					< 3.0 		“Insuficiente”
					<= 3.5 		“Aceptable”
					<= 4.0 		“Sobresaliente”
					<= 5.0 		“Excelente

		ANALISIS:

			Resultados esperados: Mensaje acorde a la calificacion optenida 

			Datos disponibles: Se solicita al usuario la calificacion desde el cero a 5 como la mas alta 

			Proceso: solicitar al usuario la nota deFin itiva, luego determinar el mensaje segun el arbol de decision de la Figura 3.21.

			Variables requeridas: 
			Var real calificacion

			Propuesta 1: 

				mensajeCalificacion

				imprimir ("Ingrese la calificacion del estudiante: ")
				leer (calificacion)

					imprimir ("La calificacion optenida es" )

					SI (calificacion < 3.0) Entonces 
						imprimir ( "insuficiente" )
						SINO 
							SI (calificacion <= 3.5) Entonces 
								imprimir (" aceptable ")
							SINO 
								SI (calificacion <= 4.0) Entonces
									imprimir (" sobresaliente ")
								SINO (calificacion <= 5) Entonces 
									imprimir (" excelente ")

								Fin SI
							Fin SI
						Fin SI	
					Fin SI

				Fin mensajeCalificacion


EJERCICIO 3.10.  Diseñe un algoritmo que determine mayor   entre cuatro posibles  s

		ANALISIS: 

			Resultados esperados: el mayor de cuatro  s ingresados por el usuario.

			Datos disponibles: los cuatro  s (n1, n2, n3 y n4)

			Proceso:  solicitar al usuario los cuatro  s, luego por medio de decisiones (Ver arbol de decision de las Figura 3.23 o 3.24) determinar
					  el mayor de ellos y Fin almente imprimir el resultado. Los elementos al Fin al de cada rama del arbol (hojas) son los valores mayores de cada uno de los cuatro valores.

			Variables requeridas:  
			var 
			real n1, n2, n3, n4, mayor 

			Propuesta 1: 

			 Mayor 

				var 
				real n1, n2, n3, n4, mayor 

				imprimir ("Ingrese el primer  : ")
				leer (n1)
				imprimir ("Ingrese el segundo   ")
				leer (n2)
				imprimir ("Ingrese el tercer   ")
				leer (n3)
				imprimir ("Ingrese el caurto   ")
				leer (n4)
				
				SI ( n1 > n2 ) Entonces 
					SI ( n1 > n3 ) Entonces
						SI ( n1 > n4 ) Entonces

							mayor = n1

						SINO
							mayor = n4
						Fin SI
					SINO 
						SI ( n3 > n4 ) Entonces 
							mayor = n3
						SINO 
							mayor = n4
						Fin SI 
					Fin SI 
				SINO
					SI ( n2 > n3 ) Entonces
						SI ( n2 > n4 ) Entonces 
							mayor = n2 

						SINO 
							mayor = n4 
						Fin SI 
						SINO 
							SI ( n3 > n4 ) Entonces
								mayor = n3 
							SINO 
								mayor = n4 

							Fin SI
						Fin SI 
				Fin SI

				imprimir ( "El   mayor es: " mayor )

			Fin  Mayor

EJERCICIO 3.10.2. 		
			
			 Mayor2

				Variables requeridas: 
				var 
				real n1, n2, n3, n4, mayor 

					imprimir ("Ingrese el primer  : ")
					leer (n1)
					imprimir ("Ingrese el segundo   ")
					leer (n2)
					imprimir ("Ingrese el tercer   ")
					leer (n3)
					imprimir ("Ingrese el caurto   ")
					leer (n4)

					mayor = n1
					Si( n2 > mayor ) Entonces
						mayor = n2
					Fin SI
						Si( n3 > mayor ) Entonces
							mayor = n3
						Fin SI
							Si( n4 > mayor ) Entonces
								mayor = n4
							Fin SI
					
					imprimir ( "El   mayor es: " mayor)
			Fin  Mayor2


EJERCICIO 3.11.  

		ANALISIS:  La oficina de aguas de la ciudad requiere crear un algoritmo que le permita liquidar las facturas de sus clientes durante cada mes. 
				   El cobro de cada factura se realiza de la siguiente forma: se cobra el cargo fijo, el consumo de agua en el periodo, es decir, la cantidad de metros
				  consumidos y el servicio de recoleccion de basuras y alcantarillado. Todos estos cobros se llevan a cabo dependiendo del estrato socioeconomico al que
				  pertenezca el predio, de acuerdo con la siguiente tabla:


										Estrato 		Cargo Fijo 			Metro3 consumido 	Basuras y alcantarillado
										1 				$2500 				$2200				 $5500
										2 				$2800 				$2350 				 $6200
										3 				$3000 				$2600 				 $7400
										4 				$3300 				$3400 				 $8600
										5 				$3700 				$3900 				 $9700
										6 				$4400 				$4800 				 $11000


				Construya un algoritmo que, al ingresarle es estrato socioeconomico del predio y la cantidad de metros cubicos de agua consumidos, permita
				determinar el valor de la factura a pagar.

			Resultados esperados: los valores a pagar en la factura de aguas, discriminando el valor del cargo fijo, el valor del consumo, el del
								  servicio de recoleccion de basura y alcantarillado y que entregue el valor total a pagar

			Datos disponibles: el estrato socioeconomico y la cantidad de metros consumidos.

			Proceso: primero sera ingresar los datos disponibles, posteriormente, basado en el estrato, sera necesario utilizar una estructura
					de decision anidada que permita determinar el valor del cargo fijo, el valor del consumo que se obtiene multiplicando la cantidad de metros
					consumidos por el valor de cada metro dependiendo por supuesto, del estrato y, ademas, determinar tambien el valor de la recoleccion de
					basuras y alcantarillado. Luego de tener todos estos valores, se deben sumar para encontrar el valor total a pagar. Al finalizar, se muestran
					al usuario todos estos resultados encontrados

			Variables requeridas:  
			• estrato: almacena el estrato socioeconomico del predio.
			• cantidad: cantidad de metros consumidos por el cliente.
			• cargoFijo: valor del cargo fijo.
			• valorConsumo: valor del consumo.
			• valorRecoleccion: valor de la recoleccion de las basuras y el alcantarillado.
			• totalPago: valor total a pagar por el servicio.
			
		Propuesta 1:		

		facturaAgua 

			Var
			caracter estrato 
			real cantidad, cargoFijo, valorConsumo, valorRecoleccion, totalPago

			imprimir ("Ingrese el estrato socioeconomico: ")
			leer (estrato)

			imprimir ("Ingrese la cantidad de metros de consumudos")
			leer (cantidad)

			SI 
				(estrato == '1') Entonces
					cargoFijo = 2500.0
					valorConsumo = cantidad * 2200.0
					valorRecoleccion = 5500.0
			SINO 
				SI (estrato == '2') Entonces
						cargoFijo = 2800.0
						valorConsumo = cantidad * 2350.0
						valorRecoleccion = 6200.0
				SINO
					SI  (estrato == '3') Entonces 
							cargoFijo = 3000.0
							valorConsumo = cantidad * 2600.0
							valorRecoleccion = 7400.0
					SINO 
						SI (estrato == '4') Entonces
								cargoFijo = 3300.0
								valorConsumo = cantidad * 3400.00
								valorRecoleccion = 8600.0
						SINO 
							SI (estrato == '5') Entonces
									cargoFijo = 3700.0 
									valorConsumo = cantidad * 3900.0
									valorRecoleccion = 9700.0
							SINO 
										cargoFijo = 4400.0
										valorConsumo = cantidad * 3900.0
										valorRecoleccion = 11000.0
							FIN SI 
						SIN SI 
					FIN SI 
				FIN SI 
			FIN SI 

			totalPago = cargoFijo + valorConsumo + valorRecoleccion

			imprimir ("El cliente es de estratos: ", estrato)  
			imprimir ("El valor de cargo fijo es: ", cargoFijo)			
			imprimir ("El valor de metro consumido es: ", valorConsumo)
			imprimir ("El valor de basuras y alcantarillado  es: ", valorRecoleccion)
			imprimir ("El valor total es de: ", valorTotal )
		 FIN facturaAgua

*****EXPLICACION*****
El algoritmo utiliza una estructura Si anidada  con el proposito de aplicar los valores correspondientes a ese estrato. El primer Si, pregunta si el estrato
ingresado es ’1’, si esto ocurre, se hacen los calculos indicados para ese estrato pero, si por el contrario, el estrato no es ’1’, dentro del SiNo
del primer, Si, se ubica una segunda estructura Si que pregunta si el estrato es ’2’, si esto es verdadero, se realizan los calculos pertinentes
para este segundo estrato pero, si el estrato tampoco es ’2’, por el SiNo del segundo Si, se utiliza un tercer Si para preguntar entonces, si el
estrato es ’3’. De la misma forma, el algoritmo continua analizando los estratos ’4’ y ’5’. Note que, al finalizar el ultimo Si, por la parte del SiNo,
se ubican los calculos correspondientes al estrato ’6’; esto se hace de esta forma, ya que si el algoritmo no ingreso a ninguna de las partes verdaderas
de los Si anteriores, esto indica que el estrato no es ni ’1’, ’2’, ’3’, ’4’, ’5’, por lo cual solo queda por descarte, el estrato ’6’.


***** 3.3 DESICIONES MULTIPLES *****

Las decisiones multiples, tambien conocida como “estructura selectiva” utilizada para seleccionar un opcion entre un conjunto
de valores
toda decision multiple se puede reescribir como
una decision anidada, pero no toda decision anidada se puede reescribir
como una decision multiple

forma general de esta estructura
		1 Segun( selector )
		2 	Caso valor1: InstruccionA1-1
		3				 InstruccionA1-2
		4 				 ...
		5 				 InstruccionA1-n1
		6 				 FinCaso
		7
		8 	Caso valor2: InstruccionA2-1
		9 			     InstruccionA2-2
		10 			   	 ...
		11 			   	 InstruccionA2-n2
		12 			   	 FinCaso
		13	...
		14
		15	Caso valork: InstruccionAk-1
		16 				 InstruccionAk-2
		17 				 ...
		18 				 InstruccionAk-nk
		19 				 FinCaso
		20
		21	EnOtroCaso: InstruccionOtroCaso-1
		22 			   	InstruccionOtroCaso-2
		23 			   	...
		24 			   	InstruccionOtroCaso-n
		25 			   	FinCaso
		26 FinSegun


-*-*-*En esta forma general se puede observar que existen un conjunto k de valores (valor1 hasta la valork)
Cada valor a su vez tiene un conjunto independiente de instrucciones que esta delimitado desde la instruccion (Caso valor:) hasta FinCaso,
todas estas instrucciones se ejecutan cuando el contenido de la variable denominada selector coincide con el de la valor en cuestion

-*-*-*Si se omite la instruccion FinCaso, el algoritmo continua la ejecucion a las instrucciones del siguiente
valor y ası sucesivamente hasta encontrar un FinCaso o un FinSegun 

-*-*-*Si el contenido de la variable selector no incide con ninguna de los valores, se ejecutan las instrucciones de la seccion llamada EnOtroCaso,
la cual se suele escribir despues de todas los valores validos

-*-*-*El tipo de dato de la variable selector suele estar limitada a: Entero, Caracter o Cadena. No se utilizan selectores tipo Real.

-*-*-* Las decisiones multiples son solo una forma abreviada de reescribir ciertas decisiones anidadas


EJERCICIO 3.12. Rescribir algoritmo 3.8 con desiciones multiples
diseñe un algoritmo que permita imprimir un mensaje segun un caracter dado por el usuario, independiente que sea ingresado en mayuscula o minuscula, segun la Tabla 3.1.
											Caracter Mensaje a imprimir
											’a’        “Android”
											’i’         “iOS”
											otro     “Opcion invalida

		ANALISIS: 			 

		Propuesta 1: 
			
			sistemaOperativoMultiple

				var 
				caracter opcion

				imprimir ("Ingrese un caracter: ")
				leer (opcion)

				imprimir ("Su opcion es: ")

					segun (opcion)
						caso 'a': 
						caso 'A': imprimir ("android")
								FinCaso
					
						caso 'i':
						caso 'I': imprimir ("ios")
								FinCaso

						EnOtroCaso:
									imprimir ("invalida")
									FinCaso 
					FinSegun
			Fin sistemaOperativoMultiple

*****EXPLICACION*****

Observe que para este ejemplo se omitio el FinCaso del primer y tercer valor (lıneas 15 y 19), debido a que se necesita que se ejecute la misma
instruccion de impresion para los casos en donde el valor es una letra mayuscula o minuscula.
Como la variable selector es de tipo Caracter, el valor de todos los valores se escribe entre comillas simples (’ ’). Si fuera de tipo Cadena
se escribirıa entre comillas dobles (“ ”) y si fuera Entero, solo se escribe el  

-*-*-* Una decision multiple es una decision de seleccion en donde cierta variable llamada selector almacena
	   uno de los valores definidos y en cuyo caso se procede a ejecutar el conjunto de instrucciones asociadas a dicho valor


EJERCICIO 3.13.  Diseñe un algoritmo que permite conocer el valor del descuento de un artıculo segun su tipo. Todos los tipos y sus respectivos
				descuentos se pueden observar en la Tabla 3.3.
						Tipo 	Descuento
						1 		12.5 %
						2 		8.3 %
						3 		3.2 %
						Otro 	0.0 %


		ANALISIS: 

			Resultados esperados: el valor del descuento en el precio de un artıculo segun el tipo del mismo y definidos en la Tabla

			Datos disponibles:  el valor del artıculo, ası como el tipo de artıculo

			Proceso: se le solicita el usuario del valor del artıculo y su respectivo tipo, luego segun los porcentajes de descuento de la Tabla 3.3 para
					cada uno de los tipos se define el porcentaje, posteriormente con el porcentaje se calcula el valor del descuento y finalmente se imprime su valor

			Variables requeridas:
			caracter tipo 
			real valorArticulo, valorDescuento
			 

			Propuesta 1: 

			valorArticulo

				caracter tipo 
				real valorArticulo, valorDescuento

				imprimir ("Ingrese el costo del articulo: ")
				leer (valorArticulo)

				imprimir ("Ingrese el tipo: ")
				leer (tipo)

				Si (tipo == '1') Entonces 
					valorDescuento =  valorArticulo * 12.5
					SINO 
						SI (tipo == '2') Entonces
							valorDescuento = valorArticulo * 8.3
						SINO 
							SI (tipo == '3') Entonces 
								valorDescuento = valorArticulo * 3.2
							SINO 
								SI valorDescuento = valorArticulo 0.0
							FINSI 
						FINSI 
					FINSI 
				FINSI 
				 
				 imprimir (el valor del artirulo es: valorDescuento)
			Fin valorArticulo

Propuesta 2: 

			valorArticulo2

				caracter tipo 
				real valor, descuento, porcentaje 

				imprimir ("Ingrese el costo del articulo: ")
				leer (valor)

				imprimir ("Ingrese el tipo: ")
				leer (tipo)
				
				Segun ( tipo )
					caso '1': porcentaje = 0.125
							  FinCaso
					caso '2': porcentaje = 0.083
							  FinCaso
					caso '3': porcentaje = 0.032
							  FinCaso
					EnOtroCaso: porcentaje = 0.0 
								FinCaso
				FinSegun

				descuento = valor * porcentaje

				imprimir ("El valor del descuento es: ", descuento)
			Fin valorArticulo2

--Se omite el ejercicio 3.14 dado falta de datos 

EJERCICIO 3.15. 	La oficina de incorporacion del ejercito necesita un algoritmo que le pueda permitir saber si un aspirante a ingresar a la
					institucion como soldado es apto o no para poder vincularlo. Para que una persona sea apta, debe cumplir los siguientes requisitos:
					Si es mujer, su estatura debe ser superior a 1.60 mts y su edad debe estar entre 20 y 25 años.
					Si el aspirante es hombre, se estatura debe ser superior a 1.65 mts y su edad debe estar entre los 18 y 24 años.
					Tanto mujeres como hombres deben ser solteros. Diseñe el algoritmo de tal forma que permita informar si un aspirante es apto o no para ingresar al ejercito
		ANALISIS: 

			Resultados esperados: Se espera que el algoritmo determine si un aspirante al ejercicio es "apto" o "no apto" para ingresar  

			Datos disponibles: el estado civil del aspirante, su genero, su edad y su estatura

			Proceso: : lo primero sera ingresar los datos disponibles, posteriormente, se deben usar varias estructuras de decision que vayan
			permitiendo saber si el aspirante es apto o no lo es, dependiendo de si cumple los requisitos de estado civil, estatura y edad que se mencionan para cada genero

			Variables requeridas: 

			caracter genero, estadoCivil,
			cadena salida
			entero edad
			real estatura

			Propuesta 1: 
			aspiranteSeleccionado 
				var 
				cadena salida
				caracter genero, estadoCivil
				entero edad 
				real estatura

				imprimir ("Ingrese el genero del aspirante (M/H): ")
				leer (genero)

				imprimir ("Ingrese edad: ")
				leer (edad)

				imprimir ("Ingrese estatura: ")
				leer (estatura)

				imprimir ("Ingrese estado civil (S/V/D/C/U): ")
				leer (estadoCivil)

				SI 	(estadoCivil == 'S' O estadoCivil == s) Entonces
					segun ( genero )
							Caso 'm': 
							Caso 'M': Si (estatura > 1.60 Y 
										  edad >= 20 Y edad <=24) Entonces
										salida = "es apta"
										SINO 	
										salida = "no apta"
										FINSI 

							Caso 'h': 
							Caso 'H': Si (estatura > 1.65 Y 
										  edad >=18 Y edad <= 24 ) Entonces 
										salida = "es apto"
										SINO 
										salida = "no apto"
										FinSI
									FinCaso

							EnOtroCaso: salida = ""     //Si el género no es M ni H, salida se establece como una cadena vacía ""
							FinCaso
					FinSegun
				SINO	
					salida = "no es apto"		//Si el estado civil no es S, salida se establece como "no es apto".
				FinSI

				Si ( salida == "" ) Entonces		//se verifica si la variable salida es una cadena vacía "". Si salida es una cadena vacía, se imprime "género incorrecto"
					imprimir ("genero incorrecto") 
				SINO 
					imprimir ("el aspirante: ", salida)		//Si salida no es una cadena vacía, se imprime "el aspirante: " seguido del valor de salida
															//Esto muestra si el aspirante es apto o no apto según las condiciones evaluadas previamente
				FINSI
			Fin aspiranteSeleccionado

*****EXPLICACION*****
En caso que el usuario ingrese un genero incorrecto, el algoritmo ejecutara la instruccion EnOtroCaso, allı, se almacenara en la variable
salida una cadena vacıa (“”). Esta cadena vacıa servira como bandera para poder imprimir el mensaje adecuado en la parte final del algoritmo.
-Esta parte del algoritmo se encuentra después de verificar si el estado civil es S (soltero). Si el estado civil no es S, la variable salida se establece como "no es apto".
Esto se debe a que el algoritmo solo considera aptos a los aspirantes solteros. Si el aspirante no es soltero, automáticamente se considera no apto, sin importar otros factores como género, edad o estatura.
-La condición secundaria asegura que cualquier aspirante que no sea soltero se considere automáticamente no apto.
-La salida de datos verifica si el género ingresado es válido y muestra el resultado correspondiente, indicando si el aspirante es apto o no apto.



EJERCICIO 3.16. Reescribiendo el Ejemplo 3.11 pero con decisiones multiples y usando la variable estrato de tipo Entero, para ilustrar su uso en decisiones multiples.  
				La oficina de aguas de la ciudad requiere crear un algoritmo que le permita liquidar las facturas de sus clientes durante cada mes. 
				   Analisis Algoritmo3.11
				   El cobro de cada factura se realiza de la siguiente forma: se cobra el cargo fijo, el consumo de agua en el periodo, es decir, la cantidad de metros
				  consumidos y el servicio de recoleccion de basuras y alcantarillado. Todos estos cobros se llevan a cabo dependiendo del estrato socioeconomico al que
				  pertenezca el predio, de acuerdo con la siguiente tabla:


										Estrato 		Cargo Fijo 			Metro3 consumido 	Basuras y alcantarillado
										1 				$2500 				$2200				 $5500
										2 				$2800 				$2350 				 $6200
										3 				$3000 				$2600 				 $7400
										4 				$3300 				$3400 				 $8600
										5 				$3700 				$3900 				 $9700
										6 				$4400 				$4800 				 $11000


				Construya un algoritmo que, al ingresarle es estrato socioeconomico del predio y la cantidad de metros cubicos de agua consumidos, permita
				determinar el valor de la factura a pagar.

			Resultados esperados: los valores a pagar en la factura de aguas, discriminando el valor del cargo fijo, el valor del consumo, el del
								  servicio de recoleccion de basura y alcantarillado y que entregue el valor total a pagar

			Datos disponibles: el estrato socioeconomico y la cantidad de metros consumidos.

			Proceso: primero sera ingresar los datos disponibles, posteriormente, basado en el estrato, sera necesario utilizar una estructura
					de decision MULTIPLE que permita determinar el valor del cargo fijo, el valor del consumo que se obtiene multiplicando la cantidad de metros
					consumidos por el valor de cada metro dependiendo por supuesto, del estrato y, ademas, determinar tambien el valor de la recoleccion de
					basuras y alcantarillado. Luego de tener todos estos valores, se deben sumar para encontrar el valor total a pagar. Al finalizar, se muestran
					al usuario todos estos resultados encontrados

			Variables requeridas:  
			• estrato: almacena el estrato socioeconomico del predio.
			• cantidad: cantidad de metros consumidos por el cliente.
			• cargoFijo: valor del cargo fijo.
			• valorConsumo: valor del consumo.
			• valorRecoleccion: valor de la recoleccion de las basuras y el alcantarillado.
			• totalPago: valor total a pagar por el servicio.

		Propuesta 1: 

		facturaAguaDesicionMultiple
			var
			entero estrato 
			real cantidad, cargoFijo, valorConsumo, valorRecoleccion, totalPago

			imprimir ("ingrese el estrato: ")
			leer (estrato)

			imprimir ("Ingrese el consumo de agua: ")			
			leer (cantidad)

			//Decision Multiple 

			Segun ( estrato )
				Caso '1': cargoFijo = 2500.0
						  valorConsumo = cantidad * 2200.0
						  valorRecoleccion = 5500.0
						  FinCaso

				Caso '2': cargoFijo = 2800.0
						  valorConsumo = cantidad * 2350.0
						  valorRecoleccion = 6200.0
						  FinCaso

				Caso '3'  cargoFijo = 3000.0
						  valorConsumo = cantidad * 2600.0
						  valorRecoleccion = 7400.0
						  FinCaso
				
				Caso '4'  cargoFijo = 3300.0
						  valorConsumo = cantidad * 3400.0
						  valorRecoleccion = 8600.0
						  FinCaso

				Caso '5'  cargoFijo = 3700.0
						  valorConsumo = cantidad * 3900.0
						  valorRecoleccion = 9700.0
						  FinCaso 
				
				EnOtroCaso: 
						  cargoFijo = 4400.0
						  valorConsumo = cantidad * 4800.0
						  valorRecoleccion = 11000.0
						  FinCaso
			FinSegun
			
			totalPago = cargoFijo + valorConsumo + valorRecoleccion 

			imprimir ("El cargo fijo es de: ", cargoFijo)			
			imprimir ("El valor de consumo es de: ", valorConsumo)
			imprimir ("El costo de recoleccion es de: " valorRecoleccion)
			imprimir ("El costo total es de: ", totalPago)
		
		Fin facturaAguaDesicionMultiple

*****EXPLICACION*****
se puede observar como se reemplazo toda la decision anidada por una decision multiple. Cada caso dentro de la decision multiple representa un
estrato socioeconomico. Note que se asume (EnOtroCaso) que cualquier valor diferente a los valores del 1 al 5 sera considerado el estrato 6.


3.4 EJECRICIOS DESICIONES MULTIPLES 

EJERCICIO 1.   	

		ANALISIS: Crear un algoritmo que indique el valor del descuento de un artıculo el cual es del 5% solo si el artıculo tiene un costo superior al $150.000

		Resultados esperados: Se va a obtener el valor de un algotitmo si es superior a 150.000 con 5% de descuento

		Datos disponibles: Solicitar al usuario el valor del articulo

		Proceso: Se solicita valor del articulo y en base a decisiones multiples se va a calcular el nuevo valor del articulo he imprimira el costo del artiuclo y el costo con descuento 

		Variables requeridas: 
		var 
		costo, costoDescuento
		
		Propuesta 1: 
		costoDescuentoArt

			var
			real costo, costoDescuento, costoFinal

			imprimir ("Ingrese el valor del articulo: ")
			leer(costo)

			SI 	
				costo >= 150.000 Entonces 
				costoDescuento = costo * 0.05
			SINO 
				costoDescuento = 0
			FinSI

			costoFinal = costo - costoDescuento

			imprimir ("El costo del articulo es: " costo)
			imprimir ("El descuento del articulo es: " costoDescuento)
			imprimir ("El costo final es de: " costoDescuento)
		Fin costoDescuentoArt


EJERCICIO 2. 	

		ANALISIS: Crear un algoritmo que indique si la llave de un tanque de agua debe ser abierta o cerrada. El tanque debe estar siempre entre 250 y 450 litros.

		Resultados esperados: El algortimo indicara si la llave debe ser abierta o cerrada en base a la cantidad de litros que tiene el tanque 

		Datos disponibles:  Se le solicitara al usuario que coloque una cantidad de litros 

		Proceso: Se va a determinar si se debe abrir una llave en base a la cantidad de litros ingresada por el usuario en base a los parametros >= 250 Y >=450

		Variables requeridas: 
		var
		entero litros
		
		Propuesta 1: 			
		litrosTanque
			imprimir ("Ingrese el   de litros: ")
			leer (litros)

			SI litros < 250 Entonces
				imprimir ("Abrir llave")
			SINO 
				SI litros => 450
					imprimir ("Cerrar llave")
				FinSI
			SINO 
				imprimir ("Mantener llave como esta")
			FinSI
		Fin litrosTanque

EJERCICIO 3. 	

		ANALISIS: Crear un algoritmo que dado un   entero entre 0 y 20 diga si es o no un   primo. Recuerde que los  s primos menores o iguales a 20 son: 2, 3, 5, 7, 11, 13, 17, 19.	

		Resultados esperados: Indicara el algortimo si es   primo o no

		Datos disponibles: Se le solicita al usuario que ingrese un numeor y se va a determinar si es primo o no 

		Proceso: Con el dato ingresado se va a determinar mediante desiciones si es un   primo o no 

		Variables requeridas: 
		entero primo, num
		
		Propuesta 1: 

		 Primo 
			imprimir ("Ingrese un  : ")
			leer (num)

			Si ( num =< 0 Y num => 20 )
				imprimir ("El   debe estar entre 0 y 20")
			SINO
				Segun caso (   )
					caso 2, 3, 5, 7, 11, 13, 17, 19  
					imprimir ("El   es primo")
					EnOtroCaso 
						imprimir ("El   no es primo")
				FinSegun
			FinSI
		Fin  Primo

EJERCICIO 3.4.					

		ANALISIS: Crear un algoritmo que indique si un estudiante gano o perdio un curso despues de presentar los cinco trabajos asociados al curso
				  (Notas entre 0.0 y 5.0). Los trabajos tienen igual peso sobre la nota final y se gana el curso si la nota definitiva es superior a 3.5

		Resultados esperados: Se va a determinar si un estudiante gano o perdio un concurso en base a que su nota definitiva sea superior a 3.5 

		Datos disponibles:  Se solicitara al usuario que se ingresen las 5 notas del estudiante 

		Proceso: Con las 5 notas ingresadas se determinara que el promedio de estas sea mayor a 3.5, se considera notas entre 0.0 y 5.0

		Variables requeridas: 
		
		var nota1, nota2, nota3, nota4, nota5, notaDefinitva  
		
		Propuesta 1: 
		notaEstudianteCrid						///PRESENTA ERRORES///

			real nota1, nota2, nota3, nota4, nota5, notaDefinitva
			cadena concurso

			imprimir ("ingrese la nota 1: ")
					leer (nota1)		
			imprimir ("ingrese la nota 2: ")
					leer (nota2)
			imprimir ("ingrese la nota:3: ")				
					leer (nota3)
			imprimir ("ingrese la nota 4: ")
					leer (nota4)
			imprimir ("ingrese la nota 5: ")
					leer (nota5)
			
			Si ( nota1, nota2, nota3, nota4, nota5 <= 0.0 Y nota1, nota2, nota3, nota4, nota5 >= 5.0 ) Entonces
				notaDefinitva = nota1 + nota2 + nota3 + nota4 + nota5 / 5
				SINO 
					imprimir ("Verifique el ingreso de la calificacion")
			FinSI

			Si nota == 3.5 Entonces
				imprimir ("Usted gano el curso!!")
				SINO
					imprimir ("Usted perdio el curso")
			FinSi 
		notaEstudianteCrid


		Propuesta2: 

		notaEstudianteCrid2						

			real nota1, nota2, nota3, nota4, nota5, notaDefinitva
			cadena concurso

			imprimir ("ingrese la nota 1: ")
					leer (nota1)		
			imprimir ("ingrese la nota 2: ")
					leer (nota2)
			imprimir ("ingrese la nota:3: ")				
					leer (nota3)
			imprimir ("ingrese la nota 4: ")
					leer (nota4)
			imprimir ("ingrese la nota 5: ")
					leer (nota5)
			
			Si ( nota1 >= 0.0 Y nota1 <=5.0 Y 
				 nota2 >= 0.0 Y nota2 <=5.0 Y
				 nota3 >= 0.0 Y nota3 <=5.0 Y
				 nota4 >= 0.0 Y nota4 <=5.0 Y
				 nota5 >= 0.0 Y nota5 <=5.0 Y) Entonces
				notaDefinitva = (nota1 + nota2 + nota3 + nota4 + nota5) / 5
				SINO 
					imprimir ("Verifique el ingreso de la calificacion")
					Fin
			FinSI

			Si notaDefinitva >= 3.5 Entonces
				imprimir ("Usted gano el curso!!")
				SINO
					imprimir ("Usted perdio el curso")
			FinSi 
		FinnotaEstudianteCrid2

EJERCICIO 5. 	

	ANALISIS: Crear un algoritmo que permita saber si una ecuacion cuadratica tiene o no solucion. 
				Recuerde que una ecuacion cuadratica se define como:   (-b + raizCuadrada (b^2 - 4 * a * c)) / (2 * a )
				Y se dice que tiene solucion si el valor del discriminaste (que corresponde al calculo interno de la raız cuadrada b2 −4ac) es mayor
				o igual a cero y el valor de a es diferente de cero.


	Resultados esperados:  Se espera que tras ingresar los valores de la ecuacion cuadratica se indique si tiene solicucion 

	Datos disponibles: Se le solicitara al usuario los 3 valores de las inconictas 
	
	Proceso: Despues de tener los valores, se procede a verificar si tiene solicuin mediante el valor del discriminante y contemplando que a es diferente de cero, sino se tiene valor se muestra mensaje 
				y en caso de que tiene valor reaizar operacion

	Variables requeridas: 
	var
	real a, b, c, x1, x2, discriminante, 
		
		Propuesta 1: 
		EcuacionCuadraticaDisc

			imprimir ("Ingrese el valor de: a")
			leer (a)			
			imprimir ("Ingrese el valor de: b")
			leer (b)
			imprimir ("Ingrese el valor de: c")
			leer (c)

			imprimir ("Se determinara si la ecuacion tiene solucion: ")
			discriminante = b^2 -4 * a * c 
			SI 
				discriminante >= 0 Y a != 0 Entonces
					imprimir ("La ecuacion tiene solucion") 
				SINO
					imprimir ("La ecuacion no tiene solucion")
			FINSI
		Fin EcuacionCuadraticaDisc

EJERCICIO 6. 	

		ANALISIS: Crear un algoritmo que indique si un   entero x, ingresado por
					el usuario, se encuentra por dentro o por fuera del intervalo cerrado-cerrado [minimoValor, maximoValor)] tambien ingresados por el
					usuario.
					Por ejemplo: si los valores mınimos y maximo son 3 y 7
					respectivamente, el valor 5 esta dentro, mientras que el valor de 8
					esta por fuera del intervalo.
 
			Resultados esperados: Se espera que se indique si el   ingresado esta dentro de un intervalo cerrado que sera ingresado por el usuario 

			Datos disponibles: Se solicitara el rango de los intervalos y el   a calcular 

			Proceso: 

			Variables requeridas: 
			real minimoValor, maximoValor, num, 
			 

			Propuesta 1: 
			RangoMaxMin
				imprimir ("Ingrese el valor maximo del rango: ")
				leer (minimoValor)
				imprimir ("Ingrese el valor minimo del rango: ")
				leer (maximoValor)
				imprimir ("Ingrese el   a determinar: " )
				leer (num)	
				
				SI (num >= minimoValor Y <=maximoValor ) Entonces 
					imprimir ("El   ingresado se encuenta dentro del intervalo cerrado")
					SINO 
					imprimir ("El   ingresado esta fuera del intervalo")
				FINSI 
			Fin RangoMaxMin


EJERCICIO 7. 	

		ANALISIS: Crear un algoritmo que indique si un   entero x se encuentra
				  por dentro o por fuera de tres intervalos abierto-abierto cuyo rangos
				  no se interceptan entre sı y sus lımites son ingresados por el usuario.

			Resultados esperados: Se espera que se indique si el   ingresado esta dentro de tres intervalos abirtos mismos  que seran ingresado por el usuario 

			Datos disponibles: Valor de los tres intervalos,   a determinar si esta dentro del rango 

			Proceso: Se va a solictar el valor minimo y maximo por cada intervalo, se va a determinar que los valores de los intervalos sean correctos, se va a determinar que no se intercepte y se 
					va verificar si esta dento o fuera de los intervalos proporcionados 

			Variables requeridas: intervalo1min, intervalo1max, intervalo2min, intervalo2max, intervalo3min, intervalo3max
			 

			Propuesta 1: 
				IntervalorAbiertos 
					variables 
					entero num, intervalo1min, intervalo1max, intervalo2min, intervalo2max,  intervalo3min, intervalo3ax
					//Se obtienen valores de los intervalos

					imprimir ("Ingrese el valor minimo del primer intervalo: ")
					leer (intervalo1min)
					imprimir ("Ingrese el valor maximo del primer intervalo: ")
					leer (intervalo1max)

					imprimir ("Ingrese el valor minimo del segundo intervalo: ")
					leer (intervalo2min)
					imprimir ("Ingrese el valor maximo del segundo intervalo: ")
					leer (intervalo2max)
					
					imprimir ("Ingrese el valor minimo del tercer intervalo: ")
					leer (intervalo3min)
					imprimir ("Ingrese el valor maximo del tercer intervalo: ")
					leer (intervalo3ax)
					
					imprimir ("Ingrese el   a evaluar en los intervalos: ")
					leer (num)


					//Se valida los intervalos sean validos

						SI intervalo1min >= intervalo1max O intervalo2min >= intervalo2max O 
							intervalo3min >= intervalo3max Entonces
							imprimir ("Ingrese un intervalo que sea valido")
						FIN
					//Se verifica que los intervalos no se intercepten 

						SI  (intervalo1max > intervalo2min Y intervalo2min > intervalo1min) O 
							(intervalo2max > intervalo3min Y intervalo3min > intervalo2max) O 
							(intervalo3max > intervalo1min Y intervalo1min > intervalo3max) Entonces
							imprimir ("Los intervalos se interceptan")
						FIN

					// Evaluar   en los intervalos 
						
						Si num > intervalo1min Y intervalo1max Entonces
						imprimir ("El   esta dentro del primer intervalo")
						SINO 
							SI num > intervalo2min Y intervalo2max Entonces
							imprimir ("El   esta dentro del segundo intervalo")
							SINO 
								SI num > intervalo3min Y intervalo3max Entonces 
								imprimir ("El   esta en el tercer intervalo")
								SINO 
									imprimir ("El   esta fuera de todos los intervalos")
						FINSI 
				FIN IntervalorAbiertos

 
EJERCICIO 8. 	

		ANALISIS:  Crear un algoritmo que indique el valor del descuento de un artıculo dependiendo de su tipo:
						Tipo 			Porcentaje de descuento
						Textil 						0 %
						Electrodomestico		    3.7 %
						Elementos de cocina 		4.2 %
						Video juego 				7.8 %

			Resultados esperados:Se dara el valor de descuento en base a su tipo de artiuclo 

			Datos disponibles: Se solicitara el valor del articulo y el tipo 

			Proceso: Una vez con los datos se va a determinar el precio del articulo, su descuento y su valor final 

			Variables requeridas:  precio, descuento, porcentaje, precioFinal 
			 

			Propuesta 1: 
				DescuentoArticulo
					var 
					cadena tipo 
					real precio, descuento, porcentaje, preciofinal 

					imprimir ("Ingrese el precio del articulo: ")
					leer (precio)

					imprimir ("Ingrese el tipo del articulo T/E/C/J: ")
					leer (tipo)

					Segun ( tipo )
						caso 'T':
						caso 't':  porcentaje = 0.0 Entonces 
								   FinCaso
						
						caso 'E':
						caso 'e': porcentaje = 0.037
								  FinCaso
						caso 'C': 
						caso 'c': porcentaje = 0.042
								  FinCaso
						caso 'J':
						caso 'j': porcentaje = 0.078
								  FinCaso
					FinSegun

					preciofinal = porcentaje * precio

					imprimir ("El precio del articulo es de: " precio)
					imprimir ("El valor del articulo con descuento es: " precioFinal)
				Fin DescuentoArticulo

EJERCICIO 9. 	

		ANALISIS:  Crear un algoritmo que indique el valor del descuento de un artıculo dependiendo de su valor: 
					Rango de valores 					Porcentaje de descuento
					$0.0 hasta $100.000 							0 %
					Mas de $100.000 hasta $225.000 					1.5 %
					Mas de $225.000 hasta $375.000 					3.8 %
					Mas de $375.000 								10.3 %

			Resultados esperados: Se espera que se calcule el valor de descuento de un articulo siempre y cuando este dentro de un rango de precios establecido 

			Datos disponibles: Se le solicita al usuario que ingrese el costo del articulo que desea adquir 

			Proceso: 

			Variables requeridas: Una vez con el precio del articulo, se va a determianar su descuento en base al rango 

			Propuesta 1: 
				DescuentoRango 
					var 
					real precio, porcentaje, descuento precioDescuento

					imprimir ("Ingrese el precio del articulo que desea adquir: ")
					leer (precio)

					Si (precio == 0.0 Y precio <= 100.000) Entonces		
						porcentaje = 0.0
						FinSi
					Si (precio >= 100.000 Y precio <= 225.000) Entonces
						porcentaje = 0.015
						FinSi
					Si (precio >= 225.000 Y precio <= 375.000) Entonces
						porcentaje = 0.038
						FinSi 
					Si (precio > 375.000) Entonces 
						porcentaje = 0.103
						FinSi 
					
					descuento = precio * porcentaje
					precioDescuento = precio - descuento


					imprimir ("El articulo tiene un costo de: " precio)
					imprimir ("El descuento es de: " descuento)
					imprimir ("El costo final del articulo es de: " precioDescuento)
					
				Fin DescuentoRango
					
***************REPASAR DESICIONES COMPUESTAS, ANIDADAS Y MULTIPLES***************
REPASO CAPITULO 3 
Estructuras de desicion

La desicion permite que un algortimo ejecute un conjunto u otro de instrucciones dependiendo del valor de 
verdad de una expresion logica / relacional 
-Si dentro del conjunto de instrucciones a ejecutar no hay otras desiciones se dice entonces que son SIMPLES 
-En caso de que hay otras instrucciones se les conoce como ANIDADAS 

3.1 DESICIONES COMPUESTAS 
		//Estructura General del SI 

		1 Si( condicion ) Entonces
		2 	InstruccionV-1
		3 	InstruccionV-2
		4 	...
		5 	InstruccionV-n
		6 SiNo
		7 	InstruccionF-1
		8 	InstruccionF-2
		9 	...
		10	 InstruccionF-m
		11 FinSi


Instruccion-V representa las instrucciones en la parte Verdadera de la decision, es decir la parte que se ejecutan cuando la
condicion es Verdadera. Por otro lado, Instruccion-F representa las instrucciones en la parte Falsa de la decision

En algunos casos, es posible no se requiera ejecutar instrucciones cuando
la condicion sea Falsa, ası que dicha zona se puede eliminar de la estructura

		//Forma general del Si sin el SiNo
		1 Si( condicion ) Entonces
		2 	InstruccionV-1
		3 	InstruccionV-2
		4 	...
		5 	InstruccionV-n
		6 FinSi
	
3.2 DESICIONES ANIDADAS 
Las estructuras de decision se pueden usar cuantas veces sean necesarias
en un algoritmo, incluso dentro de otra estructura de decision

Es necesario que la segunda decision, no dependa de la
primera, es decir, son dos decisiones simples y no una anidada

	//EJEMPLO
	Si ¿hace calor? Entonces
		Vestir ropa deportiva
		Ir al parque
	Sino
		Vestir informalmente
		Ir al cine
	Si ¿tengo compañia? Entonces
		Usar el carro
	Sino
		Usar transporte publico

Se dice entonces que hay una decision anidada, cuando existe otra
decision en la parte verdadera (Sı) o en la parte falsa (No) de una
decision; en otro caso son decisiones independientes o secuenciales.

Ejemplo de estructura SI anidada

13 		Si( estrato == ’1’ ) Entonces
14 			cargoFijo = 2500.0
15 			valorConsumo = cantidad * 2200.0
16 			valorRecoleccion = 5500.0
17 		SiNo
18 			Si( estrato == ’2’ ) Entonces
19 				cargoFijo = 2800.0
20 				valorConsumo = cantidad * 2350.0
21 				valorRecoleccion = 6200.0
22 			SiNo
23 				Si( estrato == ’3’ ) Entonces
24 					cargoFijo = 3000.00
25 					valorConsumo = cantidad * 2600.0
26 					valorRecoleccion = 7400.0
27 				SiNo
28 					Si( estrato == ’4’ ) Entonces
29 						cargoFijo = 3300.00
30 						valorConsumo = cantidad * 3400.0
31 						valorRecoleccion = 8600.0
32 					SiNo
33 						Si( estrato == ’5’ ) Entonces
34 							cargoFijo = 3700.00
35 							valorConsumo = cantidad * 3900.0
36 							valorRecoleccion = 9700.00
37 						SiNo
38 							cargoFijo = 2800.00
39 							valorConsumo = cantidad * 2350.0
40 							valorRecoleccion = 6200.0
41 						FinSi
42 					FinSi
43 				FinSi
44 			FinSi
45 		FinSi

A continuacion, el algoritmo utiliza una estructura Si anidada (lıneas 13 a la 45) que va determinando paulatinamente cual es el
estrato socioeconomico ingresado con el proposito de aplicar los valores correspondientes a ese estrato. 

3.3 DESICIONES MULTIPLES 

Tambien llamada estructura selectiva, es una forma de rescribir algunas desiciones anidadas, la utilizada para seleccionar 
una OPCION ENTRE UN CONJUNTO DE VALORES

	Estructura general de desicion multiple 

	decisiones multiples 
1 Segun( selector )
2 	Caso valor1: InstruccionA1-1
3 				 InstruccionA1-2
4 				 ...
5 				 InstruccionA1-n1
6 				 FinCaso
7
8 	Caso valor2: InstruccionA2-1
9 				 InstruccionA2-2
10				 ...
11				 InstruccionA2-n2
12				 FinCaso
13 	...
14
15 	Caso valork: InstruccionAk-1
16 				 InstruccionAk-2
17 				 ...
18 				 InstruccionAk-nk
19 				 FinCaso
20
21 	EnOtroCaso: InstruccionOtroCaso-1
22 				InstruccionOtroCaso-2
23 				...
24 				InstruccionOtroCaso-n
25 				FinCaso
26 FinSegun

En esta forma general se puede observar que existen un conjunto k de valores (valor1 hasta la valork).
Cada valor a su vez tiene un conjunto independiente de instrucciones que esta delimitado desde la instruccion (Caso valor:) hasta FinCaso,
todas estas instrucciones se ejecutan cuando el contenido de la variable denominada selector coincide con el de la valor en cuestion.

Si el contenido de la variable selector no incide con ninguna de los valores, se ejecutan las instrucciones de la seccion llamada EnOtroCaso,
la cual se suele escribir despues de todas los valores validos.
El tipo de dato de la variable selector suele estar limitada a: Entero, Caracter o Cadena. No se utilizan selectores tipo Real


**Aclaracion***
Si se omite la instruccion FinCaso, el algoritmo continua la ejecucion a las instrucciones del siguiente
valor y ası sucesivamente hasta encontrar un FinCaso o un FinSegun. Esta caracterıstica
permite crear ciertos comportamientos deseables en un algoritmo.

		Forma general del Segun mediante Si

1 	Si( selector == valor1 ) Entonces
2 		InstruccionA1-1
3 		InstruccionA1-2
4 		...
5 		InstruccionA1-n1
6 	SiNo
7 		Si( selector == valor2 ) Entonces
8 			InstruccionA2-1
9 			InstruccionA2-2
10			 ...
11			 InstruccionA2-n2
12		 SiNo
13		 	...
14		
15		 	Si( selector == valork ) Entonces
16		 		InstruccionAk-1
17		 		InstruccionAk-2
18		 		...
19		 		InstruccionAk-nk
20		 	SiNo
21		 		InstruccionOtroCaso-1
22		 		InstruccionOtroCaso-2
23				 ...	
24				 InstruccionOtroCaso-n
25	 		FinSi
26		 FinSi
27	 FinSi


******		CAPITULO 4		*****
Estructuras de repeticion
(contador, acumulador, centinela)

En algunos algortimos se requiere que se ejecuten tareas de forma repetitiva, tambien llamadas ciclos o bucles y 
permiten que una instruccion o un bloque de ellas se pueda ejecutar mas de una vez y cada ejecucion de ciclo es conocida como ITERACION

	Estructuras: 
	Mientras - FinMientras
	Haga - MientrasQue 
	Para - FinPara

*** CONCEPTOS BASICOS ***
	
	Contador: Es una variable que tiene la funcion de llevar la cuenta de determinadas situaciones que se repiten dentro de los ciclos 
				EJ:
				El   de visitas a un video en YouTube.
				Los amigos que se tienen en Facebook.
				Cantidad de votos que obtienen los candidatos en unas elecciones.

			-Estas varibles se declaran de tipo entero
			-Se deben de inicializar antes de entrar al ciclo (asignarle valor inicial para comenzar el conteo)
			-Debe existir una instruccion que modifique el valor del contador 

				FORMA GENERAL 

				contador = contador + valorIncremento
				contador = contador - valorDecremento

			El valor a incrementar o decrementar, hace referencia a cualquie cantidad de tipo numerico, en la cual aumenta o disminuye su valor en cada
			iteracion del ciclo. Los valores a incrementar o decrementar son cantidades constantes.

			En los ejemplos anteriores, la cantidad de amigos en Facebook se incrementa en el momento que se confirme una solicitud de amistad o
			se decrementa cuando se elimina un contacto de la lista de amigos.






	Acumulador: Un acumulador es una variable que funciona de forma similar a un contador, la diferencia radica en que aumentan o disminuyen en
				cantidades variables y no en forma constante como es el caso de los contadores.
				
				EJ: 
				Almacenar el puntaje acumulado en un juego.
				Calcular el saldo en una cuenta de ahorros.
				Determinar el valor a pagar en un supermercado cuando se compran varios artıculos.

			-Se declaran de tipo numerico sea entero o real 
			-Se deben de inicializar antes de entrar al ciclo (asignarle valor inicial para comenzar el conteo)

				FORMA GENERAL 

				acumulador = acumulador + valorIncremento
				acumulador = acumulador - valorDecremento

				CASOS ESPECIALES   (No se puede tomar como valor de inicalizacion el cero ni tampoco division entre cero )
				acumulador = acumulador * valorIncremento
				acumulador = acumulador / valorDecremento

			El acumulador aumenta o disminuye su valor en cada iteracion del ciclo. Los valores a incrementar o decrementar
			son cantidades variables





	Bandera, conmutador o centinela: puede ser definida virtualmente de cualquier tipo de dato. Generalmente estas variables toman uno de dos valores posibles,
			ese valor depende del tipo de dato con que fue declarada Si la variable es de tipo Logico, los unicos valores posibles son
			Verdadero o Falso. Si la variable es de tipo Entero los valores posibles podrıan ser 1 o 0, que se pueden interpretar como verdadero o encendido
			para el 1 y falso o apagado para el 0. Si la declaracion se hizo de tipo
			Caracter, puede tomar cualquier valor; los valores mas comunes son ’S’o
			’N’, interpretados como ’S’ = Sı o ’N’= No.
		
		-Se debe de inicializar en base a lo siguiente: 

			el valor inicial debe ser uno de los posibles que puede tomar; una vez se presente la situacion esperada estos valores deberan cambiar su estado al valor contrario, es decir,
		    si se inicializo en Verdadero cambiara a Falso, si fue en 1 cambiara a 0 y si fue en ’S’cambiara a ’N’. Luego de ejecutar las instrucciones correspondientes podrıan retomar su valor inicial.


**********		4.2. Estructura Mientras - FinMientras		**********
	
	Es una estructura de repeticion que permite que una instruccion o un conjunto de ellas se ejecuten una o mas veces, o por el contrario que no
	lleguen a ejecutarse ya que todo depende del resultado de una condicion que debe evaluarse al inicio del ciclo

			Forma general - Mientras-FinMientras

			1 	Instruccion de inicializacion
			2 	Mientras( condicion )
			3 		Instruccion-1
			4 		Instruccion-2
			5 		... /* Cuerpo del ciclo */
			6 		Instruccion-n
			7 		Instruccion modificadora de condicion
			8 	FinMientras
			9 	Instruccion externa

	instruccion repetitiva condicionada al inicio, se debe prestar especial cuidado en inicializar la variable o las variables que seran evaluadas en la condicion 
	ya que de esto depende que se ejecute o no el cuerpo del ciclo;

	-De igual manera la inicializacion tambien se aplica a los contadores y acumuladores
	-La inicializacion puede estar implıcita en el mismo algoritmo o puede ser suministrada por el usuario

	EXPLICACION Forma general - Mientras-FinMientras

		Al encontrar la instruccion Mientras se debe evaluar la condicion (lınea 2), la cual estara representada por una expresion relacional o logica. 
		Si el resultado de la evaluacion es verdadero, entonces se procede a ejecutar el cuerpo del ciclo (lıneas de la 3 a la 7) hasta encontrar la instruccion
		FinMientras; luego el control del algoritmo regresa al inicio del ciclo, es decir a la instruccion Mientras y una vez mas se evalua la condicion.
		Este proceso terminara en el momento que la evaluacion de la condicion arroje un resultado falso, en cuyo caso el control del algoritmo lo asume la
		Instruccion externa (lınea 9), la cual no hace parte del ciclo
		Cuando se evalue por primera vez la condicion y el resultado sea falso, las instrucciones que componen el cuerpo del ciclo no se ejecutan; el control
		lo asume la Instruccion externa. En conclusion, este ciclo itera mientras el valor de la condicion sea verdadero.
		Es importante tener presente que todo ciclo debe terminar de ejecutarse cuando cumpla con la tarea para la cual fue dise˜nado, para ello dentro de
		su cuerpo se encuentra la Instruccion modificadora de condicion (lınea 7) cuyo proposito es cambiar el estado de la condicion. De omitir la instruccion
		modificadora, se obtendra lo que se conoce como un “Ciclo infinito”, debido a que su ejecucion “nunca termina”. Aunque en la forma general esta
		representada de ultima en la secuencia de instrucciones que componen el cuerpo del ciclo, no necesariamente debe ocupar ese lugar
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		Ejemplo de la estructura con algortimo 

		4.2: Imprirmir los  s del 1 al 10

		1   = 1		// Instruccion de inicalizacion
		2 Mientras(   <= 10 ) 		//Condicion e inicio del ciclo
		3 imprimir(   )		//Cuerpo del ciclo 
		4   =   + 1		// Cuerpo del ciclo e instruccion modificadora de condicion
		5 FinMientras		//Fin del ciclo. Regresar el control a la linea 2

		EXPLICACION -- 4.2: Imprirmir los  s del 1 al 10
			En la primera lınea la variable   se inicializa en 1. Pasando a la lınea 2 se encuentra la instruccion Mientras con su respectiva condicion.
			El cuerpo del ciclo esta conformado por dos instrucciones (lıneas 3 y 4), ,que se ejecutan mientras que la condicion de la lınea 2 sea verdadera, es
			decir, mientras el contenido de la variable   sea menor o igual a 10. La instruccion imprimir se ejecuta 10 veces, imprimiendo uno a uno los  s del 1 al 10.
			La operacion que incluye el contador  :   =   + 1, ademas de incrementar en cada iteracion en 1 el valor de la variable
			 , hace el papel de la instruccion modificadora de condicion, con el proposito de llegar a cambiar de verdadero a falso el estado de la condicion.
			Esto lo logra en el momento que la variable tome el valor de 11, ası al evaluar la condicion (  <= 10) se obtiene un resultado falso, con lo cual se da por terminada la ejecucion del Mientras.

	RECAMIPULACION DEL Mientras -- FinMientras

	-- Las variables que intervienen en la condicion del ciclo deben tener un valor inicial antes de su primera evaluacion.
	-- El bloque de instrucciones o cuerpo del ciclo, se ejecutara mientras el resultado de la evaluacion de la condicion sea Verdadero. Si en la primera
	evaluacion de la condicion del Mientras, el resultado es Falso, las instrucciones del cuerpo del ciclo no se ejecutan.
	-- La evaluacion de una expresion relacional o logica, siempre dara como resultado un valor Verdadero o Falso

EJEMPLOS PARA RESOLVER LA ESTRUCTURA REPETITIVA Mientras - FinMientras

	EJERCICIO 4.1. Diseñe un algoritmo que permita generar e imprimir la siguiente serie de  s: 1, 3, 5, 7, 9, 11, . . . , n
				   El algoritmo debera recibir un   entero (n) que indicara la cantidad de terminos de la serie. 

		ANALISIS: 

			Resultados esperados:este algoritmo debe generar e imprimir la siguiente serie: 1, 3, 5, 7, 9, 11, . . . , n

			Datos disponibles: Para la solucion de este ejemplo se proporcionara la cantidad de terminos que tendra la serie (n)

			Proceso: la serie esta conformada por  s impares. El primer termino es el   1, los siguientes tienen un incremento de 2 en 2.
					 Para lograr la serie, debe hacerse un proceso repetitivo que terminara en el momento que se complete la cantidad de terminos especificada.
					 Dentro de las instrucciones que conforman el cuerpo del ciclo se debe imprimir cada termino de la serie. Ası mismo, se deben ir contando
					 los terminos impresos para poder determinar el fin de las iteraciones.

			Variables requeridas: 
				• cantidadTerminos: almacena el   de terminos que tendra la serie (n).
				• contador s: llevara el control de la cantidad de terminos que se vayan imprimiendo, a la vez que se utilizara en la condicion del ciclo.
				• termino: representara cada uno de los terminos de la serie que se van generando.


			 

			Propuesta 1: 

			1 Algoritmo Serie
				/* Este algoritmo imprime la siguiente serie, de acuerdo
				al   de terminos que se le especifique: 
				1, 3, 5, 7, 9, 11, ..., n
				*/

				// Declaracion de variables
					entero cantidadTerminos, contador s, termino

			    // Dato disponible
					imprimir ("Ingrese el   de terminos que tendra la serie: ")
					leer (cantidadTerminos)

				// Inicializacion de variables 
				contador s = 0
				termino = 1
			
				// Generacion de la serie 
				Mientras ( contador s < cantidadTerminos - 1)		// dara un resultado verdadero ya que contador s se inicializo en 0
				imprimir ( termino, ", " )								//imprime el contenido de la variable termino, acompañado de una coma (,) y un espacio en blanco con el
																		//fin de separarlo del siguiente  , de esta manera se ira mostrando al usuario la conformacion de la serie
					termino = termino + 2 								//Se incrementa la variable termino en 2 unidades, ya que los terminos de la serie tienen este comportamiento

					contador s = contador s + 1				// tiene como proposito ir contando la cantidad de  s que se imprimen y a la vez es la variable que sirve 
																		//para controlar el   de iteraciones del ciclo   ADEMAS ** Es la instruccion modificadora de condicion.**
				FinMientras

				imprimir ( termino )

			Fin Serie 

 En este caso se tiene una inicializacion suministrada por el usuario con la instruccion leer 
 y otra implıcita en el mismo algoritmo con la asignacion contador s = 0
 La tercera inicializacion, se encuentra donde la variable termino recibe el valor de 1, el cual corresponde al primer   de la
 serie a generar.

	Para realizar el proceso repetito se implemento la estructura Mientras

	Mientras( contador s < cantidadTerminos - 1 )

	Donde contador s contara la cantidad de  s que se va imprimiendo, esta variable controlara que el ciclo se ejecute mientras su
	valor sea menor al de cantidadTerminos - 1. Es necesario restar 1	la cantidad de terminos para que la impresion del ultimo   no vaya
	acompañada de una coma.

		Ejercicio2 

		Diseñe un algoritmo que permita generar e imprimir la siguiente serie de  s: 1, 3, 5, 7, 9, 11, . . . , n
				   El algoritmo debera recibir un   entero (n) que indicara la cantidad de terminos de la serie. 

		var 
		entero termino, contadorTerminos, cantidadTerminos 

		imprimir ("Ingrese la cantidad de terminos a imprimir")
		leer ("cantidadTerminos")

		contadorTerminos = 0
		termino = 1

		Mientras ( contadorTerminos < cantidadTerminos - 1 )
			imprimir (termino, ", ")

			termino = termino + 2 

			contadorTerminos = contadorTerminos + 1 
		
		Fin Mientras

		imprimir ("Los terminos generados son: ", termino)

		Fin Ejercicio2



EJERCICIO 4.5. 	

		ANALISIS: Un profesor de Fundamentos de Programacion, desea que le diseñen un algoritmo con el cual se pueda determinar cuantos de sus
								  estudiantes, de uno de sus grupos, aprobaron o reprobaron la materia, ası mismo desea conocer el promedio general del grupo. Se considera que la
								  materia es aprobada con una nota mınima de 3.0. Para esta tarea el profesor posee el codigo de cada estudiante y la nota definitiva que obtuvo en la materia
		

			Resultados esperados: se espera que el algoritmo informe los siguientes datos:
									• Cantidad de estudiantes que aprobaron la materia.
									• Cantidad de estudiantes que reprobaron la materia.
									• Promedio general del grupo.

			Datos disponibles: Se requiere que el usuario proporcione tres datos El primero es el codigo de cada estudiante, el segundo es la nota definitiva de la materia cada uno de ellos y el tercero es el   de estudiantes 

			Proceso: Se requiere de el uso de dos contadores uno para saber la cantidad de estudiantes que aprobaron la materia y otro para saber cuantos la reprobaron 
					 despues se debe de calcular el promedio general del grupo ( promedio = sumatoria / cantidad ) Se tomara como sumatoria la suma de todas las notas definitivas 
					 de los estudiantes y la cantidad es el   de estudiantes del curso.
					 Se requiere calcular la sumatoria y se hara mediante ( sumatoria = sumatoria + notaDefinitiva )
					 Orden: Despues de declarar las variables, se debe de solicitar el   de estudiantes, ese dato va a determinar el   de veces que se va a ejecutar el ciclo 
					 Luego se incializan los contadores y acumuladores necesarios. Luego se establece el ciclo y su respectiva condicion 
					 Dentro de las instrucciones del cuerpo del ciclo se debe de solicitar el codigo del estudiante y la nota definitiva en la materia.
					 Una vez que se tenga el valor de la nota definitiva se puede determinar si aprobo o reprobo la materia; para ello se hara uso del arbol de desicion ¿Nota definitiva? >= 3
					 Otra instruccion que debe de estar dentro del ciclo es la que acumula la sumatoria de las notas definitivas de cada estudiante 
					 Cuando se termine la ejecucion del ciclo, se cauclulara el promedio general del grupo, y se mostraran los resultados que solicita el enunciado 





			Variables requeridas: 
				• cantidadEstudiantes: determinara cuantas veces debe ejecutarse el ciclo.
				• codigoEstudiante: identifica el estudiante a procesar.
				• notaDefinitiva: nota obtenida por el estudiante que se esta procesando en el momento.
				• contadorEstudiantes: llevara el control del   de estudiantes que se van procesando, a la vez se utilizara en la condicion del ciclo.
				• aprobaron: es un contador que se incrementara cuando la nota definitiva obtenida en la materia sea mayor o igual a 3.0.
				• reprobaron: es un contador que se incrementara cuando la nota definitiva obtenida en la materia sea menor a 3.0.
				• sumaDefinitivas: acumulador que llevara la sumatoria de las notas definitivas.
				• promedioGrupo: una vez finalizado el ciclo se usara para calcular el promedio general del grupo.


			 

			Propuesta 1: 

			estudiantes
				/*De una cantidad de estudiantes se determina cuantos 
				 aprobaron y reprobaron la materia.
				 Adicionalmente se calcula el promedio general.
				*/

				var 
				entero cantidadEstudiantes, contadorEstudiantes, aprobaron, reprobaron
				real notaDeFinitiva, sumaDefinitivas, promedioGrupo
				cadena codigoEstudiante

				imprimir ("Ingrese la cantidad de estudiantes: ")
				leer (cantidadEstudiantes)

				//Inicializacion

				cantidadEstudiantes = 0
				aprobaron = 0
				reprobaron = 0
				sumaDefinitivas = 0

				// Inicia Ciclo 

				Mientras (contadorEstudiantes < cantidadEstudiantes)
						imprimir ("Ingrese el codigo del estudiante: ")
						leer (codigoEstudiante)
						imiprimir ( "Ingrese la nota final" )
						leer (notaDeFinitiva)

						SI (notaDeFinitiva >= 3) Entonces 
							aprobaron = aprobaron + 1
						SINO 
								reprobaron = reprobaron + 1
						
						FinSI
				
					sumaDefinitivas = sumaDefinitivas + notaDeFinitiva  //Acumulador de notas 
					contadorEstudiantes = contadorEstudiantes + 1
				
				FinMientras

				//Calculo Promedio 

				SI ( cantidadEstudiantes >= 1 ) Entonces
					promedioGrupo = sumaDefinitivas / cantidadEstudiantes 
				SINO 
					promedioGrupo = 0
				FinSi 

				imprimir ("El   de estudiantes aprobados es: " aprobados)
				imprimir ( "El   de estudiantes reprobados es: " reprobados )
				imiprimir ( "El promedio general del grupo es de: " promedioGrupo)

			Fin Estudiantes 


EJERCICIO 4.6. 	

		ANALISIS: Diseñe un algoritmo que reciba como dato de entrada un   entero perteneciente al sistema decimal. Si cumple la condicion de
				  ser positivo, informe el   de cifras que posee, adicionalmente calcule la sumatoria de ellas; en caso contrario, imprima un mensaje que diga que
				  el   no es positivo

			Resultados esperados: Se espera obtener la cantidad de cifras que tiene el   leido y la sumatoria de ellas, asi como un mensaje 
								  que indique si el   no es positivo 

			Datos disponibles: un   entero 

			Proceso: leer un   entero. Tomar una decision para determinar si es positivo, en caso de serlo se deben separar cada una
						de sus cifras y simultaneamente se van sumando; en caso contrario informar que no es positivo.

			Variables requeridas: 
			 entero num, numCopia, contadorCifras, sumaCifras 

			Propuesta 1: 

                //Lee un   decimal (base 10). Si es positivo calcula la sumatoria de sus cifras, en caso contrario informa
               //que no es un   positivo. 

            contador s 
            
                var 
                entero num, numCopia, contadorCifras, sumaCifras

                imprimir ( "Ingrese un   entero" )
                leer (num)


                //Se valida si es entero y se inicializan contadores 
                Si ( num > 0 ) Entonces
                    num = numCopia                          //Se genera copia para poder imprimirlo con los resultados 
                    contadorCifras = 0
                    sumaCifras = 0

                    Mientras( copia  > 0 )             //Se evalua la condicion 
                        cifra = copia  % 10            //Se separa cifra del        
                        copia  = copia  / 10      //Elimina la ultima cifra del   

                        sumaCifras = sumaCifras + cifra     // Acumula la sumatoria de las cifras 
                        contadorCifras = contadorCifras + 1 // Cuenta las cifras 

                    FinMientras

                    imprimir ( "La cantidad de cifras de: ", num)
                    imprimir ( "son", contadorCifras )
                    imprimir ( "la sumatoria es: ", sumaCifras )

                Sino
                    Imprirmir ( "El   no es positivo" ) 
                FinSi

            Fin contador s

--Las iteraciones del ciclo no estan condicionadas mediante un
contador, en este caso se hacen mediante un acumulador: Mientras( copia  > 0 )

--La instruccion modificadora de condicion esta a cargo de una division, la cual se ejecuta de manera sucesiva mientras la condicion sea
verdadera, reduciendo en cada iteracion el valor de la variable copia : copia  = copia  / 10




EJERCICIO 4.7. 	 Dentro del contexto de las matematicas recreativas3 se encuentra el concepto de   de Armstrong, tambien conocido como
                   narcisista; definido como aquel en que la suma de cada una de sus cifras elevadas a la potencia n es igual a el mismo, donde n esta dada por la cantidad de cifras o dıgitos del  .
                 Por ejemplo, el   407, que posee 3 cifras, es un Armstrong dado
                
                 que: 4^3 + 0^3 + 7^3 = 64 + 0 + 343 = 407

                 De acuerdo al anterior contexto, construya un algoritmo que reciba un   entero positivo en base 10 y determine si es o no un   de Armstrong.

		ANALISIS:  

			Resultados esperados: mensaje que informe si el   ingresado es o no un Armstrong.

			Datos disponibles: un   entero positivo en base 10

			Proceso:    la solucion de este problema se puede realizar con los siguientes pasos:
                        • Leer un   entero positivo.
                        • Determinar el   de cifras o dıgitos de ese  . Para ello se usa el procedimiento explicado en el Ejemplo 4.34
                        • Calcular la sumatoria de sus dıgitos elevados a la potencia n, donde n estara determinada por el   de cifras resultante  del proceso anterior.
                        • Tomar una decision que determine si el   leıdo es igual a la sumatoria mencionada en el paso anterior
                        

			Variables requeridas: 
            entero  , copia , contadorCifras, cifra, sumaCifras

			 

			Propuesta 1: 

            Armstrong

                var 
                entero  , copia , contadorCifras, cifra, sumaCifras

                imprimir ( "Ingrese un   entero: " )
                leer ( )

                copia  =   
                contadorCifras = 0

                //Determinar el   de cifras 

                Mientras ( copia  > 0 ) 
                        cifra = copia  % 10 
                        copia  = copia  / 10
                        contadorCifras = contadorCifras + 1        
                FinMientras 

                //Sumatoria  y potencia

                 sumaCifras = 0
                 copia  =       

                 Mientras ( copia  > 0 )
                    cifra = copia  % 10
                    copia  = copia  / 10
                    sumaCifras = sumaCifras + 1 ^ contadorCifras
                FinMientras

                Si (   == sumaCifras ) Entonces 
                        imprimir (  , "es un   de Armstrong" )
                Sino 
                        imprimir (  , "no es   de Armstrong" )
                FinSI

            Fin Armstrong

                
*****   EXPLICACION    *****

En esta solucion se utilizan dos estructuras repetitivas Mientras FinMientras independientes. 
-- Primera estructura tiene la funcion de contar el   de cifras o dıgitos que conforman al   que proporcione el usuario, de esta manera se determina el valor de la potencia
-- Segunda estructura calcula la sumatoria de los digitos elevados a la potencia n (contadorCifras)
--Luego de que se ejecuten los dos ciclos, se encuentra una estructura de decision Si-FinSi independiente a ellos, cuya funcion es determinar si el   suministrado es o no un Armstrong


EJERCICIO 4.8. 	Diseñe un algoritmo que calcule el Maximo Comun Divisor (MCD5) y el Mınimo Comun Multiplo (mcm6) de dos  s enteros
				positivos, mediante el algoritmo de Euclides. El algoritmo debe permitir hacer varios calculos hasta que el usuario decida que no desea continuar.
				Euclides, matematico griego del año 350 a.C, formulo el algoritmo que lleva su nombre y que permite encontrar el MCD y el mcm de dos  s enteros, a y b (a > b), mediante los siguientes pasos

		ANALISIS: 

			Resultados esperados: El algoritmo debe informar el MCD y el mcm de dos  s enteros

			Datos disponibles: Se proporcionara por el usuraio dos  s enteros 

			Proceso: 

			Variables requeridas: 
				• a y b:  s a los cuales se les hallara el MCD y el mcm.
				• dividendo y divisor: variables que se usaran para copiar el valor de a y b y realizar las operaciones correspondientes, de esta manera no se perderan los valores originales. La variable divisor almacenara el MCD en la ultima ejecucion del ciclo.
				• resto: sera utilizada para calcular el resto de la division entera. Este resto se convertira en el divisor de la siguiente division que se efectue. Adicionalmente controlara la repeticion del ciclo donde se calculara el MCD.
				• mcm: en esta variable se calculara el mınimo comun multiplo de los dos  s ingresados al algoritmo.
				• seguir: es una variable bandera o centinela que recibira una respuesta del usuario, con relacion a si quiere o no realizar un nuevo calculo. Controlara la iteracion del ciclo externo
			 

			Propuesta 1: 
			Euclides
				//Calcula el MCD de dos  s usando el algoritmo de Euclides he informa el mcm

				entero a, b, dividendo, divisor, resto, mcm 
				caracter seguir 

				//Se inicaliza centinela
				seguir = 'S'

				*/Se condiciona el ciclo externo que controlara la cantidad de 
				calculos que se requieren hacer */

				Mientras (seguir == 'S' O seguir == 's') // ciclo externo
					imprimir ( "Ingresar el primer  : " )
					leer (a)
					imprimir ( "Ingrese el segundo  : " )
					leer (b)

					//Se verifica que el valor de a > b 

					Si ( a > b ) Entonces
						dividendo = a 
						divisor = b
					SINO 
						dividendo = b 
						divisor = a
					FinSi

					resto = dividendo % divisor 

					//Se realizan la divisiones 

					Mientras ( resto != 0 ) //Ciclo interno 
						dividendo = divisor 
						divisor = resto 
						resto = dividendo % divisor 
					FinMientras

					mcm = ( a * b ) / divisor

					//Resultados 


					imprimir ( "El maximo comun divisor de: ", a " y ", b )
					imprimir ( " es ", divisor )
					imprimir ( " El minimo comun multiplo es: ", mcm )

					//Se controlan nuevos calculos 

					imprimir ( "Desea realizar nuevos calculos [S] O [N]: " )
					leer ( seguir )

				FinMientras
			Fin Euclides

*** Ciclos Anidados **  //Explicacion en pag 217 o diagrama 4.13 en la pagina 218
Los ciclos anidados, son estructuras repetitivas que se encuentran unas dentro de otras. El ciclo que esta
contenido dentro de otro, generalmente se le denomina ciclo interno y al ciclo contenedor se le da el nombre del ciclo externo. Se puede anidar cualquier cantidad de ciclos 


				*****		4.3. Estructura Haga - MientrasQue			*****


Esta estructura de repeticion, permite que una instruccion o un conjunto de ellas se ejecuten una o mas veces.
El Haga-MientrasQue es un ciclo condicionado al final, lo cual garantiza que sus instrucciones se ejecuten por lo menos una vez

		Forma general - Haga-MientrasQue
		
		1 Instruccion de inicializacion
		2 Haga
		3 	Instruccion-1
		4	Instruccion-2
		5	 ... 			/* Cuerpo del ciclo */
		6	 Instruccion-n
		7	 Instruccion modificadora de condicion
		8 MientrasQue( condicion )
		9 Instruccion externa




EJERCICIO 4.9. 	Diseñe un algoritmo que genere e imprima la siguiente
				serie: 1, 3, 5, 7, 9, 11, . . . , n

		ANALISIS: 

			Resultados esperados:este algoritmo debe generar e imprimir la siguiente serie: 1, 3, 5, 7, 9, 11, . . . , n

			Datos disponibles: Para la solucion de este ejemplo se proporcionara la cantidad de terminos que tendra la serie (n).

			Proceso: la serie esta conformada por  s impares. El primer
					 termino es el   1, los siguientes tienen un incremento de 2 en 2. Para lograr la serie, debe hacerse un proceso repetitivo que terminara
					 en el momento que se complete la cantidad de terminos especificada. Dentro de las instrucciones que conforman el cuerpo del ciclo se debe
					 imprimir cada termino de la serie. Ası mismo, se deben ir contando los terminos impresos para poder determinar el fin de las iteraciones

			Variables requeridas: 
				• cantidadTerminos: almacena el   de terminos que tendra la serie (n).
				• contador s: llevara el control de la cantidad de terminos que se vayan imprimiendo, a la vez que se utilizara en la condicion del ciclo.
				• termino: representara cada uno de los terminos de la serie que se van generando.
			 

			Propuesta 1: 

			SerieMientrasQue

				imprimir ( "Ingrese la cantidad de terminos a generar" )
				leer ( cantidadTerminos )

				contador s = 0 
				termino = 1

				Haga 
					imprimir ( termino, " , " )
					termino = termino + 2 
					contador s = contador s + 1 

				MientrasQue ( contador s > cantidadTerminos - 1 )
				imprimir ( termino )
			Fin SerieMientrasQue

***** ACLARACION *****
Tanto el ciclo Mientras-FinMientras y el Haga-MientrasQue se ejecutan mientras la evaluacion de la condicion arroje un resultado verdadero.
El Mientras-FinMientras evalua la condicion al comienzo, el Haga-MientrasQue la evalua al final.
			
			

EJERCICIO 4.10. 	El profesor de la materia de Programacion para dispositivos moviles, desea hacer una encuesta con sus estudiantes
					para determinar sobre cual de dos posibles plataformas desarrollara las tematicas de este espacio academico. Las plataformas disponibles son
					Android e iOS, en caso de elegir una diferente se debe informar la situacion y no sera tenida en cuenta en los resultados. El profesor elegira la
					plataforma de mayor votacion; si se presenta un empate en la cantidad de votos, se usara otro mecanismo de eleccion.
					Cada estudiante debera digitar su codigo y su eleccion por una de las dos plataformas

		ANALISIS: 

			Resultados esperados: Se espera un informe sobre cual de las dos plataformas tiene mayor votacion
								  Si se elige una opcion diferente a las estas plataformas se debe de informar mediante un mensaje 
								  Se informaran los votos obtenidos por cada una de las plataformas

			Datos disponibles: Se le solicitara al estudiante ek codigo y su eleccion de plataforma

			Proceso: dentro de un proceso repetitivo se debe solicitar el codigo y la eleccion de plataforma del estudiante. Luego se debe incrementar
					 el contador de votos de acuerdo a la plataforma elegida 
					 Para repetir o terminar el proceso cıclico se planteara una pregunta, que debe ser contestada por el usuario.
					 Una vez se termine la votacion, se debe proceder a informar la cantidad de votos por cada una de las plataformas y tomar la decision
					 de cual fue la de mayor votacion; hay que tener en cuenta que existe la posibilidad de un empate en el   de votos

			Variables requeridas: 
				• codigo: almacenara el codigo del estudiante.
				• voto: es la opcion que el estudiante elija entre las dos plataformas.
				• votosAndroid: contador de los votos para esta plataforma.
				• votosiOS: contador de votos para la plataforma iOS.
				• seguir: variable para controlar si se desea ingresar un nuevo voto
			 

			Propuesta 1 Realizada 100% x mi: 

			sOpertativo 

				//Se va a determinar mediante votacion de usuarios cual sistema operativo se usara y se dara un informe al final de ello 

				var 
				entero votosAndroid, votosiOS,  
				caracter seguir, voto
				cadena codigo

				//Se inicializan los contadores 

				votosAndroid = 0
				votosiOS = 0

				//Se condiciona ciclo externo 

				Mientras (seguir == 'S' O seguir == 's')

					//Se solcitan datos 

					imprimir ( "Ingrese el codigo de estudiante ")
					leer ( codigo )
					imprimir ( "¿Cual es su voto [a] para android, [i] para Ios u otro?" )
					leer ( voto )

					 Segun ( voto )
					 	caso ' A ':
						caso ' a ': votosAndroid = votosAndroid + 1
						FinCaso

						caso ' I ':
						caso ' i ': votosiOS = votosiOS + 1 
						FinCaso 

						EnOtroCaso:
							imprimir ( "La opcion ingresada no es valida" )
						FinCaso
					FinSegun

					imprimir ( " Desea continuar con otro voto [S] O [N]: ")
					leer ( seguir )

				FinMientras
					
					//Da los votos ingresados

					imprimir ( "La cantidad de votos de Android es de: " votosAndroid)
					imprimir ( "La cantidad de votos de Ios es de: " votosiOS)

					//Decision del ganador 

					SI ( votosAndroid > votosiOS ) Entonces
							imprimir ( "Android gano!!" )
						SINO
							SI ( votosAndroid < votosiOS ) Entonces
							 		imprimir ( "Ios gano!!" )
								SINO 
									imprimir ( "Hay empate" )
							FinSI
					FinSI
			Fin sOpertativo
		
		Propuesta 2 Utilizando MientrasQue

		Algoritmo Plataformas
			// Declaracion de variables 
			Caracter seguir, voto
			Cadena codigo
			Entero votosAndroid, votosiOS

			// Se inicializan los contadores en 0
			votosAndroid = 0
			votosiOS = 0

			 // Proceso de solicitud y conteo de votos
			 Haga
			 	imprimir( "Ingrese el codigo del estudiante: " )
			 	leer( codigo )

			 	imprimir( "PLATAFORMAS DISPONIBLES" )
			 	imprimir( "[A]Android" )
			 	imprimir( "[i]OS" )
			 	imprimir( "Elija su opcion: " )
			 	leer( voto )

			 	Segun( voto )
			 		Caso ’A’:
			 		Caso ’a’: votosAndroid = votosAndroid + 1
			 		FinCaso
			 		Caso ’I’:
			 		Caso ’i’: votosiOS = votosiOS + 1
			 		FinCaso
			 		EnOtroCaso: imprimir( "La opcion no es valida" )
			 	FinSegun

			 	imprimir( "Desea realizar un nuevo voto [S] [N]?: " )
			 	leer( seguir )
			 MientrasQue ( seguir == ’S’ O seguir == ’s’ )

			// Se informa la cantidad de votos para cada plataforma
			imprimir( "Votos por Android:", votosAndroid )
			imprimir( "Votos por iOS: ", votosiOS )

			 // Se toma la decision de cu  al fue la m  as votada 
			 Si( votosAndroid > votosiOS ) Entonces
				 imprima( "Android gano" )
			 	SiNo
					Si(votosAndroid < votosiOS ) Entonces
		 			imprimir( "iOS gano" )
			 			SiNo
		 				imprimir( "Hay empate" )
			 		FinSi
			 FinSi
		 FinAlgoritmo

La instruccion Haga indica el inicio del proceso repetitivo, de acuerdo a la operatividad de este ciclo se ejecuta su cuerpo por lo menos una vez
Dicho cuerpo contiene las instrucciones para leer el codigo del estudiante, ası como su eleccion de la plataforma

A diferencia de los algoritmos que se realizaron, en el apartado anterior, con el ciclo Mientras-FinMientras, en esta solucion no fue necesaria
la inicializacion de la variable seguir antes de entrar al ciclo. El valor que toma esta variable para poder evaluar la condicion del MientrasQue, es ingresado por el usuario (leer( seguir )).
Una vez se obtenga la respuesta a la anterior pregunta, se evalua la condicion:
 MientrasQue( seguir == ’S’ O seguir == ’s’ )
Si la condicion es verdadera, se regresa el control a la instruccion Haga y una vez mas se repite el proceso. Cuando la condicion sea falsa, se
termina el ciclo y se continua con la instruccion que esta escrita debajo del MientrasQue.


EJERCICIO 4.11. 	
			
			El factorial de un  , es el producto obtenido al multiplicar un   dado por todos los enteros positivos sucesivos
			inferiores. Ademas, se tiene establecido que los  s negativos no poseen factorial y que el factorial de 0 es 1. El factorial se representa
			con un signo de exclamacion precedido de un   (n!).
				Por ejemplo:
				7! = 7 ∗ 6 ∗ 5 ∗ 4 ∗ 3 ∗ 2 ∗ 1 = 5040
				o se puede expresar como:
				7! = 1 ∗ 2 ∗ 3 ∗ 4 ∗ 5 ∗ 6 ∗ 7 = 5040.
			A 7! se le denomina 7 factorial, tambien es llamado el factorial de 7. Teniendo en cuenta el anterior contexto, diseñe un algoritmo que calcule el factorial de un   entero.

		ANALISIS: 

			Resultados esperados: factorial calculado o un mensaje que informe que los  s negativos no poseen factorial.

			Datos disponibles: Se le solicitara al usuario el   a calcular su factorial 

			Proceso: 
			se debe leer el   de entrada. Seguidamente se debe tomar una decision para determinar si se hace el calculo del factorial o se informa que es un   negativo y no posee factorial.
			se requiere el uso de una estructura de repeticion que se ejecute mientras que un contador que inicie en 1 llegue hasta el valor
			del   al cual se le calculara el factorial.

			Variables requeridas: 
				•  :   al cual se le calculara el factorial (n).
				• factorial: resultado del calculo del factorial (n!).
				• inferiores: variable que almacenara los valores desde 1 hasta el   al cual se le calculara el factorial. Hara parte de la condicion que controlara el ciclo que realizara el calculo.
			 

		Propuesta 1: 
		
		factorial  
			
			var 
			entero num, factorial, inferiores

			imprimir ( "Ingrese el   a calcular factorial: " )
			leer (num)
			 
			 Si ( num < 0 ) Entonces
			 imprimir ( "no se puede calcular el factorial, el   es menor a cero" )
			 	Sino 
					//Se incializan contadores 
					factorial = 1
					inferiores = 1

					Haga
						factorial = factorial * inferiores
						inferiores = inferiores + 1 
					MientrasQue ( inferiores <= num )

					imprimir ( "el   factorial es: " factorial )
			FinSI
		Fin factorial 
		
Dentro del cuerpo del ciclo, el acumulador factorial, se incrementa
mediante multiplicaciones sucesivas, razon por la cual se inicializo en 1. Hay que tener especial cuidado en este valor inicial, si se establece en 0, todos los calculos van a dar 0
En cada iteracion del Haga, se va calculando el factorial mediante la expresion factorial = factorial * inferiores.
En la variable inferiores se generan todos los  s inferiores que son multiplicados para obtener el factorial. Las iteraciones se
ejecutan mientras el contenido de inferiores sea menor o igual a   (MientrasQue(inferiores <=  )

					


EJERCICIO 4.12. 	e requiere una solucion algorıtmica que resuelva la
siguiente expresion matematica:
expresion (ver en libro pag 248)
Donde n es la cantidad de terminos a calcular

		ANALISIS: 

			Resultados esperados: el calculo de la expresion

			Datos disponibles: el valor de la constante x y la cantidad de terminos de (n) 

			Proceso: 
			Inicialmente se debe obtener el valor para x y el valor para n.
			Para el calculo se requiere un proceso repetitivo que vaya generando y acumulando el valor de los terminos. El primer termino es el 1, los
			siguientes estan conformados por una division donde el numerador es la constante x elevada a un exponente; dicho exponente inicia en 2 y
			va incrementado su valor de 1 en 1 hasta llegar a n. El denominador tiene la caracterıstica de ser el factorial de los valores pares en forma
			creciente y consecutiva; inicia con un valor de 2 en el segundo termino de la expresion y va hasta 2(n − 1). Para el calculo del factorial
			se requiere de otro proceso repetitivo, igual al que se explico en el Ejemplo 4.11. De acuerdo a lo anterior, en la solucion planteada para
			resolver la expresion se deben trabajar dos ciclos anidados. Otro aspecto importante que requiere analisis dentro de la expresion,
			es el hecho de que esta conformada por sumas y restas sucesivas de manera alterna; a partir del segundo termino, donde el exponente de
			x sea un   par se debe sumar y donde sea impar se debe restar.


			Variables requeridas: 
				• x: representa la constante de la expresion. Cuando se le da la denominacion de constante, no se refiere a la clasificacion de los
					 datos usados en los algoritmos, sino a que dentro de la expresion de este problema va a tener un valor constante. Para la solucion
					 algorıtmica que se va a plantear, es una variable que toma un valor diferente cada que se ejecute.

				• n: almacena la cantidad de terminos que tendra la expresion. 
				
				• contadorTerminos: esta variable tendra tres papeles fundamentales en la solucion. Primero servira para contar la cantidad de terminos 
						            que se van generando dentro de la expresion, segundo hara parte de la condicion que contralara la cantidad de veces que se debe repetir
				           		    el ciclo externo y tercerose usara como el exponente al cual se elevara la constante x.

				• inferiores: variable que almacenara los valores desde 1 hasta el valor del denominador en cada uno de los terminos. Se usara
							  en la condicion que controlara el ciclo con el cual se calculara el factorial del denominador.

				• denominador: en esta variable se almacenara el denominador que se va generando para cada termino de la expresion, tomara
							   valores pares consecutivos iniciando desde 2. Su proposito es hacer parte de la condicion del ciclo que calculara su factorial.

				• factorial: acumula el factorial que se le calcule al denominador de la expresion.

				• expresion: en este acumulador se guardara el valor del calculo de la expresion. Tiene la caracterıstica que sufre incrementos y 
							 decrementos de acuerdo al valor del exponente de la constante x.


			 

			Propuesta 1 EjemploLibro: 

			Algoritmo ExpresionMatematica

			// Declaracion de variables 
			Entero x, n, contadorTerminos, inferiores,
			denominador,factorial
			Real expresion

			// Datos disponibles
			imprimir( "Ingrese el valor para x: " )
			leer( x )
			 imprimir( "Ingrese la cantidad de terminos (n): " )
			 leer( n )
			
			 // Proceso
			 expresion = 1
			 contadorTerminos = 2
			 denominador = 2
			
			 // Ciclo externo
			 Haga
			 	factorial = 1
			 	inferiores = 1
			
			 	// Ciclo interno
			 	Haga
			 		factorial = factorial * inferiores
			 		inferiores = inferiores + 1
			
			 	MientrasQue( inferiores <= denominador )
			
			 	// Final del ciclo interno
			
				denominador = denominador + 2
			
			 Si( (contadorTerminos % 2) == 0 ) Entonces
			 	expresion = expresionˆ(x+contadorTerminos)/factorial
			 SiNo
			 	expresion = expresionˆ(x-contadorTerminos)/factorial
			 FinSi
			
			 contadorTerminos = contadorTerminos + 1
			
			 MientrasQue( contadorTerminos <= n )
			 // Final del ciclo externo
			
			 imprimir( "El valor de la expresion es: ", expresion )
			 FinAlgoritmo

El ciclo Haga-MientrasQue se suele usar en procesos de validacion de datos de entrada, en donde
se condiciona a que el usuario ingrese datos de acuerdo a los valores establecidos en los requisitos del problema

Validacion de datos de entrada
¿Que pasa con datos de entreada incorrectos?
Lo ideal, aparte de informar la situacion, es que el algoritmo este diseñado de tal forma que no se puedan hacer entradas con datos errados.


El ciclo Haga-MientrasQue es la estructura ideal para validar que las entradas sean correctas 
para hacer este proceso, debido a que primero ejecuta el cuerpo de ciclo y luego revisa la condicion.
		
		Se plantea entonces que, para estas validaciones se sigan estos pasos:
			1. Pedir el dato
			2. Escribir la instruccion Haga
			3. Leer el dato
			4. Escribir la instruccion MientrasQue y su condicion.


Ejemplo de validacion de un valor numerico en un rango

Ejemplo de validacion de un valor numerico en un rango
1 imprimir( "Ingrese la edad (entre 18 y 90 años): " )
2 Haga
3  leer( edad )
4 MientrasQue( edad < 18 O edad > 90 )

e se encuentra la condicion MientrasQue (edad < 18 O edad > 90), utilizada para validar que la entrada del valor este entre 18
y 90. Las validaciones para este tipo de dato se hacen teniendo en cuenta que solo se van a ingresar  s pertenecientes a un rango de valores.
Suponga que como dato de entrada proporcionan una edad de 15 años, entonces la variable edad almacena este valor, al evaluar la condicion se
tiene que:
			edad < 18 	O 	edad > 90
			15 < 18 	O 	15 > 90
			Verdadero 	O 	Falso
			Verdadero

Como el resultado final de la condicion es verdadero, el ciclo se repite, solicitando nuevamente el valor de la edad, y ası hasta que el usuario ingrese
un valor valido (entre 18 y 90).

Ejemplos de validacion de datos con MientrasQue 


	*Validacion de un valor inferior*

Puede suceder que solamente se requiera solo uno de los valores, por ejemplo, si el problema establece que se va a trabajar como
dato de entrada un valor positivo (no incluido el cero), sin importar el tope superior, la validacion puede expresarse como se muestra en el segmento

1 imprimir( "Ingrese un valor numerico: " )
2 Haga
3 	leer( valor )
4 MientrasQue( valor < 1 )


La validacion de los datos de tipo Caracter, se deben tener en cuenta, por separado, cada uno de los valores (caracteres) 

	*Validacion de un Caracter*

1 imprimir ( "Ingrese una letra: " )
2 Haga
3 	leer( letra )
4 MientrasQue( letra != ’letra1’ Y letra != ’letra2’ )


Por ejemplo, suponga que se desea validar que el usuario ingrese la letra
’S’ o ’N’ tanto mayusculas como minusculas, entonces se puede proceder como se muestra

	*Ejemplo de validacion de un Caracter*

1 imprimir ( "Desea continuar [S] o [N]: " )
2 Haga
3 	leer( seguir )
4 MientrasQue( seguir != ’S’ Y seguir != ’s’ Y
5 			 seguir != ’N’ Y seguir != ’n’ )


	*Validacion de un Cadena*

Generalmente la validacion se enfoca a que no se reciban valores vacıos

1 imprimir ( "Ingrese una cadena: " )
2 Haga
3 	leer( cadena )
4 MientrasQue( longitud ( cadena ) == 0 )


Por ejemplo, para validar que en la solicitud de un nombre no se omita el dato

Validacion de un nombre
1 imprimir ( "Ingrese su nombre: " )
2 Haga
3 	leer( nombre )
4 MientrasQue( longitud ( nombre ) == 0 )



Para evitar que las variables de este tipo de dato queden en blanco, una de las formas es trabajar con la funcion longitud, cuyo proposito
es medir la cantidad de caracteres almacenados dentro de una variable de tipo Cadena

La expresion relacional MientrasQue(Longitud(nombre )==0), evalua si la longitud del dato que almacene la variable nombre es igual a
0. Si el resultado es verdadero, significa que se esta frente a un dato vacıo, en consecuencia, el ciclo debe repetirse para leer nuevamente la variable
nombre. Esta condicion tomara el valor de falso en el momento que ingresen un nombre, mınimo de 1 caracter

Se puede determinar un minimo a que sea un   determinado de caracteres 

MientrasQue ( logitud (nombre) < 3 )

De igual manera se puede establecer la cantidad maxima y minima de caracteres en un nombre 

MientrasQue ( longitud ( nombre ) == 0 ) o logitud ( nombre ) > 15 )

validar si el contenido de la cadena corresponde o no a ciertos valores

	*Ejemplo de validacion del contenido de una Caracter*

1 imprimir( "Ingrese una cadena: " )
2 Haga
3 	leer( cadena )
4 MientrasQue( cadena != "texto1" Y cadena != "texto2" )



EJERCICIO 4.13. 	
El metodo de multiplicacion de los campesinos rusos, consiste en tomar los dos factores de la operacion (multiplicando y
multiplicador) y disponerlos cada uno en una columna. El primer factor se va multiplicando sucesivamente por 2, simultaneamente en la segunda
columna al segundo factor se le van aplicando divisiones enteras entre 2. Estas operaciones se realizan hasta que el segundo factor llegue a 1. El
siguiente paso es sumar todos los  s de la primera columna que esten al frente de un   impar de la segunda columna. El resultado que se
obtenga es el producto de los dos  s

		ANALISIS: 

			Resultados esperados:  producto de dos  s enteros.

			Datos disponibles: multiplicando y multiplicador

			Proceso:  
				Se hace la lectura del multiplicando y del multiplicador, teniendo en cuenta que sus valores deben estar entre 0 y 1000011.
				Una vez se tengan los valores de entrada, se implementara un proceso repetitivo en donde en cada iteracion se multiplique por 2 el primer
				factor o multiplicando; de manera simultanea se realizan divisiones enteras, entre 2, del segundo factor o multiplicador. En cada vuelta
				del ciclo se debe analizar si cada uno de los valores que va tomando el segundo factor es impar y ası proceder a hacer la acumulacion del
				primer factor. Este proceso iterativo terminara en el momento que las divisiones del segundo factor lo lleven a un valor de 1.

			Variables requeridas: 
				• multiplicando y multiplicador: datos de entrada para calcular el producto.
				• factor1 y factor2: almacenaran una copia del valor original del multiplicando y del multiplicador.
				• producto: resultado esperado que se obtendra de la acumulacion sucesiva de los valores del primer factor.

			Propuesta 1: 
			
			//campesionosRusos

					var 
					entero multiplicando, multiplicador, factor1, factor2, producto

				//validacionEntradaDatos

					imprimir ( "Ingrese el valor del multiplicando: " ) // Se condiciona la entrada del dato
					Haga
						leer (multiplicando)
						leer (multiplicador)

					MientrasQue ( multiplicando < 0 O multiplicando > 1000011) 


					imprimir ( "Ingrese el valor del multiplicador: " )
					Haga
						leer (multiplicador)
					MientrasQue ( multiplicador < 0 O multiplicador > 1000011)

				//copiaValores

					factor1 = multiplicando
					factor2 = multiplicador 
					producto = 0		//Se inicializa acululador 

				//Proceso 

					Haga

						Si  ( factor2 % 2 != 0 ) Entonces	//Se determina si la estructura es impar 
							producto = producto + factor1  //Se hace el incremento 
						FinSi

						factor1 = factor1 * 2 //Se duplica factor1
						factor2 = factor2 / 2 //Se divide factor2 entre 2

					MientrasQue ( factor2 >= 1 ) //Todo se repite mientra  el valor de factor2 no haya tomado el valor de 0 

				//Resultados 
					imprimir ( "Producto de ", multiplicando,
								" x ", multiplicador, " = ", producto )
						

EJERCICIO 4.14.  Diseñe un algoritmo, que simule una calculadora con las 4 operaciones basicas (suma, resta, division y multiplicacion). Las
                 operaciones deben realizarse a medida que se van ingresando los datos, de igual forma se debe ir mostrando el resultado parcial. Se terminara de
                 hacer operaciones en el momento que se presione el signo igual (=).


		ANALISIS: 

			Resultados esperados: calculo de todas las operaciones realizadas.
                                  Aunque el enunciado no lo dice, se debe contemplar la posibilidad de que el usuario trate de dividir entre 0, si se detecta esta situacion, el
                                  algoritmo debera informarla y terminar su ejecucion.

			Datos disponibles:  s a calcular, operadores basicos (’+’, ’-’ ,’/’ y ’*’) y el signo ’=’ para terminar la ejecucion.

			Proceso: se solicita un   inicial, luego uno de los operadores basicos o el signo ’=’. Si el valor digitado no es el signo ’=’, se
                     solicitara un segundo  ; dependiendo del operador se ejecuta el respectivo calculo, informando el resultado parcial. Todo esto se
                     hace en un proceso repetitivo mientras no se presione el signo ’=’ o se trate de dividir entre 0.

			Variables requeridas: 
                            •  : esta variable almacena el   o los  s que intervienen en las operaciones.
                            • calculo: es el acumulador de los resultados de todas las operaciones.
                            • operador: guarda el operador o el signo ’=’ que ingrese el usuario.
                            • bandera: en el caso que se trate de dividir entre 0, tomara el valor de Falso y se mostrara un mensaje de error sin el resultado de los calculos; si la terminacion del algoritmo se hace
                                       de forma normal, su valor sera Verdadero y se imprimira el resultado de las operaciones
			 

			Propuesta 1: 

         cicloCalculadora 

            // declaracionVariables 
            entero   calculo 
            cadena operador 
            logico bandera

            //Se vaida parametro de entrada 
            imprimir ( "Digite un nuemero: " )

            Haga 
                leer (  )
            MientrasQue (   < -2000000 O   > 2000000 )

            // inicializacion 

            calculo =   
            bandera = verdadero

            // procesoRepetitivo ( ciclo operador condicionado un solo operador )

            Haga  
                imprimir ( "Digite un operador: " )
                Haga    
                    leer ( operador )

            MientrasQue ( operador != ’+’ Y operador != ’-’ Y 
                          operador != ’*’ Y operador != ’/’ Y
                          operador != ’=’ )

            //Se valida entrada de otro valor 

            Si ( operador != ' = ') Etonces 
                imprimir ( " Ingrese otro  : " )

                Haga 
                     imprimir (   )  //Se va mostrando 
                
                MientrasQue (   < -2000000 O   > 2000000 )
                
                Segun ( operador ) 
                    caso '+': calculo = calculo +   
                              FinCaso
                    caso '-': calculo = calculo -   
                              FinCaso
                    caso '*': calulo = calculo *    
                              FinCaso
                    caso '/': Si 
                                (   == 0 ) Entonces 
                                imprimir ( "Error, division entre cero." )
                                bandera = Falso //Se cambia el estado 
                              SiNo
                                calculo = calculo /   
                              FinSI
                              FinCaso
                FinSegun
            FinSi

            Si ( bandera ) Entonces 
                imprimir  ( calculo )
            FinSI

            MientrasQue ( != '=' )
        Fin cicloCalculadora
        


EJERCICIO 4.15. 	Construya un algoritmo que acepte como dato de entrada un   entero positivo e informe se es o no un   perfecto. El algoritmo debe
					ejecutarse hasta que el usuario determine lo contrario.


		ANALISIS: 

			Resultados esperados: Mensaje que indique si el   es primo o no 

			Datos disponibles: un   entero positivo

			Proceso: Se debe de condicionar que el   sea positivo, valores mayores a 1 
					 Debe de tener un proceso repetitivo que determine si cada uno de los  s menores a el es su divisor. Si un   es divisor de otro al dividir 
					 el mayor entre el menor se obtiene una division exacta, el residuo es cero  1 %  2 = 0
					 Si se cumple con lo anterior se procede a incrementar un acumulador donde se sumaran todos los  s que sean divisores del   ingresado 
					 Una vez terminado el proceso ciclico se va a determinar si la sumatoria es igual al  , en cuyo caso se informara que si es un   perfecto o que no de caso contrario 
					 Todo el proceso va anidado dento de otro ciclo que permita ejecutarse hasta que el usuario no desee ingresar mas  s 

			Variables requeridas: 
				•  : almacena el dato que ingresara al algoritmo.
				•  Menor: en esta variable se generaran todos los  s menores al   ingresado, con el fin de comprobar si son sus divisores.
				• sumaDivisores: acumulador de la suma de los divisores del   ingresado.
				• seguir: almacenara la respuesta si desea o no continuar con la ejecucion del algoritmo.

			 

			Propuesta 1:
		 Perfecto 

			//var 
			entero  ,  Menor, sumaDivisores
			caracter seguir 


			//inicializacion de ciclo de centinela

			seguir = s

			//Inicializar ciclo externo 

			Mientras ( seguir == S O seguir == s ) 

				//Entrada dato 
					imprimir  ( "Ingrese un   positivo: " ) 
					Haga
						leer (   )
					MientrasQue (   > 1 ) //Valida solo positivos 

				//Se inicializan variables 

				sumaDivisores = 0
				 Menor = 1

				Haga 
					Si (   %  Menor == 0 ) Entonces		// Calcula el resto de la division entre el   y cada uno de los   menores a el 
																	// el resultado se compara con cero. SI es verdadero, es division exacta y se procede a acumular su valor en sumaDivisores
						sumaDivisores = sumaDivisores +  Menor  // acumular la suma de sus divisores propios
					FinSI

					 Menor =   + 1						//Incremento de la variable menor 
				MientrasQue (  Menor <   )				//Determina si se ejecuta otra vez o se termina el ciclo 

				//Resultados esperados 

				Si ( sumaDivisores ==   Y   != 1 ) Entonces  //se evalua la decision para determinar si el   es perfecto o no
					imprimir (  , "el   es perfecto" )
				Sino
					imprimir  (  , "no es perfecto" )
				FinSI

				imprimir ( "¿Desea continuar? [S]	[N]" )

				Haga 
					leer ( seguir )
				MientrasQue ( seguir != S Y seguir != N  Y 		//valida que la variable seguir, reciba como dato de entrada uno de los siguientes caracteres: ’S’, ’N’, ’s’ o ’n’.
							  seguir != s Y seguir != n )	
			FinMientras 										// regresa el control del algoritmo al Mientras

		Fin  Perfecto


##  Validar dudas del uso de != ya que puede haber errores  ##
##	Ver pruebas de escritorio de la pagina 268 hasta la 271 ##


4.4. Estructura de repeticion Para-FinPara

Esta estructura es un ciclo que se condiciona al inicio. 
Puede sucuder que el cuerpo del ciclo no llegue a ejecutarse cuando al evaludar por priumera vez su condifion resulte falsa 
No habra una instruccion modificacora de condicion dentro de ellas 


		Algoritmo 4.29: Forma general (incremento) - Para-FinPara

		1 Instruccion de inicializacion
		2 Para var = valor1 Hasta valor2 Incremento valor3
		3 	Instruccion-1
		4 	Instruccion-2
		5 	... /* Cuerpo del ciclo */
		6 	Instruccion-n
		7 FinPara
		8 Instruccion externa

		Algoritmo 4.30: Forma general (decremento)- Para-FinPara

		1 Instruccion de inicializacion
		2 Para var = valor1 Hasta valor2 Decremento valor3
		3 	Instruccion-1
		4 	Instruccion-2
		5 	... /* Cuerpo del ciclo */
		6 	Instruccion-n
		7 FinPara
		8 Instruccion externa

Las anteriores formas generales se interpretan ası:
La Instruccion de inicializacion se usa para dar un valor inicial a los contadores o acumuladores que se modificaran dentro del ciclo. En el caso
de no tener este tipo de variables, no es necesario su uso.

Se queda apunte en pagina 273


EJERCICIO 4.19. 	
		Construya un algoritmo que imprima tres columnas de  s, conforme a la Tabla 4.11, en donde el valor de n sera
		proporcionado por el usuario.
							1 1 2
							2 4 6
							3 9 12
							4 16 20
							5 25 30
							. . . . . . . . .
							n . . . . . .

		ANALISIS: 

			Resultados esperados: Se espera que se genera la cantidad de terminos ingresados 

			Datos disponibles: Se le solicitara al usuario que ingrese la cantidad de terminos a generar 

			Proceso: La cantidad de terminos a generar va a determinar cuantas veces se repite el ciclo y se procedera a generar la Tabla
					
			Variables requeridas: 
			 : esta variable tendra la funcion de ir almacenando los  s desde 1 hasta la cantidad que se especifique; con ella
					se calculara el cuadrado y la suma que se requiere para generar los  s de la tabla del enunciado
			cantidad s: : indicara el total de filas o  s que tendra la tabla (n)
			 

		Propuesta 1: 

		generarTabla		

			imprimir  ( "Ingrese la cantidad de   a generar: " )
			Haga
				leer ( cantidad s )
			MientrasQue ( cantidad s < 0 )

			Para   = 1 Hasta cantidad s Incremento  1
				imprimir (  , " ",
						     *  , " ",
						     +   *   
							)
			FinPara
		
		Fin generarTabla


EJERCICIO 4.20. 	Diseñe un algoritmo que permita calcular la siguiente

								funcion: f(x) = x ^ 3 + x ^ 2 − 5

					Para x con valores desde 0 hasta n, con incrementos de a 2.

		ANALISIS: 

			Resultados esperados: cada uno de los valores que va tomando x, con el respectivo resultado del calculo de la funcion

			Datos disponibles: n ( valor maximo que tomara x )

			Proceso: Se solicita el valor n (maximo que tendra x). Seguidamente se debe hacer el calculo de la funcion y la impresion
					 de los resultados esperados, todo esto en un proceso repetitivo donde x debe iniciar en 0 y llegar hasta el valor maximo (n) que indique el
					 usuario del algoritmo; en cada iteracion x debe incrementarse en 2 unidades
					 
			Variables requeridas: 
				valorX: Almacena el valor maximo que tomara x, este dato sera suministrado por el usuario del algoritmo ( representa la n )
				funcion: variable que almacenara el calculo de la funcion 
			 	x: actuara como la variable de control del ciclo, tomara valores entre 0 y n 

		Propuesta 1: 
	funcionX
		//Resuelve la ecuacion con incremento en 2	

		var  

		entero valorX, funcion, x

		imprimir ( "increse el valor maximo de x: " )
		Haga 
			leer ( valorX )
		MientrasQue ( valorX < 0 )

		Para x = 0 Hasta valorX Incremento 2			//inicializa a la variable x en 0 y la incrementa mientras sea menor o igual a valorX
			funcion = x ^ 3 + x ^ 2 - 5							//En cada iteracion del ciclo, se calcula la funcion y se imprime el resultado.
			imprimir  ( "Para x = ", x " f(x) = ", funcion )
		FinPara

	Fin funcionX



EJERCICIO 4.21.  Diseñe un algoritmo que genere e imprima los codigos ASCII desde el 32 al 255, en su representacion numerica decimal
				 y su caracter equivalente. Deben imprimirse en orden inverso.

		ANALISIS: 

			Resultados esperados:a

			Datos disponibles: Listado de codigo ASCII desde el 255 hasta el 32 

			Proceso: Se requiere de un ciclo, que sea controlado a traves de una variable inicializada en 255; debe disminuir de 1 en 1 y mientras llega a 32, debe generar e imprimir los codigos ASCII

			Variables requeridas: 
			decimal: tendra la funcion de ser la variable de control del ciclo. Tomara el valor inicial de 255 e ira decrementando en 1  unidad. Estos valores son la representacion numerica en decimal de cada uno de los codigos.
			ascii: almacenara el caracter correspondiente a cada uno de los codigos numericos decimales.

			 

		Propuesta 1: 
		//Se va realizar la impresion de los caracteres ASCII

		codigos 

			var 
			entero decimal 
			caracter ascci 

			Para decimal = 255 Hasta 32 Decremento 1
				ascci = decimal
				imprimir  ( decimal, " = ", ascci)
			FinPara
		

***	EXPLICACION	***

--No hay entrada de datos, por lo tanto, este algoritmo tiene una funcion especıfica y unica, siempre que se ejecute mostrara el mismo resultado.

--Se encuentra esta asignacion: ascii = decimal. La variable ascii es de tipo Caracter y la variable decimal es de tipo Entero

--Internamente la computadora realiza la conversion entre los tipos de datos; para este caso convierte el valor numerico decimal, en su correspondiente dato de tipo Caracter.

--Luego de la impresion, el codigo FinPara indica el final del ciclo, el control regresa al codigo Para (lınea 7) y la variable decimal decrementa su valor en 1 unidad 
y una vez mas se vuelve a evaluar la condicion implıcita, si el valor de decimal es mayor o igual a 32, el ciclo vuelve a iterar


EJERCICIO 4.22. 	
								Elabore un algoritmo, que genere e imprima las letras del
								abecedario de la siguiente forma:
								Z
								Z Y
								Z Y X
								Z Y X W
								Z Y X W V
								Z Y X W V U
								Z Y X W V U T
								Z Y X W V U T S
								Z Y X W V U T S R
								Z Y X W V U T S R Q
								Z Y X W V U T S R Q P
								Z Y X W V U T S R Q P O
								Z Y X W V U T S R Q P O N
								Z Y X W V U T S R Q P O N M
								Z Y X W V U T S R Q P O N M L
								Z Y X W V U T S R Q P O N M L K
								Z Y X W V U T S R Q P O N M L K J
								Z Y X W V U T S R Q P O N M L K J I
								Z Y X W V U T S R Q P O N M L K J I H
								Z Y X W V U T S R Q P O N M L K J I H G
								Z Y X W V U T S R Q P O N M L K J I H G F
								Z Y X W V U T S R Q P O N M L K J I H G F E
								Z Y X W V U T S R Q P O N M L K J I H G F E D
								Z Y X W V U T S R Q P O N M L K J I H G F E D C
								Z Y X W V U T S R Q P O N M L K J I H G F E D C B
								Z Y X W V U T S R Q P O N M L K J I H G F E D C B A

		ANALISIS: 

			Resultados esperados: imprimir  las letras del abecedario conforme a lo solicitado 

			Datos disponibles: No hay entreda de datos 

			Proceso: 
					Se requiere imprimir el alfabeto en orden descendente, de la Z a la A.  en cada nueva fila se imprime una letra mas. 
					La impresion termina cuando se complete todo el alfabeto.
					El proceso requiere  de dos ciclos anidados. El interno imprimira las letras de cada fila, mientras el externo permitira el avance de las filas. 



			Variables requeridas: 
			letraFila: controla el ciclo externo. Con esta variable se podra tener control para el avance de las filas.
			letra: variable de control del ciclo interno. Almacenara las letras que se van imprimiendo en cada fila.

	Propuesta 1: 
	abecedarioDecremento
		//Se imprimira el abecedario de manenera descendente

		var
		caracter letraFila, letra 

		Para letraFila = ' Z ' Hasta ' A ' Decremento 1				//Ciclo EXTERNO permite el avance de las filas  
			Para letra = ' Z ' Hasta letraFila Decremento 1 		//Ciclo INTERNO imprime las letras de cada fila 

				 imprimir ( " ", letra )
			FinPara
			\n  		//Se usa saldo de linea 
		FinPara

	Fin abecedarioDecremento



	******		ACLARACION 		******
	1. letraFila = Z
	2. letraFila = ’Z’ 

En la expresion   1, se esta trabajando con dos variables que deben estar declaradas. En la variable letraFila se almacena el valor de la variable Z

En la expresion   2, se trata de una variable y un dato, en este caso solamente la variable letraFila debe estar declarada. El caracter o letra ’Z’ se almacena en la variable letraFila.
En el caso de este ejemplo, la expresion 2 es la que se codifico en los dos ciclos Para


***	EXPLICACION	***
iable letraFila con la letra ’Z’ y en cada iteracion va decrementando en una letra hasta llegar a la ’A’. Cada que entra al cuerpo del ciclo ejecuta el Para interno, este inicializa su variable
de control en ’Z’ (letra = ’Z’) y en cada iteracion la decrementa hasta alcanzar el valor de letraFila. Cada que se ejecuta el ciclo interno, se imprime el valor de la variable letra; en la primera iteracion imprime la
letra ’Z’, luego de que este ciclo termina su ejecucion debe producirse un salto de lınea, es decir, se pasa al siguiente renglon para volver a iniciar la impresion.



EJERCICIO 4.23.  Construya una solucion algorıtmica que simule el comportamiento de un reloj digital para un dıa; con horas, minutos y
				 Segundos. Debe trabajarse con un formato de 24 horas.

		ANALISIS: 

			Resultados esperados: mostrar la simulacion de un reloj digital en un formato de 24 horas: HH:MM:SS.

			Datos disponibles: para este ejemplo no se requiere que sea ingresado ningun valor. Sin embargo, es de conocimiento general que un minuto tiene 60 segundos y que una hora tiene 60 minuto

			Proceso: se deben diseñar 3 ciclos anidados. El externo controlara las horas, el del medio los minutos y el mas interno los segundos. 
			La hora debe iniciar desde 0 e ir hasta 23; los minutos y segundos iran desde 0 hasta 59, cada que uno de ellos llegue a 59 se cambiara a la hora o minuto siguiente, respectivamente.


			Variables requeridas: 
			• hora: sera el ındice para el ciclo externo, tomara valores entre 0 y 23.
			• minuto: almacena valores entre 0 y 59, esta variable controlara el ciclo del medio.
			• segundo: con valores entre 0 y 59, se usara para controlar el ciclo interno.
			 

			Propuesta 1: 

		relojDigital
				//Se tendra la simulacion de un relog digital de 24 HH:MM:SS

			var 
			entero hora, minuto, segundo

			Para Hora = 0 Hasta 23 Incremento + 1
				Para minuto = 0 Hasta 59 Incremento  + 1
					Para segundo = 0 Hasta 59 Incremento + 1

						imprimir ( hora ":", minuto, ":", segundo  )

					FinPara
				FinPara
			FinPara

		Fin relojDigital


Se deja apunte en pagina 294 ejercicio 4.24

EJERCICIO 4.24. 	
				Se requiere de un algoritmo que le permita a un niño repasar las tablas de multiplicar, del 1 al 20. El niño podra indicar que tabla
				desea repasar y el algoritmo empezara a preguntar los resultados, desde la fila uno hasta la fila 10; si la respuesta es correcta se mostrara un mensaje
				de felicitaciones, en caso contrario mostrara el resultado, acompañado de un mensaje que informe la situacion.
				Por cada tabla que el niño repase se debe dar una calificacion, de acuerdo al   de respuestas correctas (por cada respuesta correcta se asigna un punto), 
				basada en la escala de la Tabla 4.12.
									
									Aciertos Valoracion
									De 0 a 5 Insuficiente
									6 o 7 Aceptable
									8 o 9 Sobresaliente
									10 Excelente
									Tabla 4.12: Tabla de valoracion - Ejercicio 4.24
									El niño podra repasar la cantidad de veces que ası lo quiera

		ANALISIS: 

			Resultados esperados: un mensaje de acuerdo a la respuesta del niño y la calificacion  n obtenida en cada tabla.

			Datos disponibles: El   de la tabla que desea repasar 

			Proceso: Se requiere de dos procesos repetitivos anidados. El interno debe calcular la tabla que el niño solicite, desde la fila 1 hasta la fila 
					10. Igualmente, mostrara un mensaje de acuerdo a la respuesta del niño

			Variables requeridas: 
				• tabla: almacena el   de la tabla que el niño va a repasar.
				• contadorFilas: esta variable contar a las filas de cada tabla, tomar a valores entre 1 y 10.
				• producto: en esta variable se calcula el resultado de cada fila de la tabla.
				• respuesta: almacena la respuesta que ingrese el niño, como resultado de la multiplicacion  n.
				• aciertos: almacena la cuenta de las respuestas correctas.
				• desaciertos: contador para las respuestas incorrectas.
				• seguir: centinela para controlar el ciclo externo, recibir a la respuesta si se desea continuar o terminar con la ejecuci on del algoritmo.

			 

		Propuesta 1: 
		//Se van a generar un algoritmo que va a permitir repasar las tablas dando la candiad de respuestas buenas y malas con opcion de repasar nuevamente en caso de ser necesario

		generarTablas 
			var 
			entero tabla, contadorFilas, producto, aciertos, desaciertos, respuesta
			caracter seguir 

			//Se inicializan los contadores 

			//Se inicializa el ciclo externo 
			Mientras ( seguir = 'S' O seguir = 's' )
				imprimir  ( " ¿Cual es la tabla que va a estudiar? " )
				Haga 
					Leer ( tabla )

				MientrasQue ( tabla < 10 O tabla > 20 )

				//Se inicializan contadores 
				aciertos = 0 
				desaciertos = 0

				Para contadorFilas = 1 Hasta 10 Incremento + 1
					producto = tabla * contadorFilas
					imprimir ( "¿Cual es el resultado de: ", tabla " x ", contadorFilas )
					leer ( respuesta ) 

					Si ( respuesta == producto ) Entonces
						imprimir ( "Felicidades!" )
						aciertos = aciertos + 1

						Sino 
							 imprimir ( "lo siento, ese no es el resultado :( " )
							imprimir ( "la respuesta correcta es: ", producto )
							desaciertos = desaciertos + 1
					FinSi 
				FinPara

				 imprimir ( "Los aciertos son: ", aciertos )
				imprimir ( "Los desaciertos son: ", desaciertos )

				Si ( aciertos <= 5 ) 
					 imprimir ( "Son insuficientes" )
					Sino 
						Si ( aciertos <= 7 )
							imprimir ( " Son aceptables " )
						Sino 
							Si ( aciertos <= 9 )
								imprimir ( "Es sobresaliente" )
							Sino 
								imprimir ( "Es excelente" )
							FinSI
						FinSI
					FinSI
				FinSI
			
			imprimir ( "¿Desea volver a estudiar [S] o [N]?" )
			Haga 
				leer ( seguir )

			MientrasQue ( seguir != 'S' Y seguir != 'N' Y 
						  seguir != 's' Y seguir != 'n' )
			FinMientras
			
		Fin generarTabla

*****       Explicacion     *****
*****       Explicacion     *****

Se ocuparon las tres estrucutras de ciclos 
Mientras-FinMientras
MientrasQueHaga
Para-FinPara


Mientras-FinMientras proposito ejecutar repetidamente todo el proceso. Mientras el usuario responda con una letra 'S'
                     a la pregunta: "¿Desea volver a jugar [S] o [N]?:". Esta estructura repetitiva, es el ciclo externo en este Algoritmo

MientrasQueHaga  utiles en la validacion de la entrada de los datos se controla que se ingrese una tabla entre 1 y 20,
                 requisito que fue dado en el enunciado del problema.
            
                    10 imprimir( "Con cual tabla desea jugar?: " )
                    11 Haga
                    12  leer( tabla )
                    13 MientrasQue( tabla < 1 O tabla > 20 )

                 De igual forma, el ciclo se utilizo en la validacion de la lectura de la respuesta a la pregunta final, con la cual se controla 
                 que la variable seguir acepte unicamente la letra ’S’ o ’N’, bien sea en mayuscula o minuscula.

                    51 imprimir( "¿Desea volver a jugar [S] o [N]?: " )
                    52 Haga
                    53 leer( seguir )
                    54 MientrasQue( seguir != ’S’ Y seguir != ’N’ Y
                    55 seguir != ’s’ Y seguir != ’n’ 

Para-FinPara proposito: calcular la tabla que seleccione el usuario y se incrementan aciertos y desaciertos
             En el cuerpo del ciclo Para se calcula la tabla, se le hace la pregunta al usuario sobre el resultado de la
             multiplicacion y se toma la decision si la respuesta fue acertada o no; en caso afirmativo se imprime un mensaje de “Felicitaciones” y se cuenta un
             acierto. En caso contrario se informa que esa no es la respuesta acertada, se da el resultado correcto y se incrementa el contador de desaciertos.

                    15 aciertos = 0
                    16 desaciertos = 0
                    17 Para contadorFilas = 1 Hasta 10 Incremento 1
                    18   producto = tabla * contadorFilas
                    19  
                    20   imprimir( "Escriba el resultado de ", tabla,
                    21   " x ", contadorFilas )
                    22   leer( respuesta )
                    23  
                    24  Si( respuesta == producto ) Entonces
                    25   imprimir( "Felicitaciones" )
                    26   aciertos = aciertos + 1
                    27  SiNo
                    28   imprimir( "Lo siento, ese no es el resultado" )
                    29   imprimir( "La respuesta correcta es: ", producto )
                    30   desaciertos = desaciertos + 1
                    31  FinSi
                    32 FinPara
    
            El proceso se ejecuta 10 veces, que equivalen al numero de filas de la tabla. Una vez el ciclo Para termine
            de iterar, se continua con la ejecucion del algoritmo en el ciclo externo, es decir, en el ciclo Mientras-FinMientras.

            Seguidamente se informan los aciertos y desaciertos.

            34 imprimir( "Aciertos: ", aciertos )
            35 imprimir( "Desaciertos: ", desaciertos )


            Se toma la decision para otorgar la calificacion, para ello se empleo un conjunto de decisiones
            anidadas, que son parte del cuerpo del ciclo externo del algoritmo.

                            Si ( aciertos <= 5 ) 
            					 imprimir ( "Son insuficientes" )
            					Sino 
            						Si ( aciertos <= 7 )
            							imprimir ( " Son aceptables " )
            						Sino 
            							Si ( aciertos <= 9 )
            								imprimir ( "Es sobresaliente" )
            							Sino 
            								imprimir ( "Es excelente" )
            							FinSI
            						FinSI
            					FinSI
            				FinSI

            Se preguna si se desea utilziar de nuevo el algortimo en un ciclio Mientras-FinMientras
             la respuesta es almacenada en la variable seguir; luego se encuentra el FinMientras y el control regresa al Mientras donde se evalua la condicion:

                            8 Mientras( seguir == ’S’ O seguir == ’s’ )

            Si el resultado es verdadero, se vuelve a ejecutar todo el proceso. El juego termina en el momento que el ni˜no responda con una letra ’N’, al
            cuestionamiento si desea volver a jugar


EJERCICIO 4.25. 	

Una Universidad esta interesada en tener una solucion algorıtmica que le permita conocer de sus estudiantes, de primer semestre que acaban de concluir el periodo academico, la siguiente informacion:
El mayor y el menor promedio general.Cantidad total de estudiantes que aprobaron y reprobaron, de igual forma, el total de los que quedaron en situacion condicional.
Porcentaje de estudiantes que quedaron excluidos por bajo rendimiento y tambien el porcentaje que aprobaron el periodo, con relacion al total de ellos.
Por cada grupo se requiere la cantidad de estudiantes que aprobaron y reprobaron el periodo. Los grupos son identificados como Grupo A, Grupo B, Grupo C y ası sucesivamente.
Finalmente, por cada estudiante se debe informar su nota definitiva acompañada de un mensaje que especifique su situacion academica. Dentro del reglamento estudiantil se tienen contemplados los siguientes
aspectos:
        1. Todo estudiante de primer semestre debe cursar 6 espacios academicos o materias.
        2. La nota mınima es de 0.0 y la nota maxima es de 5.0.
        3. Se considera que un espacio academico se aprueba si su nota definitiva es mayor o igual a 3.0.
        4. Un periodo academico se considera aprobado, si al promediar las notas definitivas de las 6 materias, se obtiene un resultado igual o superior a 3.0.
           Nota: si un estudiante es excluido por bajo rendimiento, se le considerara perdido el periodo, sin importar el promedio obtenido.
        5. Al finalizar el semestre, el estudiante sera clasificado en una de las siguientes situaciones academicas:
                a) Excluido por bajo rendimiento.
                b) Condicional.
                c) Continua de manera normal
        6. Un estudiante quedara excluido por bajo rendimiento, si cumple una o ambas de las siguientes condiciones:
                a) Si el promedio del periodo academico, es inferior a 2.0.
                b) Si pierde mas del 50 % de las materias cursadas.
        7. Se considera que un estudiante queda en situacion condicional, si no fue expulsado por bajo rendimiento y si obtuvo un promedio del
           periodo academico entre 2.0 y 2.9.
        8. Si el estudiante no presenta ninguna de las dos anteriores situaciones, se considera que continua de manera normal.

		ANALISIS: 

			Resultados esperados:

al analizar el enunciado, se evidencia que
se requiere informacion parcial y general. La informacion parcial, se puede dividir entre la informacion que se espera por cada estudiante
y la informacion de los grupos. La informacion general, se refiere a lo concerniente a todos los estudiantes de primer semestre.

• Por cada estudiante se requiere:
    ◦ Nota definitiva acompa˜nada de un mensaje que especifique su situacion academica.

• Por cada grupo de primer semestre, la Universidad necesita conocer:

    ◦ Cantidad de estudiantes que aprobaron el periodo.
    ◦ Cantidad de estudiantes que reprobaron el periodo.

• A nivel general, es decir, con relacion a todos los estudiantes procesados, la informacion que se solicita es:
    ◦ Mayor promedio.
    ◦ Menor promedio.
    ◦ Cantidad de estudiantes que aprobaron el periodo.
    ◦ Cantidad de estudiantes que reprobaron el periodo.
    ◦ Porcentaje de estudiantes que aprobaron el periodo, con relacion al total de ellos.
    ◦ Porcentaje de estudiantes excluidos con relacion al total.
    ◦ Cantidad de estudiantes que quedaron en situacion condicional.


			Datos disponibles: Se debe de conocer de cada estudiante el codigo, nombre, y la nota definitiva 
                               ( 0.0 y 5.0 ) de cada una de las seis materias 
                               
                               De los grupos se sabe que estan identificados con letras: Grupo A, Grupo B. . . , de igual forma el enunciado deja claro que los
                               estudiantes estan distribuidos en cada uno de los grupos.

                               Adicionalmente, a la informacion que se debe ingresar al algoritmo, el reglamento estudiantil da precision de varios aspectos que deben
                               ser tenidos en cuenta.

			Proceso: 
                con base a los resultados esperados, se evidencia que la informacion se debe presentar agrupada de la siguiente manera:
                1. Por estudiante.
                2. Por grupo.
                3. General, es decir, del total de los estudiantes.

                De cada estudiante se solicita informar el promedio del periodo y su situacion academica. Para calcular el promedio, se puede hacer de
                una de las siguientes dos formas: 

                    1. Se pueden definir 6 variables para almacenar la nota definitiva de cada materia, se calcula su sumatoria y luego su promedio.
                    2. Se define una sola variable para leer la nota definitiva de cada materia y mediante un ciclo que itere 6 veces se hace la lectura
                       y esta se va acumulando; una vez finalizado el ciclo se calcula el promedio.

                Se utilizara la segunda opcion 

                El
                ciclo al que se hace mencion en esta solucion, debera estar dentro de otro ciclo intermedio, que manejara la informacion correspondiente
                a los estudiantes y este a su vez estara anidado dentro de un ciclo externo que trabajara con la informacion de los grupos.

                VER DIAGRAMA PAGINA 305

                La zona denominada Inicializacion general, sera utilizada para inicializar las variables que vayan a intervenir en la condicion del ciclo
                externo, en el caso de ser necesarias para su ejecucion. Ası mismo, se inicializaran los contadores de los datos generales que solicitan, por
                ejemplo, el total de estudiantes, estudiantes en situacion condicional, los que aprobaron o reprobaron el promedio y los excluidos.

                la zona 1A, se deben inicializar los contadores que se incrementaran dentro del ciclo intermedio, ubicado en la Zona 1B.
                En estos contadores se almacenara la cantidad de estudiantes que aprobaron o reprobaron en cada uno de los grupos.

                La zona 1B, conformada por las zonas 2A, 2B y 3, estara ocupada por el ciclo intermedio que procesara los datos de los estudiantes;
                dentro de el, estara el ciclo mas interno (zona 3) que se encargara de la lectura de las 6 notas definitivas.

                a la zona 1C, en ella, se da la informacion que corresponde a los grupos, se incrementan
                algunos contadores generales y se incrementa la identificacion del grupo (Grupo A, Grupo B. . . )

                 En este ciclo se van a procesar los datos pertenecientes a cada estudiante.
                En la zona 2A, se solicitaran los datos que se tienen del estudiante: el codigo, el nombre y las notas

                 En la zona 2A tambien se deben inicializar el contador de materias reprobadas y el acumulador de la sumatoria de las notas definitivas, que servira para calcular el promedio del periodo

                 De acuerdo a las caracterısticas de este problema, se puede determinar que el ciclo externo y el intermedio pueden ser estructuras Mientras-FinMientras o Haga-MientrasQue, tenga presente
                que ambas operan de manera similar, la diferencia radica en que la primera se condiciona al inicio y la segunda al final. Para la solucion que se va a plantear, se elegira el Mientras-FinMientras para el
                ciclo externo y el Haga-MientrasQue para el intermedio; ambos ciclos se controlaran con una pregunta de continuar o no con la ejecucion. El ciclo interno, el que esta en la zona 3, se diseñara con
                una estructura Para-FinPara ya que es la mas indicada puesto que se conoce que debe iterar un numero definido de veces 


			Variables requeridas: 

            • Para los estudiantes:
            
                ◦ codigo: identificacion de cada estudiante.
                ◦ nombre: nombre del estudiante.
                ◦ definitiva: nota definitiva obtenida en cada materia.
                ◦ sumaDefinitivas: sumatoria de las 6 notas definitivas.
                ◦ promedioEstudiante: promedio de las 6 notas definitivas.
                ◦ reprobadas: cantidad de materias que reprobo el estudiante. Se usara para determinar si el estudiante es expulsado por reprobar mas del 50 % de las materias.
            
            • Para cada grupo:
                ◦ grupo: identificara a cada uno de los grupos. Inicia en la letra A y se va incrementando por cada uno (Grupo A, Grupo B, . . . ).
                ◦ aprobaronGrupo: cantidad de estudiantes que aprobaron el periodo por grupo.
                ◦ reprobaronGrupo: cantidad de estudiantes que reprobaron el periodo por grupo.
            
            • A nivel general:
                ◦ condicionalGeneral: cantidad de estudiantes que en situacion condicional.
                ◦ estudiantesGeneral: contara el numero de estudiantes que se procesen.
                ◦ aprobaronGeneral: cantidad total de estudiantes que aprobaron el periodo academico.
                ◦ reprobaronGeneral: cantidad total de estudiantes que reprobaron el periodo academico.
                ◦ excluidosGeneral: numero de estudiantes excluidos por bajo rendimiento.
                ◦ mayorPromedioGral: mejor promedio entre todos los estudiantes.
                ◦ menorPromedioGral: menor promedio entre todos los estudiantes.
                ◦ porcentajeAprobaronGral: porcentaje de estudiantes que aprobaron, con relacion a la poblacion total.
                ◦ porcentajeExcluidosGral: porcentaje de estudiantes que fueron excluidos por bajo rendimiento, con relacion a la poblacion total
            
            • Para controlar los ciclos:
                ◦ seguir: variable centinela para controlar los ciclos externo e intermedio.
                ◦ materia: controla el ciclo que leera las 6 notas definitivas de cada estudiante.
            

			Propuesta 1: 
        universidad

            var 

            entero reprobadas, aprobaronGrupo, reprobaronGrupo, condicionalGeneral, 
                   estudiantesGeneral, aprobaronGeneral, reprobaronGeneral, excluidosGeneral, materia 

            real definitiva, sumaDefinitivas, promedioEstudiante, mayorPromedioGral, menorPromedioGral, 
                            porcentajeAprobaronGral, porcentajeExcluidosGral

            caracter grupo, seguir

            cadena codigo, nombre 

            //Inicializacion

            seguir = ’S’
            grupo = ’A’
            condicionalGeneral = 0
            estudiantesGeneral = 0
            aprobaronGeneral = 0
            reprobaronGeneral = 0
            excluidosGeneral = 0

            //Ciclo externo que controla la zona 1A

            Mientras ( seguir == 'S' O seguir == 's' )
                imprimir ( " Grupo: ", grupo )
                aprobaronGrupo = 0
                reprobaronGrupo = 0
            
            //Ciclo intermedio que procesa los datos del estudiante Zona1B 

            Haga 
                //Zona 2A

                imprimir  (" Digite los datos del estudiante ")
                imprimir ( "Codigo: " )
                Haga 
                    leer ( codigo )
                MientrasQue ( longitud ( codigo ) == 0 )

                imprimir  ( "Nombre: " )
                Haga 
                    leer (nombre)
                MientrasQue ( longitud ( nombre )  == 0)

                sumaDefinitivas = 0
                reprobadas = 0

                //Ciclo interno Procesa las notas de cada estudainte 

                Para materia = 1 Hasta 6 Incremento + 1 
                    //Zona3 
                    imprimir ( "Nota final de la materia: ", materia )
                    Haga 
                        leer ( definitiva )
                    MientrasQue ( definitiva < 0.0 O definitiva > 5 )

                    sumaDefinitivas = sumaDefinitivas + definitiva

                    //Saber si se excluye 

                    Si ( definitivas < 3  ) Entonces
                        reprobadas = reprobadas + 1
                    FinSi
                FinPara

                //Zona 2B 

                promedioEstudiante = notaDefinitiva / 6 
                imprimir ( "Su promedio es: ", promedioEstudiante )

                Si ( estudiantesGeneral == 0 ) Entonces
                    mayorPromedioGral = mayorPromedioGral
                    menorPromedioGral = menorPromedioGral 

                    Sino 
                        Si
                            ( promedioEstudiante > mayorPromedioGral ) Entonces
                            mayorPromedioGral = promedioEstudiante 
                        FinSi

                        Si
                            ( promedioEstudiante < menorPromedioGral ) Entonces
                            menorPromedioGral = promedioEstudiante
                        FinSi
                FinSi

                //Determinar situacion academica 

                Si ( promedioEstudiante < 2 O reprobadas > 3 ) Entonces
                    imprimir ( nombre, "excluido por bajo rendimiento" )
                    excluidosGeneral = excluidosGeneral + 1 

                    //No hay parcial, se incrementa en general 

                    reprobaronGeneral = reprobaronGeneral + 1

                    Sino 
                        Si ( promedioEstudiante < 3.0 ) Entonces 
                        imprimir ( nombre, " en situacion condicional " )
                        condicionalGeneral = condicionalGeneral + 1

                        //No hay parcial, se incrementa en general 

                        reprobaronGeneral = reprobaronGeneral + 1

                        SINO 
                            imprimir ( nombre, "continua normalmente" )
                            aprobaronGrupo = aprobaronGrupo + 1
                    FinSi
                FinSi

                estudiantesGeneral = estudiantesGeneral + 1 

                imprimir ( "¿Ingresara otro estudiante? [S] o [N]" )
                Haga 
                    Leer ( seguir )
                MientrasQue ( seguir != 'S' Y seguir != 'N' Y 
                              seguir != 's' Y seguir != 'n')
            FinMientras

            //Resultados Generarles 
            imprimir( "RESUSLTADOS GENERALES" )
            imprimir( "Mayor promedio: ", mayorPromedioGral )
            imprimir( "Menor promedio: ", menorPromedioGral )
            imprimir( "Cantidad que aprobaron: ", aprobaronGeneral )
            imprimir( "Cantidad que reprobaron: ", reprobaronGeneral )
            imprimir( " % aprobaciaprobaronon:", porcentajeAprobaronGral, " %" );
            imprimir( "De los ", estudiantesGeneral, " estudiantes" )
            imprimir( " fueron excluidos ", excluidosGeneral, " equivale al ", porcentajeExcluidosGral, " %" )
            imprimir( " y en situaciaprobaronon condicional: ", condicionalGeneral, " estudiantes" )

        Fin Universidad


*****   ACLARACION  *****

Con las tres estructuras repetitivas estudiadas en este capıtulo, se pueden hacer casi las mismas cosas. Cada
uno de estos ciclos es mas funcional en determinadas ocasiones: 

El Mientras-FinMientras es util cuando se requiera que un proceso se ejecute o no, dependiendo de una condicion. 
El Haga-MientrasQue, se puede usar en aquellos procesos que deben ejecutarse por lo menos una vez. 
El Para-FinPara, es funcional cuando se tiene claro el numero de iteraciones que debe hacer el ciclo.




	 Ejercicios propuestos
1. Responda las siguientes preguntas:
a) ¿Cuales son las estructuras repetitivas condicionadas al comienzo?
	-Mientras-FinMientras

b) ¿De las estructuras repetitivas estudiadas en este capıtulo, cual o cuales de ellas pueden llegar a no ejecutarse y por que?
	-Mientras-FinMientras, el que se ejecute o no depende de una condicion 

c) ¿De las estructuras repetitivas estudiadas en este capıtulo, cual o cuales de ellas se ejecutan por lo menos una vez y por que?
	-Haga-MientrasQue, se debe a que esta condicionado al final lo que se obliga a que se ejecuten al menos una solo vez 

d) ¿A que se le llama iteracion?
	-A la cantidad de veces que se repite un ciclo completo 

e) Escriba dos situaciones en las que usarıa una variable bandera.
	-bandero o centinela puede ser definida por cualquier tipo de dato y se declara con un valor inicial ejemplo [S] para si y al cambiar la situacion esperada el valor se cambia a [N] No 

f) ¿Cual es la diferencia entre un acumulador y un contador?
	-Un acumulador funciona de forma similar al contador pero su diferencia radica en que aumentan o disminuyen en cantidades variables y no en forma constante como con el contador  

g) ¿Que sucederıa si Usted no escribe la instruccion modificadora de condicion dentro de un ciclo Mientras-FinMientras?
	-Se genera un ciclo o bucle infinito 

h) ¿Por que dentro del cuerpo del ciclo Para, no esta explıcita la instruccion modificadora de condicion?
	-Se debe a que se conoce la cantidad de ejecuciones que va a realizar y no dependera de ninguna de las instrucciones del cuerpo del ciclo, dado a eso no se tiene instruccion modificadora 

i) ¿Para validar la entrada de un dato (lectura) en un algoritmo, cual es el ciclo ideal? Justifique su respuesta.
	-Haga-MientrasQue debido a que primero se ejhecuta el cuerpo del ciclo y luego se revisa la condicion 

j) Dentro de la cultura popular siempre se ha dicho que, si alguien no puede dormir, debe contar ovejas hasta que logre conciliar el sueño. Suponga que le piden a Usted, que mediante un diagrama
de flujo represente esta situacion.

De las 3 estructuras repetitivas estudiadas en este capıtulo, ¿cual es la menos indicada para hacerlo? Justifique su respuesta.

2. Tome cada uno de los ejemplos de este capıtulo y reescrıbalos usando una estructura de ciclo diferente. En caso de no ser posible el cambio,
justifique su respuesta.

	Algoritmo 4.2 Imprimir los numeros del 1 al 10 
	var
	numero = 0
	Mientras ( numero >= 10 )
		imprimir  ( numero )
		numero = numero + 1
	FinMientras

	Algoritmo 4.4: Serie
	var 
	cantidadTerminos
	contadorNumeros
	termino 

	imprimir ( "Ingrese la cantidad de terminos: " )
	Haga 
		leer ( cantidadTerminos )
	MientrasQue (cantidadTerminos > 0)

	contador = 0
	termino = 0 

		Mientras





3. Usando la instruccion Para, represente los siguientes enunciados:
	a) La variable x con un valor inicial de 4, un valor final de 40 e incrementos de a 1.
		Para x = 4 Hasta 40 Incremento 1 
	b) La variable x que va desde 100 a 20, disminuyendo de 1 en 1.
		Para x = 100 Hasta 20 Decremento 1 
	c) La variable x que inicia en 10, incrementando de 5 en 5, hasta llegar a 200.
		Para x = 10 Hasta 200 Incremento 10 

4. Dado los extremos de un intervalo [M, N], halle la sumatoria de los numeros pares y de los impares que pertenezcan a el.
 
5. Dada una poblacion, maximo de 500 habitantes, determinar cuantos son mayores y cuantos menores de edad. De cada uno de ellos se conoce la edad en años.
 
6. Genere e imprima los multiplos de 3 que se encuentren entre 6 y n, donde n tiene que ser superior a 6.

7. En 1937, el matematico aleman Lothar Collatz, enuncio la conjetura de Collatz, tambien conocida como el problema de Ulam, conjetura 3n + 1, entre otros.
Collatz enuncio que, a partir de cualquier numero natural, siempre se obtiene la unidad. Para ello se hace el siguiente procedimiento:
Tome un numero n y ejecute las siguientes operaciones: Si n es par, halle la division entera entre 2. Si n es impar, multiplıquelo por 3 y sumele 1.
Con el resultado que obtenga, repita las operaciones anteriores, hasta obtener 1 como respuesta. Ejemplos:
n = 13, se obtienen los siguientes resultados:
40, 20, 10, 5, 16, 8, 4, 2, 1.
n = 6, se obtienen los siguientes resultados:
3, 10, 5, 16, 8, 4, 2, 1.
Otra de las curiosidades de esta conjetura, es que cuando se llegue a 1 y se apliquen nuevamente las formulas, obtendra la secuencia 4, 2, 1 de forma infinita.
El algoritmo que Usted diseñe, debe solicitar un numero y aplicar el anterior concepto, imprimiendo los resultados que se obtienen hasta llegar a la unidad.

8. Lea un numero entero positivo, descompongalo en cada una de sus cifras y con ellas genere el numero invertido. Por ejemplo, si el numero a leer es el 5432, el resultado sera 2345.

9. Dado un numero menor o igual a 50, calcule su factorial mediante sumas sucesivas.

10. El cajero de un restaurante desea controlar el flujo de caja en un dıa de trabajo cualquiera. Antes de abrir al publico, el gerente del
establecimiento le entrega la base para el dıa, la cual consiste en una suma de dinero que debe registrar en la caja y con la cual se espera
pueda desempe˜narse sin contratiempos. Durante su jornada tendra ingresos por concepto de las ventas que se realicen, tambien habran
salidas de caja para la compra de insumos o gastos eventuales que deban realizarse. Se espera un algoritmo, que reciba el registro de cada una de
las operaciones a medida que vayan sucediendo. El cajero tambien requiere un informe del saldo en caja despues de cada registro. El
algoritmo debera dar un mensaje de alerta en el caso que el saldo sea inferior o igual al 15 % de la base asignada. Al cierre del restaurante,
se requiere los saldos finales (saldo en caja, ingresos y egresos) y la cantidad de cada una de las operaciones realizadas.

11. En el Ejemplo 4.15 se hizo un algoritmo que informaba si un numero es o no perfecto. Basado en esa solucion, diseñe un nuevo algoritmo
que lea un numero n e imprima los numeros perfectos entre 1 y n. 

12. Simule el funcionamiento de un temporizador, que reciba como entrada una cantidad de minutos y segundos. En el momento que falten 5 minutos para cumplir el tiempo, debera dar un mensaje de
alerta, cuando finalice mostrara el siguiente mensaje “Tiempo fuera”. Debe funcionar maximo para 1 hora.


13. Usando estructuras repetitivas, elabore un algoritmo, que genere e
imprima las letras del abecedario de la siguiente forma:
Z Y X W V U T S R Q P O N M L K J I H G F E D C B A
Y X W V U T S R Q P O N M L K J I H G F E D C B A
X W V U T S R Q P O N M L K J I H G F E D C B A
W V U T S R Q P O N M L K J I H G F E D C B A
V U T S R Q P O N M L K J I H G F E D C B A
U T S R Q P O N M L K J I H G F E D C B A
T S R Q P O N M L K J I H G F E D C B A
S R Q P O N M L K J I H G F E D C B A
R Q P O N M L K J I H G F E D C B A
Q P O N M L K J I H G F E D C B A
P O N M L K J I H G F E D C B A
O N M L K J I H G F E D C B A
N M L K J I H G F E D C B A
M L K J I H G F E D C B A
L K J I H G F E D C B A
K J I H G F E D C B A
J I H G F E D C B A
I H G F E D C B A
H G F E D C B A
G F E D C B A
F E D C B A
E D C B A
D C B A
C B A
B A
A

14. A un amigo que vive en el norte de la ciudad, su terapeuta le recomendo caminar mınimo 3 dıas a la semana desde su apartamento hasta el centro, lo cual el hace sin falta alguna; el recorrido tiene
aproximadamente 22 cuadras y debe hacerlo con ropa comoda. Este ejercicio lo debe realizar durante 4 meses. Al momento de volver a consulta, el amigo debe informarle a su terapeuta lo siguiente:
Promedio de tiempo por semana, por mes y por los 4 meses. Adicionalmente, cual fue el menor y el mayor tiempo empleado en el recorrido.
Para esta tarea, el amigo lleva un registro del tiempo que invierte en cada caminata.


15. Imprima los 10 multiplos sucesivos de 3 en orden descendente, a partir de un numero n que sera ingresado por el usuario y que representara el menor valor. Si el n, no es multiplo de 3, debe llevarse
al multiplo mas cercano superior.
Por ejemplo, si el numero ingresado es el 28, al no ser multiplo de 3 debe llevarse al siguiente multiplo superior, o sea, 30. Entonces la salida del algoritmo se visualizarıa ası:
57, 54, 51, 48, 45, 42, 39, 36, 33, 30.


16. En una compañia que tiene varias sucursales a nivel nacional, una o varias en cada departamento y solo una por ciudad, se requiere de un censo que permita conocer la siguiente informacion de sus empleados:
Porcentaje total de personas que tienen estudios de primaria, secundaria, profesional, maestrıa o doctorado. Se tiene en cuenta solamente, el nivel mas alto de estudio.
Porcentaje total de mujeres con posgrado, con relacion a todas las mujeres de la compañia. Cantidad de hombres con estudios de solo primaria en cada departamento.
Cantidad de hombres y mujeres en cada sucursal que hayan recibido su tıtulo profesional antes de cumplir 25 años de edad.
De cada empleado se conoce el numero de identificacion y el nombre, adicional a los datos que se requieren en la solucion del problema.


17. Para los siguientes algoritmos, realice la respectiva prueba de escritorio o tabla de verificacion:

	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	 Ejercicios propuestos
1. Responda las siguientes preguntas:
a) ¿Cuales son las estructuras repetitivas condicionadas al comienzo?

b) ¿De las estructuras repetitivas estudiadas en este capıtulo, cual o cuales de ellas pueden llegar a no ejecutarse y por que?

c) ¿De las estructuras repetitivas estudiadas en este capıtulo, cual o cuales de ellas se ejecutan por lo menos una vez y por que?

d) ¿A que se le llama iteracion?

e) Escriba dos situaciones en las que usarıa una variable bandera.

f) ¿Cual es la diferencia entre un acumulador y un contador?

g) ¿Que sucederıa si Usted no escribe la instruccion modificadora de condicion dentro de un ciclo Mientras-FinMientras?

h) ¿Por que dentro del cuerpo del ciclo Para, no esta explıcita la instruccion modificadora de condicion?

i) ¿Para validar la entrada de un dato (lectura) en un algoritmo, cual es el ciclo ideal? Justifique su respuesta.

j) Dentro de la cultura popular siempre se ha dicho que, si alguien no puede dormir, debe contar ovejas hasta que logre conciliar el sueño. Suponga que le piden a Usted, que mediante un diagrama
de flujo represente esta situacion.

De las 3 estructuras repetitivas estudiadas en este capıtulo, ¿cual es la menos indicada para hacerlo? Justifique su respuesta.

2. Tome cada uno de los ejemplos de este capıtulo y reescrıbalos usando una estructura de ciclo diferente. En caso de no ser posible el cambio,
justifique su respuesta.


3. Usando la instruccion Para, represente los siguientes enunciados:
	a) La variable x con un valor inicial de 4, un valor final de 40 e incrementos de a 1.
	b) La variable x que va desde 100 a 20, disminuyendo de 1 en 1.
	c) La variable x que inicia en 10, incrementando de 5 en 5, hasta llegar a 200.

4. Dado los extremos de un intervalo [M, N], halle la sumatoria de los numeros pares y de los impares que pertenezcan a el.
 
5. Dada una poblacion, maximo de 500 habitantes, determinar cuantos son mayores y cuantos menores de edad. De cada uno de ellos se conoce la edad en años.
 
6. Genere e imprima los multiplos de 3 que se encuentren entre 6 y n, donde n tiene que ser superior a 6.

7. En 1937, el matematico aleman Lothar Collatz, enuncio la conjetura de Collatz, tambien conocida como el problema de Ulam, conjetura 3n + 1, entre otros.
Collatz enuncio que, a partir de cualquier numero natural, siempre se obtiene la unidad. Para ello se hace el siguiente procedimiento:
Tome un numero n y ejecute las siguientes operaciones: Si n es par, halle la division entera entre 2. Si n es impar, multiplıquelo por 3 y sumele 1.
Con el resultado que obtenga, repita las operaciones anteriores, hasta obtener 1 como respuesta. Ejemplos:
n = 13, se obtienen los siguientes resultados:
40, 20, 10, 5, 16, 8, 4, 2, 1.
n = 6, se obtienen los siguientes resultados:
3, 10, 5, 16, 8, 4, 2, 1.
Otra de las curiosidades de esta conjetura, es que cuando se llegue a 1 y se apliquen nuevamente las formulas, obtendra la secuencia 4, 2, 1 de forma infinita.
El algoritmo que Usted diseñe, debe solicitar un numero y aplicar el anterior concepto, imprimiendo los resultados que se obtienen hasta llegar a la unidad.

8. Lea un numero entero positivo, descompongalo en cada una de sus cifras y con ellas genere el numero invertido. Por ejemplo, si el numero a leer es el 5432, el resultado sera 2345.

9. Dado un numero menor o igual a 50, calcule su factorial mediante sumas sucesivas.

10. El cajero de un restaurante desea controlar el flujo de caja en un dıa de trabajo cualquiera. Antes de abrir al publico, el gerente del
establecimiento le entrega la base para el dıa, la cual consiste en una suma de dinero que debe registrar en la caja y con la cual se espera
pueda desempe˜narse sin contratiempos. Durante su jornada tendra ingresos por concepto de las ventas que se realicen, tambien habran
salidas de caja para la compra de insumos o gastos eventuales que deban realizarse. Se espera un algoritmo, que reciba el registro de cada una de
las operaciones a medida que vayan sucediendo. El cajero tambien requiere un informe del saldo en caja despues de cada registro. El
algoritmo debera dar un mensaje de alerta en el caso que el saldo sea inferior o igual al 15 % de la base asignada. Al cierre del restaurante,
se requiere los saldos finales (saldo en caja, ingresos y egresos) y la cantidad de cada una de las operaciones realizadas.

11. En el Ejemplo 4.15 se hizo un algoritmo que informaba si un numero es o no perfecto. Basado en esa solucion, diseñe un nuevo algoritmo
que lea un numero n e imprima los numeros perfectos entre 1 y n. 

12. Simule el funcionamiento de un temporizador, que reciba como entrada una cantidad de minutos y segundos. En el momento que falten 5 minutos para cumplir el tiempo, debera dar un mensaje de
alerta, cuando finalice mostrara el siguiente mensaje “Tiempo fuera”. Debe funcionar maximo para 1 hora.


13. Usando estructuras repetitivas, elabore un algoritmo, que genere e
imprima las letras del abecedario de la siguiente forma:
Z Y X W V U T S R Q P O N M L K J I H G F E D C B A
Y X W V U T S R Q P O N M L K J I H G F E D C B A
X W V U T S R Q P O N M L K J I H G F E D C B A
W V U T S R Q P O N M L K J I H G F E D C B A
V U T S R Q P O N M L K J I H G F E D C B A
U T S R Q P O N M L K J I H G F E D C B A
T S R Q P O N M L K J I H G F E D C B A
S R Q P O N M L K J I H G F E D C B A
R Q P O N M L K J I H G F E D C B A
Q P O N M L K J I H G F E D C B A
P O N M L K J I H G F E D C B A
O N M L K J I H G F E D C B A
N M L K J I H G F E D C B A
M L K J I H G F E D C B A
L K J I H G F E D C B A
K J I H G F E D C B A
J I H G F E D C B A
I H G F E D C B A
H G F E D C B A
G F E D C B A
F E D C B A
E D C B A
D C B A
C B A
B A
A

14. A un amigo que vive en el norte de la ciudad, su terapeuta le recomendo caminar mınimo 3 dıas a la semana desde su apartamento hasta el centro, lo cual el hace sin falta alguna; el recorrido tiene
aproximadamente 22 cuadras y debe hacerlo con ropa comoda. Este ejercicio lo debe realizar durante 4 meses. Al momento de volver a consulta, el amigo debe informarle a su terapeuta lo siguiente:
Promedio de tiempo por semana, por mes y por los 4 meses. Adicionalmente, cual fue el menor y el mayor tiempo empleado en el recorrido.
Para esta tarea, el amigo lleva un registro del tiempo que invierte en cada caminata.


15. Imprima los 10 multiplos sucesivos de 3 en orden descendente, a partir de un numero n que sera ingresado por el usuario y que representara el menor valor. Si el n, no es multiplo de 3, debe llevarse
al multiplo mas cercano superior.
Por ejemplo, si el numero ingresado es el 28, al no ser multiplo de 3 debe llevarse al siguiente multiplo superior, o sea, 30. Entonces la salida del algoritmo se visualizarıa ası:
57, 54, 51, 48, 45, 42, 39, 36, 33, 30.


16. En una compañia que tiene varias sucursales a nivel nacional, una o varias en cada departamento y solo una por ciudad, se requiere de un censo que permita conocer la siguiente informacion de sus empleados:
Porcentaje total de personas que tienen estudios de primaria, secundaria, profesional, maestrıa o doctorado. Se tiene en cuenta solamente, el nivel mas alto de estudio.
Porcentaje total de mujeres con posgrado, con relacion a todas las mujeres de la compañia. Cantidad de hombres con estudios de solo primaria en cada departamento.
Cantidad de hombres y mujeres en cada sucursal que hayan recibido su tıtulo profesional antes de cumplir 25 años de edad.
De cada empleado se conoce el numero de identificacion y el nombre, adicional a los datos que se requieren en la solucion del problema.


17. Para los siguientes algoritmos, realice la respectiva prueba de escritorio o tabla de verificacion:

***		CAPITULO 5		***

es un conjunto finito de instrucciones con un unico proposito bien definido (responsabilidad) y que puede ser invocado
(utilizado)

            FORMA GENERAL DEL PROCEDIMIENTO 
			Procedimiento verboComplemento ( [listaDeParametros] )		//Es el lugar donde se debe de enemerar los tipos y las variables que reciben la informacion enviada al procedimiento 
				instruccion1
				instruccion2
				...
				instruccionk
			FinProcedimiento

Ejemplo de Procedimiento 
	Mensaje 
		//Imprimir mensaje 
		imprimirSaludo ( )
	Fin Mensaje 

	Procedimiento imprimirSaludo ( )
		imprimir ( "Hola " )
	FinProcedimiento



EJERCICIO 5.2. 	
Diseñe un algoritmos con procedimientos que permita ingresar el nombre de dos personas y mostrar el mensaje de saludo “Hola”
seguido del nombre de cada una de ellas de forma independiente

		ANALISIS: 

			Resultados esperados: Saludo por cada nombre que se ingrese 

			Datos disponibles: Solicitar al usuario dos nombres 

			Proceso: solicitar al usuario los dos nombre de las personas, luego
					invocar dos veces un procedimiento que imprima el saludo del nombre que se enviara como argumento.


			Variables requeridas: nombre1, nombre2 
			 

		Propuesta 1: 
		//Nombres2 
		Mensaje2 
		
			imprimir ( "Ingrese el primer nombre: " )
				leer ( nombre1 )
			imprimir ( "Ingrese el segundo nombre" )
				leer ( nombre2 )
				imprimir saludoPersonas ( nombre1 ) 
				imprimir saludoPersonas ( nombre2 ) 
		FinMensaje 

		Procedimiento saludoPersonas ( cadena n )
			imprimir ( hola )
		FinProcedimiento




EJERCICIO 3.2. 	
diseñe un algoritmos con procedimientos que permita imprimir dos secuencias de
numeros: “3 6 9 12 . . . 3 ∗ n” y “5 10 15 20 . . . 5 ∗ m”, 
en donde n y m representan la cantidad de terminos de la serie.

		ANALISIS: 

			Resultados esperados: Se espera la impresion de las dos secuencias de numeros 

			Datos disponibles:  El valor de n y el de m para poder generar las dos secuencias de numeros

			Proceso: 
			primero se le solicita al usuario los valores de n y m, luego se invoca dos veces un procedimiento que imprima una secuencia
			dado un valor base (3 o 5) y el valor final (n o m). 
			En terminos generales el procedimiento requiere dos parametros, un valor base (base) y la cantidad (cantidad) de terminos. Con esta
			informacion se imprime la serie:
			1 ∗ base 2 ∗ base 3 ∗ base . . . cantidad ∗ base

Ahora si:
base = 3 y cantidad = 4										 base = 5 y cantidad = 6
1 ∗ 3 2 ∗ 3 3 ∗ 3 4 ∗ 3 								  1 ∗ 5 2 ∗ 5 3 ∗ 5 4 ∗ 5 5 ∗ 5 6 ∗ 5
3 6 9 12 													 5 10 15 20 25 30
			
			Variables requeridas:
			• n: cantidad de terminos de la primera serie
			• m: cantidad de terminos de la segunda serie

			

		Propuesta 1: 
		procedimientoMultiplicacion

			var 
			entero m, n, 

			imprimir ( "Ingrese el valor de n: " )
			leer ( n )
			imprimir ( "Ingrese el valor de m: " )
			leer ( m )
			imprimirSerie ( 3, n )
			imprimir Serie ( 5, m )
		Fin procedimientoMultiplicacion

		procedimiento imprimirSerie ( Entero base, Entero cantidad)
			Entero termino 

			Para i = 1 Hasta cantidad Incremento 1
				termino = i * base 
				imprimir  ( termino, " " )
			FinPara
		FinProcedimiento

***	Explicacion	***


se invoca dos veces el metodo imprimirSerie para generar las
respectivas series. La diferencia entre ellas es el valor de la base (3 y 5) y la cantidad de terminos (n y m).
13 imprimirSerie( 3, n )
14 imprimirSerie( 5, m )


no es necesario dos procedimientos para imprimir las dos series
generaliza la impresion en donde se conoce un valor de la base y una cantidad de terminos.
el parametro base toma el valor de 3
el parametro cantidad toma el valor de la variable n.


EJERCICIO 5.4. 	Se desea crear un procedimiento genérico que permita imprimir la coordenadas (x, y) de un punto cualquiera en un plano
cartesiano, con su respectivo nombre del punto.

		ANALISIS: 

			Resultados esperados:la impresion del nombre del punto (“K”) con sus respectivas coordenadas x, y.

			Datos disponibles: El valor de las cordenadas x y y 

			Proceso: : solicitar al usuario las coordenadas del punto “K” y luego se invoca el procedimiento para imprimirlo.

			Variables requeridas: 
			• xk: valor de la coordenada x del punto “K”.
			• yk: valor de la coordenada y del punto “K”
			 

		Propuesta 1: 
		
		Punto 
			var
			real xk, yk

			imprimir  ( "Ingrese el valor de x para el punto K" )
			leer ( xk )
			imprimir ( "Ingrese el valor de y para el punto K" )
			leer ( yk )
			imprimirPunto ( "K", xk, xy )
		Fin Punto 

		Procedimiento imprimirPunto ( cadena nombre Real x, Real y )
			imprimir ( "El punto ", nombre )
			imprimir ( "Tiene cordenadas ( ", x ", ", y " )" )
		FinProcedimiento


EJERCICIO 5.5. 	Usando el procedimiento del punto anterior, diseñe un algoritmo que permita imprimir los datos de dos puntos “T” y “S”

		ANALISIS: 

			Resultados esperados: la impresion del nombre del punto (“T” y “S”) con sus respectivas coordenadas x, y

			Datos disponibles: el valor de las coordenadas x, y de ambos puntos.

			Proceso:  solicitar al usuario las coordenadas de los puntos “T” y “S” y luego se invoca dos veces el procedimiento para imprimir la informacion.

			Variables requeridas: 
				• xt: valor de la coordenada x del punto “T”.
				• yt: valor de la coordenada y del punto “T”.
				• xs: valor de la coordenada x del punto “S”.
				• ys: valor de la coordenada y del punto “S”.
				. Internos al procedimiento se necesitan:
				• nombre: nombre del punto arbitrario.
				• x: valor de la coordenada x del punto arbitrario.
				• y: valor de la coordenada y del punto arbitrario
			 
		
		Propuesta 1: 

		Puntos
			var 
			real xt, yt, xs, ys

			//var Procedimiento
			//x, y
			//cadena nombre, 


			imprimir ( "Ingrese el valor de x para T: " )
			leer ( xt )
			imprimir ( "Ingrese el valor de y para T: " )
			leer ( yt  )
			imprimir ( "Ingrese el valor de x para S: " )
			leer ( xs )
			imprimir ( "Ingrese el valor de y para S: " )
			leer ( ys )

			imprimirPunto ( "T", xt, yt )
			imprimirPunto ( "S", xs, ys )
		Fin Puntos

		Procedimiento imprimirPunto ( Cadena nombre, Real x, Real y )
			imprimir ( "El punto ", nombre )
			imprimir  ( "tiene coordenadas ( ", x ", ", y " ) )" 
		Fin Procedimiento
		
***	EXPLICACION	***
Observe que adicional a la declaracion y lectura de los datos disponibles, se hace la invocacion al mismo procedimiento pero enviando la informacion
correspondiente en cada caso. Note que el procedimiento imprimirPunto no sufrio modificacion alguna, esta es una de las fortalezas del uso de
procedimientos en los algoritmos, el poder reutilizar codigo



***************************************************************************************************************************************************************************************************
***************************************************************************************************************************************************************************************************

	Funciones 

Un tipo especial de procedimiento es aquel que tiene la capacidad de entregar un valor como respuesta

para declarar una funcion en un algoritmo. Adicional a esta palabra, se declaran FinFuncion y Retornar; la primera se utiliza 
para indicar donde termina la nueva funcion y la ultima es necesaria para indicar cual es el valor que la funcion entrega como resultado.

		Forma general de una Funcion

		1 Funcion tipoDato verboComplemento ( [lista de parametros]
		)
		2 	Instruccion1
		3 	Instruccion2
		4 	...
		5 	Instruccionn
		6
		7 	Retornar valor
		8 FinFuncion


EJERCICIO 5.6.  diseñe un algoritmo que permita determinar la distancia entre dos puntos “T” y “S” (Ver Figura 5.6).

		ANALISIS: 

			Resultados esperados: Se espera que se calcula la distancia entre los puntos T y S 

			Datos disponibles: Se solicitaran las coordenadas de los puntos T y S 

			Proceso: Se solicita al usurario que ingrrese los puntos de x y y para ambos puntos y se va  calcular la distancia entre los puntos 
					usando la ecuacion de distancia d= raizCuadrada ( xs -xt )^2 + ( ys - yt ) ^2

			Variables requeridas: 
				
				• xt: valor de la coordenada x del punto “T”.
				• yt: valor de la coordenada y del punto “T”.
				• xs: valor de la coordenada x del punto “S”.
				• ys: valor de la coordenada y del punto “S”.
				• distancia: valor de la distancia entre los puntos “T” y “S”.

			 

		Propuesta 1: 

		distanciaDosPuntos

			var 
			real xt, yt, xs, ys, distancia

				imprimir ( "Ingrese el valor de X para T: " )
				leer ( xt )
				imprimir ( "Ingrese el valor de Y para T: " )
				leer ( yt )
				imprimir ( "Ingrese el valor de X para S: " )
				leer ( xs )
				imprimir ( "Ingrese el valor de Y para S: " )
				leer ( ys )

				//calculo de distancia 

				distancia = calculoDistancia ( xt, yt, xs, ys )
				imprimir  ( "La distancia entre T y S es de ", distancia )
		Fin distanciaDosPuntos

		Funcion Real calculoDistancia  ( REAL x1, REAL y2,					//El procedimiento recibe esta informacion en sus respectivos parametros x1, y1, x2, y2 paa luego aplicar la formula
										 REAL x2, REAL y2)					//de distancia y retornar el valor calculado mediante la variable local d. 

			Real d
			d= raizCuadrada ( xs -xt )^2 + ( ys - yt ) ^2 
			retornar d
		FinFuncion





CAPITULO 6   VECTORES Y MATRICES 


¿Que son las variables escalares?
Varibales que almacenan solamente un dato a la vez que una vez asignado su valor y posterior se le asgina otro valor, el primero se pierde 

Variables Suscritas 
alamacenan el lugar ( referencia ) en donde se crean multiples espacios o celdas de memoria que pueden ser usados para guardar y recuerar datos ( ARREGLO )

Arreglo 
Conjunto de espacios o celdas de memoria donde se puede almacenar temparalmente muschos datos siempre y cuando sean del mismo tipo 

--Hay varios tipos de arreglos
--Todo arreglo contiene una variable suscrita 
--Mismo tipo de dato 
--Funciona como fila desde la primer celda hasta la ultima  
--Arreglo unidimensional es un vector 

Vectores 

conjuntos finitos de celdas que permiten almacenar datos del mismo tipo
una fila donde cada celda corresponde a un espacio de memoria en el que se puede ubicar un dato.
Cada espacio en memoria es identificado con un numero llamado ( INDICE )
El ultimo numero indice representa no solo la ultima celda sino tambien el tamaño del arreglo 

Declaracion de un vector 

se requiere el uso de una variable suscrita que lo referencie. Una variable suscrita se diferencia de las demas por tener en
su declaracion los sımbolos corchetes [ ].

EJEMPLO 
		Entero edadEstudiante [ ]
		Real estaturaPersona[ ]
		Cadena nombreEmpleado [ ]
		Caracter letrasDocumento[ ]

Es importante aclarar que, luego de declarar la variable suscrita, se debe especificar el tamaño del vector


Ejemplos de creacion de arreglos con la funcion dimensionar() :
				
				Entero edadEstudiante[ ]
				edadEstudiante = dimensionar( 6 )

				Real estaturaPersona[ ]
				estaturaPersona = dimensionar( 4 )

				Cadena nombreEmpleado[ ]
				nombreEmpleado = dimensionar( 3 )

La funcion dimensionar() no requiere que se envıe una constante numerica como argumento, tambien se puede usar el contenido de una
variable o constante de tipo Entero. Por ejemplo

				Entero edadEstudiante[ ]
				Entero cantidadPersonas

				cantidadPersonas = 20
				edadEstudiante = dimensionar( cantidadPersonas )


La función dimensionar(), internamente esta construida creando un vector en el momento de declarar la variable suscrita del tamaño indicado
en el argumento cuando se invoca la funcion, para posteriormente retornar la referencia a este nuevo vector:

				Funcion tipoDato[ ] dimensionar( Entero n )
					tipoDato elemento[ n ]

					Retornar elemento
				FinFuncion


La estructura interna de la funcion es: crear un valor de n posiciones en el momento de la declarciacion de la variables 
suscrita y luego simplemente se retorna el valor de la varible, es decir, la referencia al nuevo valor

			EJEMPLO DE CREACIO DE VECTOR EN EL MOMENTO DE DE LA DECLARACION 

			Entero semestreEstudiante [ 35 ]
				semestreEstudiante ---->	1	2	3	...	34	35



-Se declara la varibale y tambien se especifica el tamaño. Realizar esta declaracion y especificacion de tamaño es util cuando se tienecertexza del tamaño 
requerido del valor 

-Es importante decir que no es posible eliminar o insertar celdas en un arreglo. Existen otras estructuras de almacenamiento asi como lo son las listas 

	ALMACENAMIENDE DE DATOS EN UN VECTOR 

Al alamcenar datos en un vector se debe de tener en cuenta que el almacenamiento se debe hacer celda a celda de forma paulatina. Esto quiere decir que cada dato debe irse 
ubicando en una celda especifica que se identiica con su numero indice 

	EJEMPLO DE LA DECLARACION

	Entero numero [ 5 ]
	numero [ 1 ] = 4
	numero [ 2 ] = 2 
	numero [ 3 ] = 15 
	numero [ 4 ] = 8 
	numero [ 5 ] = 3


	EJEMPLO GRAFICO 

	numero ----> 4	2	15	8	3
				 1	2	3	4	5

 Es posible almacenar en una posicion especifica de un vector un dato que ya este almacenado en una varible siempre y cuando la variable y el vector sean del mismo tipo de dato 

	EJEMPLO 
	Entero numero[ 5 ], edad
	edad = 20
	numero[ 4 ] = edad

Es posible, en el momento de la declaracion, almacenar varios datos en un vector con una sola instruccion, de la siguiente manera:
	
	Entero numero[ ] = {7, 21, 93, 48, 5}

Aunque es posible hacer una lectura manual para cada posicion, lo ideal serıa hacer uso de un ciclo. 

	Entero numero[ 20 ], i

	Para i = 1 Hasta 20 Incremento 1
		imprimir( "Ingrese el numero " , i, ": " )
		leer( numero[ i ] )
	FinPara

La varibale i represnta el indice con el cual se ira accediendo a cada posicion del arreglo 
La funcion imprimir () solicitara al usuario el ingreso de un numero cualquiera. 
La variable i que va al final de la funcion imprimir () dentro del parentesis servira para que el usuario reconozca la secuencia de los numero que va ingresando. 
La funcion leer () llevara el numero ingresado por el usuario a la respectiva posicion del vector numero represntada por el indice 

RECUPERACION DE DATOS ALMACENADOS EN UN VECTOR

Es necesario saber cual es esa posicion y luego acceder a ella a traves de alguna instruccion 
	
	EJEMPLO
	imprimir( "El tercer elemento es " , numero[ 3 ] )

Si este numero se requiere para llevar a cabo algun calculo este puede llevarse a otra variable siempre y cuando la varibale que lo va a almacenar 
temporalmente sea del mismo tipo de dato que el arreglo de donde proviene el dato 

	Entero n, numero[ ] = {7, 21, 93, 48, 5}
	n = numero[ 4 ]

Si se requiere recuperar todos los datos almacenados en las diferentes posiciones del vector. En esta caso debera recorrerse con un CICLO el vector desde la primera hasta la ultima posicion 

		Entero numero[ ] = {7, 21, 93, 48, 5}
		Entero i, suma
		suma = 0
		Para i = 1 Hasta 5 Incremento 1
			suma = suma + numero[ i ]
		FinPara
		imprimir( "La suma de los elementos es: ", suma )

	EXPLICACION

	-Se declara la variable suma de tipo Entero que almacenara la suma de los datos almacenados en numero 
	-Se inicializa la variable suma en cero 
	-Se utiliza el ciclo PARA con la variabe i como CONTADOR e INDICE, con el fin de recorrer el vector desde la posicion 1 hasta el tamaño del mismo ( 5 )
	-Se utiliza la instruccion dentro del ciclo para ir sumando el valor de la posicion actual de numero con lo que se estan acumulando los datos del vector en la variable suma

		suma = suma + numero [ i ]
	
	-Al finalizar el ciclo se muestra el total de la suma mediante la funcion imprimir ()


EJERCICIO 6.1. 	
diseñe un algoritmo que permita almacenar en un vector de 4 posiciones o celdas, numeros Enteros comprendidos entre 10 y 20 y
que, a continuacion, determine cuantas veces se encuentra almacenado el numero 14 en el arreglo.


		ANALISIS: 

			Resultados esperados: mostrar la cantidad de veces que aparece el numero 14 en las celdas de un arreglo de 4 posiciones.

			Datos disponibles: los cuatro numeros que se almacenan en el arreglo en el intervalo 10 al 20.

			Proceso: se solicita al usuario el tamaño del arreglo, posteriormente se hace la lectura de todos lo datos, luego se lleva a cabo una
            busqueda del numero 14 celda a celda, desde la primera posicion hasta la ultima; cada vez que se encuentre, se va incrementando un
            contador. Al final del algoritmo, se mostrara la cantidad de veces que se ha encontrado el numero 14

			Variables requeridas: 

            • numero: arreglo que almacena los numeros ingresados
            • i: variable que controla el ciclo
            • contador14: variable que almacena la cantidad de veces3 que aparece el numero 14 en el arreglo.
            • repetir: bandera utilizada para determinar si es necesario solicitar nuevamente un dato debido a que el valor previamente 
            ingresado no cumpla con la condicion de estar entre 10 y 20.

			 

		Propuesta 1: 

    Numero14 
        
        var
        constante Entero MAX = 4
        Entero numero [ MAX ], contador14, i 
        logico repetir 

        Para i = 1 Hasta MAX Incremento 1       //Se recore el vector desde la posicion 1 hasta MAX 

            Haga 
                imprimir ( "Ingrese un numero ", i, ": " )      //Se solicitan numeros que se van a almacenar 
                leer ( numero [ i ] )

                repetir = Falso 
                Si ( numero [ i ] < 10 O                        //Se valida que los numero ingresados esten en el intervarlo de 10 al 20
                     numero [ i ] > 20 ) Entonces 
                     repetir = Verdadero                        //Se valida si se realiza una nueva interaccion con la bandera 
                     imprimir ( "Este numero no es valido" )      
                FinSi 
            MientrasQue ( repetir == Verdadero )
        FinPara

        contador14 = 0
        
        Para i = 1 Hasta MAX Incremento 1
            Si ( numero [ i ] == 14 ) Entonces              //Se valida si se tiene almacenado el 14 en el arreglo de ser asi se suma a contador 
                contador14 = contador14 + 1 
            FinSi
        FinPara
        
        imprimir( "El numero 14 esta ", contador14, " veces" )
    Fin Numero14

EJERCICIO 6.2. 	
            Diseñe  un algoritmo que permita almacenar los nombres de un grupo de n personas en un arreglo unidimensional y que posteriormente,
            busque la posicion del arreglo en la que quedo almacenado el nombre de una persona que el usuario ingresa. Si ese nombre no aparece en el arreglo, se
            debe mostrar el respectivo mensaje.

		ANALISIS: 

			Resultados esperados: la posicion del arreglo en la que se encuentra el nombre a buscar ingresado por el usuario.

			Datos disponibles: el tamaño del arreglo y el nombre de la persona que se desea buscar.

			Proceso: 
             solicitar la cantidad de nombres a ingresar (n), luego se solicitan los nombres de las n personas y se almacenan en el arreglo,
             posteriormente se hace una busqueda secuencial desde la primera hasta la ultima posicion del arreglo de nombres comparando si el
             nombre que se esta buscando es igual al nombre que hay en la posicion actual, Si esto ocurre, ya se encontro lo que se buscaba y se puede
             terminar la busqueda allı mostrando la posicion en la que el nombre se encuentra; si no se ha encontrado, se pasa a la siguiente posicion
             y se vuelve a comparar hasta llegar al final del arreglo. Si se ha llegado al final del arreglo y no se encontro nada, debera informarse al usuario




			Variables requeridas: 
                
                • tamanio: contiene el tamaño del arreglo.
                • arregloNombres: es el arreglo que almacena los nombres.
                • i: variable de control del ciclo
                • nombreBuscar: almacena el nombre que se desea buscar
                • encontrado: variable que indica si se encontro o no el nombre en el arreglo.

			 

		Propuesta 1: 
    busquedaSecuencial 

        var 
        entero tamanio, i 
        cadena arregloNombres [], nombreBuscar
        logico encontrado

        imprimir ( "Ingrese el tamaño del arreglo: " )          //se solicita el tamaño para, con este dato, dimensionar al arreglo
        leer ( tamanio )

        arregloNombres = dimensionar ( tamanio )

        Para i = 1 Hasta tamanio Incremento 1 
            imprimir  ( "Ingrese el nombre de la persona: ", i, ": " )
            leer ( arregloNombres[ i ] )
        FinPara

        imprimir ( "Ingrese el nombre a buscar: " )
        leer ( nombreBuscar )

        encontrado = falso                              //Esta variable centenela de tipo logico permite terminar el ciclo inmediatamente despues de encontar el nombre que se esta buscando 

        Para i = 1 Hasta taminio Incremento 1 
            Si ( nombreBuscar == arregloNombres [ i ] ) Entonces        //Compara si el nombre que se esta buscando es igual al nombre almacenado en alguna posicion de arreglo
                imprimir  ( "El nombre se encuentra en la posicon: ", i )

                encontrado = verdadero                  //Indica que se encontro el nombre buscado 
            Fin Si 
        FinPara

        Si ( encontrado == falso ) Entonces                // Si el valor del centinela es falso no se encuentra el nombre buscado y se continua con la impresion 
            imprimir ( "El nombre no esta en el arreglo" )
        FinSi
    Fin busquedaSecuencial



    
EJERCICIO 6.3. 	

Se almacenan en un arreglo unidimensional n numeros enteros positivos. diseñe un algoritmo que genere otro arreglo que almacene
de forma invertida los elementos guardados en el arreglo inicial, es decir, el ultimo elemento almacenado en el arreglo inicial que ocupa la posicion
n, sera el primero en el arreglo generado y, el primer elemento almacenado en el arreglo inicial, ocupara la ultima posicion en el arreglo generado.

		ANALISIS: 

			Resultados esperados:
                un segundo arreglo de numeros enteros y en este se almacenen los numeros que hay en el arreglo inicial de
                forma invertida a como estan almacenados en este arreglo inicial.

			Datos disponibles: el tamaño del arreglo inicial y los numeros que se almacenaran en el

			Proceso: 
                luego de solicitar el tamaño del arreglo inicial y los numeros que se van a almacenar en el, se hace un recorrido a este arreglo desde
                la primera hasta la ultima posicion y se van pasando los numeros al segundo arreglo, que debe recorrerse paralelamente desde la ultima
                hasta la primera posicion.

			Variables requeridas: 
                • n: numero de elementos del arreglo
                • i: variable de control para moverse en el primer arreglo.
                • j: variable de control para moverse en el segundo arreglo.
                • arregloInicial: arreglo que contiene los numeros iniciales.
                • arregloFinal: arreglo que contiene los numeros en orden inverso

	Propuesta 1: 

    ArregloInvertido 
        var
        entero arregloInicial [ ], arregloFinal [ ], n, i, j

        imprimir ( "Ingrese el tamaño del arreglo: " )
        leer ( n )

        arregloInicial = dimensionar ( n )
        arregloFinal = dimensionar ( n )

        Para i = 1 Hasta n Incremento 1
            imprimir ( "Ingrese un numero: " )
            leer ( arregloInicial [ i ] )

            Si ( numero [ i ] < 0 ) Entonces                        //Se validan numero positivos
                imprimir ( "el numero ingresado no es valido" )         
            FinSi
            MientrasQue ( numero [ i ] < 0 )                
        FinPara

        j = n                                                          // Se inicializa j con la variable de este arreglo

        Para i = 1 Hasta n Incremento 1 
            arregloFinal [ j ] = arregloInicial [ i ]
            j = j -1
        FinPara

        Para i = 1 Hasta n Incremento 1                     //Se imprimen todos los elementos 
            imprimir ( arregloFinal [ i ], " " )
        FinPara

    Fin ArregloInvertido



EJERCICIO 6.4. 	diseñe un algoritmo que permita almacenar en un vector una cantidad n de numeros pares y en otro vector una cantidad m de
                numeros impares ingresados por el usuario. Construya el algoritmo de tal manera que almacene en un tercer vector todos los numeros contenidos en
                los dos vectores iniciales y muestre al final el tercer vector

		ANALISIS: 

			Resultados esperados:  un vector con los datos almacenados en los dos arreglos iniciales.

			Datos disponibles: el tamaño de los dos vectores iniciales y los numeros que se van a almacenar en ellos

			Proceso: 
                solicitar al usuario el tamaño de cada uno de los vectores, luego, leer todos los numeros a almacenar en los dos vectores iniciales,
                posteriormente se toman todos los datos del primer vector (uno a uno) y se almacenan en el tercer vector, luego se toman los datos del
                segundo vector y se ubican tambien en el tercer vector y, finalmente se imprime el tercer vector

			Variables requeridas: 
                
                • arregloPares: vector que contiene todos los numeros pares que el usuario ingreso.
                • arregloImpares: vector que contiene todos los numeros impares que el usuario ingreso.
                • arregloTotal: vector que contiene todos los numeros que el usuario ingreso (pares e impares).
                • tamanioPares: cantidad de elementos que contiene el vector de pares.
                • tamanioImpares: cantidad de elementos que contiene el vector de impares.
                • tamanioTotal:
                • i: variable de control para los vectores.
                • j: variable de control para los vectores
                • salida: variable que almacena los datos del tercer vector para su posterior impresion

			 

	Propuesta 1: 

    ConcatenarArreglos

        var 
        Entero arregloPares [ ], arregloImpares [ ], arregloTotal [ ], tamanioPares
        Entero tamanioImpares, tamanioTotal, i, j 
        Cadena salida 

        imprimir ( "Ingrese el tamaño del arreglo par" )
        leer ( tamanioPares )

        imprimir ( "Ingrese el tamaño del arreglo impar" )
        leer ( tamanioImpares )

        tamanioTotal = tamanioPares + tamanioImpares				//Se determina la cantidad total de numeros a ingresar 

        arregloPares = dimensionar ( tamanioPares )
        arregloImpares = dimensionar ( tamanioImpares )
        arregloFinal = dimensionar ( tamanioTotal )

        Para i = 1 Hasta tamanioPares Incremento 1 					//Se genera lectura de numero pares 
            Haga 
                imprimir ( "Ingrese un numero par ", i ":  " )
                leer ( arregloPares [ i ] )

                Si  ( arregloPares [ i ] % 2 != 0 ) Entonces 
                    imprmir ( "el numero ingresado no es pas" )
                FinSi 
            MientrasQue ( arregloPares [ i ] % 2 != 0 )
        FinPara

        Para i = 1 Hasta tamanioImpares Incremento 

            Haga 
                imprimir ( "Ingrese un numero impar ", i ": " )
                leer ( arregloImpares [ i ] )

                Si ( arregloImpares [ i ] % 2 != 1) Entonces 
                    imprimir ( "el numero ingresado no es impar" )
                FinSi 
            MientrasQue ( arregloImpares [ i ] % 2 != 1 )
        FinPara

        j = 1														//Se recorre el vector del arreglo para copiar todos sus datos en vector arregloTotal
		Para i = 1 Hasta tamanioPares Incremento 1
		 	arregloTotal [ j ] = arregloPares [ i ]
			j = j + 1
		FinPara


        Para i = 1 Hasta tamanioImpares Incremento 1 
			arregloTotal [ j ] = arregloImpares [ i ]
			j = j + 1
		FinPara

		salida = "" 											//Se inicializa la variable con cadena vacia ("")

		Para i = 1 Hasta arregloTotal Incremento 1 				//Se recorre el arreglo total y con cada interaccion se concatena a la variable salida  el elemento del arreglo total 

			salida = salida + arregloTotal [ i ] + " " 			//en la posicion actual mas un espacio en blanco. Para despues proceder a imprimir 
		FinPara

		imprimir ( "Arreglo concatenado ", salida )

	Fin ConcatenarArreglos
		




EJERCICIO 6.5. 	

Diseñe un algoritmo que reciba como entrada un numero entero entre cero y noveinta y nueve (0 y 99) y que, como salida muestre
ese mismo numero, pero expresado esta vez en palabras.


		ANALISIS: 

			Resultados esperados: El numero ingresado ( 0, 99 ) pero expresado en palabras 

			Datos disponibles: Solicitar el numero que se desea convertir 

			Proceso: 
				se le solicita al usuario el numero  a convertir a palabras, luego se realiza un proceso para su conversion de este numero  a
				su equivalente en palabras realizando la busqueda de las palabras adecuadas en varios vectores, y finalmente se imprime el mensaje.
				El proceso de conversion, consiste en determinar si el numero  es menor a 11 para buscar la palabra que lo identifica en un primer
				vector; sino, se verifica si el numero  esta entre 11 y 19, de ser ası, se busca su respectiva palabra en otro vector; y si es mayor a 19, se
				determinan las unidades y las decenas de este numero  y se buscan sus palabras equivalentes en los vectores respectivos.
				Para la resolucion de este ejercicio se utilizan tres vectores que poseen las palabras, correspondientes a ciertos numero s claves, ya
				almacenadas desde su declaracion. en este sentido, el algoritmo no le solicita al usuario datos que vayan a ser almacenados en algun
				vector, ni mucho menos se requiere pedir el tamaño del mismo, pues como se acaba de mencionar, los vectores se llenan con los datos (las
				palabras) desde el momento en que se declaran.


			Variables requeridas: 
				
				• numero: que se desea convertir a palabras.
				• numeroPalabras: que almacena el numero  en palabras.
				• arregloUnidades: vector que contiene los nombres de los primeros once numero s (iniciando desde el cero).
				• arregloEspecial: vector que contiene los de los siguientes ocho numero s comenzando en once.
				• arregloDecenas: vector que contiene los nombres de los numero s del veinte al noventa, pero de diez en diez.
				• decenas: cantidad de decenas que tiene el numero  ingresado por usuario.
				• unidades: cantidad de unidades que tiene el numero  ingresado.


			 

	Propuesta 1: 
		ConversionNumero 

			//Var 

			Entero numero, decenas, unidaddes, 
			Cadena numeroPalabras
			Cadena arregloUnidades [  ] = { "cero", "uno", "dos", 
											"tres", "cuatro", "cinco",
											"seis", "siente", "ocho", 
											"nueve", "diez"  }
			
			Cadena arregloEspecial [  ] = { "once",	"doce",
											"trece", "catorce", "quince", 
											"dieciseis", "diecisiete", "dieciocho", 
											"diecinueve", "veinte" }
			
			Cadena arregloDecenas [  ] = { "veinte", "treinta",
											"cuarenta", "cincuneta", 
											"sesenta", "setenta", 
											"ochenta", "noventa"  }
			
			Haga 
				imprimir ( "Ingrese el numero a convertir: " )
				leer ( numero )

				Si ( numero < 0 O numero > 99 ) Entonces 
					imprimir ( "el numero ingresado  no es valido" )
				FinSi
				MientrasQue ( numero < 0 o numero > 99 )				//No se permite ingresar un numero por debajo de cero o por encima de 99

				Si ( numero <= 10 ) Entonces 							//Se determina si el numero es menor o igual a 10  si es correcto utiliza arregloUnidades
					numeroPalabras = arregloUnidades [ numero + 1 ]		//Se suma ya que la palabra cero ocupa la primer posicion 

					SiNo 
						Si ( numero <= 19 ) Entonces 					//Menor o igual a 19 se realiza busqueda en vector de especiales 
							numeroPalabras = arregloEspecial [ numero - 10 ]	//Se evalua y guarda en la variable numeroPalabras lo que hay en arregloEspecial ejemplo 
																				//EJ: se busca 17 - 10  = 7 y al buscar en la posicion 7 del vector se encuentra diecisiete
							SiNo 
								unidades = numero % 10
								decenas = numero / 10

								Si ( unidades == 0 ) Entonces 
									numeroPalabras = arregloDecenas [ decenas - 1 ]

									SiNo 
										numeroPalabras = arregloDecenas [ decenas - 1 ] + 
														" y " + 	
														arregloUnidades [ unidades +1 ]
								FinSi 
						FinSi 
				FinSi 
			imprimir ( "El numero es: ", numeroPalabras )

		Fin ConversionNumero



EJERCICIO 6.6.  
				Diseñe un algoritmo que almacene un grupo de n numeros enteros en un arreglo y luego determine mediante funciones  
				procedimientos cuantos de esos numeros ingresados son pares y cuantos son impares.

		ANALISIS: 

			Resultados esperados: la cantidad de numeros pares y de impares que estan almacenados en el arreglo de numeros.

			Datos disponibles: el tamaño que se le va a dar al arreglo y los numeros enteros que van a ser almacenados en el mismo

			Proceso: 
				solicitar la cantidad de elementos (n), despues leer todos los elementos para el arreglo, posteriormente recorrer el arreglo y
				determinar si el elemento que se encuentra en cada posicion es par; y si es ası, contarlo como par; lo mismo que si es impar. Al final, el
				algoritmo mostrara el valor con la cuenta final de los numeros pares y con los impares

			Variables requeridas: 
				
				• En el algoritmo principal
					 n: cantidad de elementos del arrreglo a procesar.
					 numeros: vector que contiene los elementos que el usuario ingresa.
					 cantidadPares: cantidad de numeros pares que contiene el vector original.
					 cantidadImpares: cantidad de numeros impares que contiene el vector original.
				
				• En la funcion leerDatos
					 Parametros:
					 n: cantidad de elementos a leer
					 Variables locales:
					 i: variable de control del ciclo
					 arreglo: vector que almacena los datos que el usuario ingresa.
				
				• En la funcion obtenerCantidadPares
					 Parametros:
					 arreglo: vector que almacena contiene los datos que el usuario ingresa.
					 n: tamaño del vector
					
				• En la funcion obtenerCantidadImpares
					Parametros:
					arreglo: vector que almacena contiene los datos que el usuario ingresa.
					n: tamaño del vector.
				
				En la funcion contar
				• Parametros:
					◦ arreglo: vector que contiene los datos a ser analizados.
					◦ resto: parametro que permite especificar si lo que se desea contar son pares (resto=0) o impares (resto=1). resto representa el resultado del resto de la division entera con 2 (arreglo[ i ] % 2 == resto).
					◦ n: tamaño del vector.
				• Variables locales:
					◦ i: variable de control del ciclo
					◦ cantidad: variable que permite contar la cantidad de pares o impares (dependiendo del valor resto) que hay en el arreglo

				En el procedimiento mostrarResultados
					• Parametros:
					◦ pares: cantidad de numeros pares que se encontraron en el vector.
					◦ impares: cantidad de numeros impares que se encontraron en el vector.

				
				

			 

	Propuesta 1: 
	NumeroParImparPF

        //VAR 

        Entero n, numeros [ ], cantidadPares, cantidadImpares

            imprimir ( "Ingrese la cantidad de numeros que contendra el arreglo: " )                //Se solicita el tamaño del vector 
            leer ( n )
                                                                                                    //Funciones 

            numeros = leerDatos ( n )                                                               //Se hace el llamado a leerDatos 
            cantidadPares = obtenerCantidadPares ( numeros, n )                                     //Se hace el llamado a obtenerCantidadPares 
            cantidadImpares = obtenerCantidadImpares ( numeros, n )                                 //Se hace el llamado a obtenerCantidadImpares


            mostrarResultados (cantidadPares, cantidadImpares)                          

    Fin NumeroParImparPF

---------------------------------------------------------------------------------------------

    Funcion Entero [  ] leerDatos ( Entero n )                                                      //Se utiliza para obtener los datos a ingresar y almacenarlos en cada una de las celdas del vector 
        Entero i, arreglo [ n ]

        Para i = 1 Hasta n Incremento 1                                                             //Recibe como parametro el tamañ del vector para inicializar el vector interno, llenarlo y retornarlo al final de la funcion
    
            imprimir ( "Ingrese el numero " , i, " : " )
            leer ( arreglo [ i ] )
        FinPara
        Retornar Arreglo 
    FinFuncion


---------------------------------------------------------------------------------------------
    
    Funcion Entero obtenerCantidadPares ( Entero arreglo [  ], 
                                          Entero n )
        Retornar contar ( arrreglo, 0, n )
    FinFuncion

---------------------------------------------------------------------------------------------    //Ambas funciones obtenerCantidadPares y obtenerCantidadImpares son casos especiales de la funcion mas general contar (  )
---------------------------------------------------------------------------------------------    //La unica diferencia que existe es el valor del resto de la division entera con dos pares = 0 e impares = 1
    
    Funcion Entero obtenerCantidadImpares ( Entero arreglo [  ], 
                                            Entero n )
        Retornar contar ( arreglo, 1, n )
    FinFuncion

---------------------------------------------------------------------------------------------    
    
    Funcion Entero contar ( Entero arreglo [  ],                                                //Esta funcion se utiliza para deternimar si el numero almacenado es par (0 )o impar (1) 
                            Entero resto, 
                            Entero n )

        Entero i, cantidad 

        cantidad = 0                                                                           //Se inicializa el contador cantidad = 0 que recorre todo el arreglo verificando si el numero es par o impar 

        Para i = 1 Hasta n Incremento 1 
            Si ( arreglo [ i ] % 2 == resto ) Entonces 
                cantidad = cantidad + 1                                                         //De ser verdadera la condicion del Si se cuenta uno mas 
            FinSi 
        FinPara

        Retornar cantidad 
    FinFuncion

---------------------------------------------------------------------------------------------
    
    Procedimiento mostrarResultados ( Entero pares, 
                                      Entero impares )
        imprimir ( "Cantidad de pares: ", pares )                                               //Se reciben la cantidad de pares e impares encontrados en el arreglo 
        imprimir ( "Cantidad de impares: ", impares )
    FinProcedimiento

---------------------------------------------------------------------------------------------



EJERCICIO 6.7. 	 Escribir un algoritmo que almacene en un arreglo unidimensional las notas finales obtenidas por un grupo de 20 estudiantes 
                en una materia cualquiera y, a traves de funciones, determine el promedio del grupo, la nota mas alta y mas baja obtenida en la materia.


		ANALISIS: 

			Resultados esperados: mostrar la nota promedio del grupo de estudiantes, la mayor y menor nota obtenidas entre las 20 que conforman el grupo.

			Datos disponibles: Las notas de los 20 estudiantes 

			Proceso: 
                    lo primero que se hace en este algoritmo es solicitar las 20 notas al usuario y almacenarlas en el vector. Posteriormente, para encontrar la nota promedio del grupo, se recorre el vector, se suman
                    todas las notas y se divide esta suma entre los 20 estudiantes; esto implica utilizar un ciclo que facilite el recorrido por las distintas posiciones del vector y el uso de una variable de tipo acumulador en
                    la que se van sumando las notas. Tambien se debe recorrer el vector con el fin de identificar la nota mas alta y la mas baja que esten almacenadas en el; para determinar la nota mas alta, se compara la
                    nota almacenada en la primera posicion del arreglo con la segunda para saber cual es mayor, luego la segunda con la tercera y ası sucesivamente hasta llegar a la ultima nota, lo que implica el uso
                    de una estructura de decision. De la misma forma se hace si se desea conocer la nota mas baja, en este caso la comparacion con el Si entre las dos notas se lleva a cabo para conocer la menor nota. Tenga en
                    cuenta que, como el ejercicio se esta desarrollando para un grupo de 20 estudiantes, se usa una constante que contenga este valor durante todo el algoritmo

			Variables requeridas: 

• En el algoritmo principal
◦ MAX: constante que almacena la cantidad de estudiantes, para el ejemplo son 20.
◦ arrregloNotas: vector que contiene las notas de los estudiantes.
◦ notaMayor: almacena la menor nota entre todas las ingresadas.
◦ notaMenor: almacena la mayor nota de los estudiantes.
◦ notaPromedio: almacena la nota promedio del grupo de estudiantes.

    • En la funcion leerDatos

        ◦ Parametros:
         tamanio: cantidad de elementos a leer

        ◦ Variables locales:
         i: variable de control del ciclo
         arreglo: vector que almacena las notas que el usuario ingresa.

    • En la funcion calcularPromedio
        ◦ Parametros:
            arregloNotas: vector que almacena las notas de los estudiantes.
            n: tamaño del vector.
        ◦ Variables locales:
         i: variable de control del ciclo.
         suma: variable para almacenar la suma de todas las notas.
         promedio: variable para almacenar el promedio de las notas.

    • En la funcion obtenerMayor
        ◦ Parametros:
         arregloNotas: vector que almacena las notas de los estudiantes.
         n: tamaño del vector.
        ◦ Variables locales:
         i: variable de control del ciclo.
         mayor: variable para almacenar el mayor valor del arreglo de notas.
    • En la funcion obtenerMenor
        ◦ Parametros:
         arregloNotas: vector que almacena las notas de los estudiantes.
         n: tamaño del vector.
        ◦ Variables locales:
         i: variable de control del ciclo.
         menor: variable para almacenar el menor valor del
        vector de notas.
    En el procedimiento mostrarResultados
        • Parametros:
        ◦ promedio: promedio de las notas de los estudiantes.
        ◦ mayor: mayor nota de los estudiantes.
        ◦ menor: menor nota de los estudiantes.
			 

			Propuesta 1:

